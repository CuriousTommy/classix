//
// InterfaceLib.h
// Classix
//
// Copyright (C) 2013 FÃ©lix Cloutier
//
// This file is part of Classix.
//
// Classix is free software: you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your option) any later
// version.
//
// Classix is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
// A PARTICULAR PURPOSE. See the GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License along with
// Classix. If not, see http://www.gnu.org/licenses/.
//

#include <unistd.h>

#include "IAllocator.h"
#include "MachineState.h"
#include "SymbolType.h"
#include "BigEndian.h"

namespace InterfaceLib
{
	using namespace Common;
	typedef SInt16 Bits16[16];
	
	struct Point
	{
		SInt16 v;
		SInt16 h;
	};
	
	struct Rect
	{
		SInt16 top;
		SInt16 left;
		SInt16 bottom;
		SInt16 right;
	};
	
	struct Pattern
	{
		uint8_t pat[8];
	};
	
	struct BitMap
	{
		Common::UInt32 baseAddr;
		Common::SInt16 rowBytes;
		Rect bounds;
	};
	
	struct Cursor
	{
		Bits16 data;
		Bits16 mask;
		Point hotSpot;
	};
	
	struct MacRegion
	{
		UInt16 rgnSize;
		Rect rgnBBox;
	};
	
	enum class Style : uint8_t
	{
		Normal,
		Bold, 
		Italic,
		Underline,
		Outline,
		Shadow,
		Condense,
		Extend
	};
	
	struct QDProcs
	{
		UInt32 procs[13];
	};
	
	struct GrafPort
	{
		SInt16 device;
		BitMap portBits;
		Rect portRect;
		UInt32 visRgn; // MacRegion**
		UInt32 clipRgn; // MacRegion**
		Pattern bkPat;
		Pattern fillPat;
		Point pnLoc;
		Point pnSize;
		SInt16 pnMode;
		Pattern pnPat;
		SInt16 pnVis;
		SInt16 txFont;
		Style txFace;
		
		SInt16 txMode;
		SInt16 txSize;
		SInt32 spExtra;
		SInt32 fgColor;
		SInt32 bkColor;
		SInt16 colrBit;
		SInt16 patStretch;
		UInt32 picSave; // Handle
		UInt32 rgnSave; // Handle
		UInt32 polySave; // Handle
		QDProcs procs;
	};
	
	union Pipe
	{
		int fd[2];
		int read;
		int write;
	};
	
	struct Globals
	{
		GrafPort port;
		uint8_t padding[0x1000];
		
		Common::IAllocator& allocator;
		Pipe read;
		Pipe write;
		pid_t head;
		
		Globals(Common::IAllocator& allocator);
	};
}

extern "C"
{
using PPCVM::MachineState;
	
InterfaceLib::Globals* LibraryLoad(Common::IAllocator* allocator);
SymbolType LibraryLookup(InterfaceLib::Globals* globals, const char* symbolName, void** symbol);
void LibraryUnload(InterfaceLib::Globals* context);
extern const char* LibrarySymbolNames[];

/* AEDataModel */
void InterfaceLib_AECoerceDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AECoerceDesc(const AEDesc * theAEDesc, DescType toType, AEDesc * result)
void InterfaceLib_AECoercePtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AECoercePtr(DescType typeCode, const void * dataPtr, Size dataSize, DescType toType, AEDesc * result)
void InterfaceLib_AECountItems(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AECountItems(const AEDescList * theAEDescList, long * theCount)
void InterfaceLib_AECreateAppleEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AECreateAppleEvent(AEEventClass theAEEventClass, AEEventID theAEEventID, const AEAddressDesc * target, AEReturnID returnID, AETransactionID transactionID, AppleEvent * result)
void InterfaceLib_AECreateDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AECreateDesc(DescType typeCode, const void * dataPtr, Size dataSize, AEDesc * result)
void InterfaceLib_AECreateList(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AECreateList(const void * factoringPtr, Size factoredSize, Boolean isRecord, AEDescList * resultList)
void InterfaceLib_AEDeleteItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEDeleteItem(AEDescList * theAEDescList, long index)
void InterfaceLib_AEDeleteParam(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEDeleteParam(AppleEvent * theAppleEvent, AEKeyword theAEKeyword)
void InterfaceLib_AEDisposeDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEDisposeDesc(AEDesc * theAEDesc)
void InterfaceLib_AEDuplicateDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEDuplicateDesc(const AEDesc * theAEDesc, AEDesc * result)
void InterfaceLib_AEGetArray(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetArray(const AEDescList * theAEDescList, AEArrayType arrayType, AEArrayDataPointer arrayPtr, Size maximumSize, DescType * itemType, Size * itemSize, long * itemCount)
void InterfaceLib_AEGetAttributeDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetAttributeDesc(const AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType desiredType, AEDesc * result)
void InterfaceLib_AEGetAttributePtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetAttributePtr(const AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType desiredType, DescType * typeCode, void * dataPtr, Size maximumSize, Size * actualSize)
void InterfaceLib_AEGetCoercionHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetCoercionHandler(DescType fromType, DescType toType, AECoercionHandlerUPP * handler, long * handlerRefcon, Boolean * fromTypeIsDesc, Boolean isSysHandler)
void InterfaceLib_AEGetNthDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetNthDesc(const AEDescList * theAEDescList, long index, DescType desiredType, AEKeyword * theAEKeyword, AEDesc * result)
void InterfaceLib_AEGetNthPtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetNthPtr(const AEDescList * theAEDescList, long index, DescType desiredType, AEKeyword * theAEKeyword, DescType * typeCode, void * dataPtr, Size maximumSize, Size * actualSize)
void InterfaceLib_AEGetParamDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetParamDesc(const AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType desiredType, AEDesc * result)
void InterfaceLib_AEGetParamPtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetParamPtr(const AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType desiredType, DescType * typeCode, void * dataPtr, Size maximumSize, Size * actualSize)
void InterfaceLib_AEInstallCoercionHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEInstallCoercionHandler(DescType fromType, DescType toType, AECoercionHandlerUPP handler, long handlerRefcon, Boolean fromTypeIsDesc, Boolean isSysHandler)
void InterfaceLib_AEPutArray(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEPutArray(AEDescList * theAEDescList, AEArrayType arrayType, const AEArrayData * arrayPtr, DescType itemType, Size itemSize, long itemCount)
void InterfaceLib_AEPutAttributeDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEPutAttributeDesc(AppleEvent * theAppleEvent, AEKeyword theAEKeyword, const AEDesc * theAEDesc)
void InterfaceLib_AEPutAttributePtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEPutAttributePtr(AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType typeCode, const void * dataPtr, Size dataSize)
void InterfaceLib_AEPutDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEPutDesc(AEDescList * theAEDescList, long index, const AEDesc * theAEDesc)
void InterfaceLib_AEPutParamDesc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEPutParamDesc(AppleEvent * theAppleEvent, AEKeyword theAEKeyword, const AEDesc * theAEDesc)
void InterfaceLib_AEPutParamPtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEPutParamPtr(AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType typeCode, const void * dataPtr, Size dataSize)
void InterfaceLib_AEPutPtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEPutPtr(AEDescList * theAEDescList, long index, DescType typeCode, const void * dataPtr, Size dataSize)
void InterfaceLib_AERemoveCoercionHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AERemoveCoercionHandler(DescType fromType, DescType toType, AECoercionHandlerUPP handler, Boolean isSysHandler)
void InterfaceLib_AESizeOfAttribute(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AESizeOfAttribute(const AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType * typeCode, Size * dataSize)
void InterfaceLib_AESizeOfNthItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AESizeOfNthItem(const AEDescList * theAEDescList, long index, DescType * typeCode, Size * dataSize)
void InterfaceLib_AESizeOfParam(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AESizeOfParam(const AppleEvent * theAppleEvent, AEKeyword theAEKeyword, DescType * typeCode, Size * dataSize)

/* AEInteraction */
void InterfaceLib_AEGetInteractionAllowed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetInteractionAllowed(AEInteractAllowed * level)
void InterfaceLib_AEGetTheCurrentEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetTheCurrentEvent(AppleEvent * theAppleEvent)
void InterfaceLib_AEInteractWithUser(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEInteractWithUser(long timeOutInTicks, NMRecPtr nmReqPtr, AEIdleUPP idleProc)
void InterfaceLib_AEProcessAppleEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEProcessAppleEvent(const EventRecord * theEventRecord)
void InterfaceLib_AEResetTimer(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEResetTimer(const AppleEvent * reply)
void InterfaceLib_AEResumeTheCurrentEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEResumeTheCurrentEvent(const AppleEvent * theAppleEvent, const AppleEvent * reply, AEEventHandlerUPP dispatcher, /* can be NULL */ long handlerRefcon)
void InterfaceLib_AESend(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AESend(const AppleEvent * theAppleEvent, AppleEvent * reply, AESendMode sendMode, AESendPriority sendPriority, long timeOutInTicks, AEIdleUPP idleProc, /* can be NULL */ AEFilterUPP filterProc)
void InterfaceLib_AESetInteractionAllowed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AESetInteractionAllowed(AEInteractAllowed level)
void InterfaceLib_AESetTheCurrentEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AESetTheCurrentEvent(const AppleEvent * theAppleEvent)
void InterfaceLib_AESuspendTheCurrentEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AESuspendTheCurrentEvent(const AppleEvent * theAppleEvent)

/* ATA */
void InterfaceLib_ataManager(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 ataManager(ataPB * pb)

/* AVLTree */
void InterfaceLib_AVLCount(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLCount(AVLTreePtr tree, UInt32 * count)
void InterfaceLib_AVLDispose(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLDispose(AVLTreePtr * tree, AVLOrder order)
void InterfaceLib_AVLFind(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLFind(AVLTreePtr tree, const void * key, void * dataPtr, UInt32 * itemSize)
void InterfaceLib_AVLGetIndItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLGetIndItem(AVLTreePtr tree, UInt32 index, void * dataPtr, UInt32 * itemSize)
void InterfaceLib_AVLGetRefcon(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLGetRefcon(AVLTreePtr tree, void ** refCon)
void InterfaceLib_AVLInit(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLInit(UInt32 flags, AVLCompareItemsUPP compareItemsProc, AVLItemSizeUPP sizeItemProc, AVLDisposeItemUPP disposeItemProc, void * refCon, AVLTreePtr * tree)
void InterfaceLib_AVLInsert(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLInsert(AVLTreePtr tree, const void * data)
void InterfaceLib_AVLRemove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLRemove(AVLTreePtr tree, const void * key, void * dataPtr, UInt32 * itemSize)
void InterfaceLib_AVLWalk(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AVLWalk(AVLTreePtr tree, AVLWalkUPP walkProc, AVLOrder order, void * walkRefCon)

/* Aliases */
void InterfaceLib_FollowFinderAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FollowFinderAlias(const FSSpec * fromFile, /* can be NULL */ AliasHandle alias, Boolean logon, FSSpec * target, Boolean * wasChanged)
void InterfaceLib_FSFollowFinderAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSFollowFinderAlias(FSRef * fromFile, /* can be NULL */ AliasHandle alias, Boolean logon, FSRef * target, Boolean * wasChanged)
void InterfaceLib_FSIsAliasFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSIsAliasFile(const FSRef * fileRef, Boolean * aliasFileFlag, Boolean * folderFlag)
void InterfaceLib_FSNewAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSNewAlias(const FSRef * fromFile, /* can be NULL */ const FSRef * target, AliasHandle * inAlias)
void InterfaceLib_FSNewAliasMinimal(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSNewAliasMinimal(const FSRef * target, AliasHandle * inAlias)
void InterfaceLib_FSResolveAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSResolveAlias(const FSRef * fromFile, /* can be NULL */ AliasHandle alias, FSRef * target, Boolean * wasChanged)
void InterfaceLib_FSResolveAliasFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSResolveAliasFile(FSRef * theRef, Boolean resolveAliasChains, Boolean * targetIsFolder, Boolean * wasAliased)
void InterfaceLib_FSResolveAliasFileWithMountFlags(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSResolveAliasFileWithMountFlags(FSRef * theRef, Boolean resolveAliasChains, Boolean * targetIsFolder, Boolean * wasAliased, unsigned long mountFlags)
void InterfaceLib_FSResolveAliasWithMountFlags(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSResolveAliasWithMountFlags(const FSRef * fromFile, /* can be NULL */ AliasHandle inAlias, FSRef * target, Boolean * wasChanged, unsigned long mountFlags)
void InterfaceLib_FSUpdateAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSUpdateAlias(const FSRef * fromFile, /* can be NULL */ const FSRef * target, AliasHandle alias, Boolean * wasChanged)
void InterfaceLib_GetAliasInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetAliasInfo(AliasHandle alias, AliasInfoType index, Str63 theString)
void InterfaceLib_IsAliasFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IsAliasFile(const FSSpec * fileFSSpec, Boolean * aliasFileFlag, Boolean * folderFlag)
void InterfaceLib_MatchAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MatchAlias(const FSSpec * fromFile, /* can be NULL */ unsigned long rulesMask, AliasHandle alias, short * aliasCount, FSSpecArrayPtr aliasList, Boolean * needsUpdate, AliasFilterUPP aliasFilter, void * yourDataPtr)
void InterfaceLib_NewAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewAlias(const FSSpec * fromFile, /* can be NULL */ const FSSpec * target, AliasHandle * alias)
void InterfaceLib_NewAliasMinimal(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewAliasMinimal(const FSSpec * target, AliasHandle * alias)
void InterfaceLib_NewAliasMinimalFromFullPath(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewAliasMinimalFromFullPath(short fullPathLength, const void * fullPath, ConstStr32Param zoneName, ConstStr31Param serverName, AliasHandle * alias)
void InterfaceLib_ResolveAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ResolveAlias(const FSSpec * fromFile, /* can be NULL */ AliasHandle alias, FSSpec * target, Boolean * wasChanged)
void InterfaceLib_ResolveAliasFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ResolveAliasFile(FSSpec * theSpec, Boolean resolveAliasChains, Boolean * targetIsFolder, Boolean * wasAliased)
void InterfaceLib_ResolveAliasFileWithMountFlags(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ResolveAliasFileWithMountFlags(FSSpec * theSpec, Boolean resolveAliasChains, Boolean * targetIsFolder, Boolean * wasAliased, unsigned long mountFlags)
void InterfaceLib_ResolveAliasWithMountFlags(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ResolveAliasWithMountFlags(const FSSpec * fromFile, /* can be NULL */ AliasHandle alias, FSSpec * target, Boolean * wasChanged, unsigned long mountFlags)
void InterfaceLib_UpdateAlias(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UpdateAlias(const FSSpec * fromFile, /* can be NULL */ const FSSpec * target, AliasHandle alias, Boolean * wasChanged)

/* AppleEvents */
void InterfaceLib_AEGetEventHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetEventHandler(AEEventClass theAEEventClass, AEEventID theAEEventID, AEEventHandlerUPP * handler, long * handlerRefcon, Boolean isSysHandler)
void InterfaceLib_AEGetSpecialHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEGetSpecialHandler(AEKeyword functionClass, AEEventHandlerUPP * handler, Boolean isSysHandler)
void InterfaceLib_AEInstallEventHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEInstallEventHandler(AEEventClass theAEEventClass, AEEventID theAEEventID, AEEventHandlerUPP handler, long handlerRefcon, Boolean isSysHandler)
void InterfaceLib_AEInstallSpecialHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEInstallSpecialHandler(AEKeyword functionClass, AEEventHandlerUPP handler, Boolean isSysHandler)
void InterfaceLib_AEManagerInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AEManagerInfo(AEKeyword keyWord, long * result)
void InterfaceLib_AERemoveEventHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AERemoveEventHandler(AEEventClass theAEEventClass, AEEventID theAEEventID, AEEventHandlerUPP handler, Boolean isSysHandler)
void InterfaceLib_AERemoveSpecialHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AERemoveSpecialHandler(AEKeyword functionClass, AEEventHandlerUPP handler, Boolean isSysHandler)

/* AppleTalk */
void InterfaceLib_AFPCommand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AFPCommand(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPAbortOS(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPAbortOS(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPCloseAll(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPCloseAll(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPCloseSession(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPCloseSession(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPGetParms(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPGetParms(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPGetStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPGetStatus(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPOpenSession(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPOpenSession(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPUserCommand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPUserCommand(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ASPUserWrite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ASPUserWrite(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_ATEvent(InterfaceLib::Globals* globals, MachineState* state);		// void ATEvent(long event, Ptr infoPtr)
void InterfaceLib_ATPKillAllGetReq(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ATPKillAllGetReq(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_ATPLoad(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ATPLoad(void)
void InterfaceLib_ATPreFlightEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ATPreFlightEvent(long event, long cancel, Ptr infoPtr)
void InterfaceLib_ATPUnload(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ATPUnload(void)
void InterfaceLib_BuildBDS(InterfaceLib::Globals* globals, MachineState* state);		// short BuildBDS(Ptr buffPtr, Ptr bdsPtr, short buffSize)
void InterfaceLib_BuildDDPwds(InterfaceLib::Globals* globals, MachineState* state);		// void BuildDDPwds(Ptr wdsPtr, Ptr headerPtr, Ptr dataPtr, AddrBlock netAddr, short ddpType, short dataLen)
void InterfaceLib_BuildLAPwds(InterfaceLib::Globals* globals, MachineState* state);		// void BuildLAPwds(Ptr wdsPtr, Ptr dataPtr, short destHost, short prototype, short frameLen)
void InterfaceLib_GetBridgeAddress(InterfaceLib::Globals* globals, MachineState* state);		// short GetBridgeAddress(void)
void InterfaceLib_GetLocalZones(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetLocalZones(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_GetMyZone(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetMyZone(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_GetNodeAddress(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetNodeAddress(short * myNode, short * myNet)
void InterfaceLib_GetZoneList(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetZoneList(XPPParmBlkPtr thePBptr, Boolean async)
void InterfaceLib_IsATPOpen(InterfaceLib::Globals* globals, MachineState* state);		// Boolean IsATPOpen(void)
void InterfaceLib_IsMPPOpen(InterfaceLib::Globals* globals, MachineState* state);		// Boolean IsMPPOpen(void)
void InterfaceLib_LAPAddATQ(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LAPAddATQ(ATQEntryPtr theATQEntry)
void InterfaceLib_LAPRmvATQ(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LAPRmvATQ(ATQEntryPtr theATQEntry)
void InterfaceLib_MPPOpen(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MPPOpen(void)
void InterfaceLib_NBPExtract(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NBPExtract(Ptr theBuffer, short numInBuf, short whichOne, EntityName * abEntity, AddrBlock * address)
void InterfaceLib_NBPSetEntity(InterfaceLib::Globals* globals, MachineState* state);		// void NBPSetEntity(Ptr buffer, ConstStr32Param nbpObject, ConstStr32Param nbpType, ConstStr32Param nbpZone)
void InterfaceLib_NBPSetNTE(InterfaceLib::Globals* globals, MachineState* state);		// void NBPSetNTE(Ptr ntePtr, ConstStr32Param nbpObject, ConstStr32Param nbpType, ConstStr32Param nbpZone, short socket)
void InterfaceLib_OpenXPP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenXPP(short * xppRefnum)
void InterfaceLib_PAddResponse(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PAddResponse(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PATalkClosePrep(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PATalkClosePrep(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PAttachPH(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PAttachPH(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PCloseATPSkt(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PCloseATPSkt(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PCloseSkt(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PCloseSkt(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PConfirmName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PConfirmName(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PDetachPH(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PDetachPH(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PGetAppleTalkInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PGetAppleTalkInfo(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PGetRequest(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PGetRequest(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PKillGetReq(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PKillGetReq(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PKillNBP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PKillNBP(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PKillSendReq(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PKillSendReq(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PLookupName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PLookupName(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PNSendRequest(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PNSendRequest(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_POpenATPSkt(InterfaceLib::Globals* globals, MachineState* state);		// OSErr POpenATPSkt(ATPPBPtr thePBptr, Boolean async)
void InterfaceLib_POpenSkt(InterfaceLib::Globals* globals, MachineState* state);		// OSErr POpenSkt(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PRegisterName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PRegisterName(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PRelRspCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PRelRspCB(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PRelTCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PRelTCB(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PRemoveName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PRemoveName(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PSendRequest(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PSendRequest(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PSendResponse(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PSendResponse(ATPPBPtr thePBPtr, Boolean async)
void InterfaceLib_PSetSelfSend(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PSetSelfSend(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PWriteDDP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PWriteDDP(MPPPBPtr thePBptr, Boolean async)
void InterfaceLib_PWriteLAP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PWriteLAP(MPPPBPtr thePBptr, Boolean async)

/* Balloons */
void InterfaceLib_HMBalloonPict(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMBalloonPict(const HMMessageRecord * inMessage, PicHandle * outPict)
void InterfaceLib_HMBalloonRect(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMBalloonRect(const HMMessageRecord * inMessage, Rect * outRect)
void InterfaceLib_HMExtractHelpMsg(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMExtractHelpMsg(ResType inType, SInt16 inResID, SInt16 inMessageIndex, SInt16 inMessageState, HMMessageRecord * outMessage)
void InterfaceLib_HMGetBalloons(InterfaceLib::Globals* globals, MachineState* state);		// Boolean HMGetBalloons(void)
void InterfaceLib_HMGetBalloonWindow(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMGetBalloonWindow(WindowRef * window)
void InterfaceLib_HMGetDialogResID(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMGetDialogResID(SInt16 * resID)
void InterfaceLib_HMGetFont(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMGetFont(SInt16 * font)
void InterfaceLib_HMGetFontSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMGetFontSize(UInt16 * fontSize)
void InterfaceLib_HMGetHelpMenuHandle(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMGetHelpMenuHandle(MenuRef * mh)
void InterfaceLib_HMGetIndHelpMsg(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMGetIndHelpMsg(ResType inWhichResType, SInt16 inWhichResID, SInt16 inMessageIndex, SInt16 inMessageState, UInt32 * outOptions, Point * outTip, Rect * outHotRect, SInt16 * outWindowProcID, BalloonVariant * outBalloonVariant, HMMessageRecord * outHelpMessage, SInt16 * outMessageCount)
void InterfaceLib_HMGetMenuResID(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMGetMenuResID(SInt16 menuID, SInt16 * resID)
void InterfaceLib_HMIsBalloon(InterfaceLib::Globals* globals, MachineState* state);		// Boolean HMIsBalloon(void)
void InterfaceLib_HMRemoveBalloon(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMRemoveBalloon(void)
void InterfaceLib_HMScanTemplateItems(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMScanTemplateItems(SInt16 whichID, SInt16 whichResFile, ResType whichType)
void InterfaceLib_HMSetBalloons(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMSetBalloons(Boolean flag)
void InterfaceLib_HMSetDialogResID(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMSetDialogResID(SInt16 resID)
void InterfaceLib_HMSetFont(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMSetFont(SInt16 font)
void InterfaceLib_HMSetFontSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMSetFontSize(UInt16 fontSize)
void InterfaceLib_HMSetMenuResID(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMSetMenuResID(SInt16 menuID, SInt16 resID)
void InterfaceLib_HMShowBalloon(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMShowBalloon(const HMMessageRecord * inHelpMessage, Point inTip, Rect * inHotRect, /* can be NULL */ TipFunctionUPP inTipProc, SInt16 inWindowProcID, BalloonVariant inBalloonVariant, SInt16 inMethod)
void InterfaceLib_HMShowMenuBalloon(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HMShowMenuBalloon(SInt16 itemNum, SInt16 itemMenuID, SInt32 itemFlags, SInt32 itemReserved, Point tip, Rect * alternateRect, /* can be NULL */ TipFunctionUPP tipProc, SInt16 theProc, BalloonVariant balloonVariant)

/* CTBUtilities */
void InterfaceLib_CTBGetCTBVersion(InterfaceLib::Globals* globals, MachineState* state);		// short CTBGetCTBVersion(void)
void InterfaceLib_CustomNBP(InterfaceLib::Globals* globals, MachineState* state);		// short CustomNBP(Point where, ConstStr255Param prompt, short numTypes, NLType typeList, NameFilterUPP nameFilter, ZoneFilterUPP zoneFilter, DialogHookUPP hook, long userData, short dialogID, ModalFilterUPP filter, NBPReply * theReply)
void InterfaceLib_InitCTBUtilities(InterfaceLib::Globals* globals, MachineState* state);		// CTBUErr InitCTBUtilities(void)
void InterfaceLib_StandardNBP(InterfaceLib::Globals* globals, MachineState* state);		// short StandardNBP(Point where, ConstStr255Param prompt, short numTypes, NLType typeList, NameFilterUPP nameFilter, ZoneFilterUPP zoneFilter, DialogHookUPP hook, NBPReply * theReply)

/* CodeFragments */
void InterfaceLib_CloseConnection(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseConnection(CFragConnectionID * connID)
void InterfaceLib_CountSymbols(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CountSymbols(CFragConnectionID connID, long * symCount)
void InterfaceLib_FindSymbol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FindSymbol(CFragConnectionID connID, ConstStr255Param symName, Ptr * symAddr, /* can be NULL */ CFragSymbolClass * symClass)
void InterfaceLib_GetDiskFragment(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetDiskFragment(const FSSpec * fileSpec, UInt32 offset, UInt32 length, ConstStr63Param fragName, /* can be NULL */ CFragLoadOptions options, CFragConnectionID * connID, /* can be NULL */ Ptr * mainAddr, /* can be NULL */ Str255 errMessage)
void InterfaceLib_GetIndSymbol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetIndSymbol(CFragConnectionID connID, long symIndex, Str255 symName, /* can be NULL */ Ptr * symAddr, /* can be NULL */ CFragSymbolClass * symClass)
void InterfaceLib_GetMemFragment(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetMemFragment(void * memAddr, UInt32 length, ConstStr63Param fragName, /* can be NULL */ CFragLoadOptions options, CFragConnectionID * connID, /* can be NULL */ Ptr * mainAddr, /* can be NULL */ Str255 errMessage)
void InterfaceLib_GetSharedLibrary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetSharedLibrary(ConstStr63Param libName, CFragArchitecture archType, CFragLoadOptions options, CFragConnectionID * connID, Ptr * mainAddr, Str255 errMessage)

/* ColorPicker */
void InterfaceLib_CMY2RGB(InterfaceLib::Globals* globals, MachineState* state);		// void CMY2RGB(const CMYColor * cColor, RGBColor * rColor)
void InterfaceLib_Fix2SmallFract(InterfaceLib::Globals* globals, MachineState* state);		// SmallFract Fix2SmallFract(Fixed f)
void InterfaceLib_GetColor(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetColor(Point where, ConstStr255Param prompt, const RGBColor * inColor, RGBColor * outColor)
void InterfaceLib_HSL2RGB(InterfaceLib::Globals* globals, MachineState* state);		// void HSL2RGB(const HSLColor * hColor, RGBColor * rColor)
void InterfaceLib_HSV2RGB(InterfaceLib::Globals* globals, MachineState* state);		// void HSV2RGB(const HSVColor * hColor, RGBColor * rColor)
void InterfaceLib_RGB2CMY(InterfaceLib::Globals* globals, MachineState* state);		// void RGB2CMY(const RGBColor * rColor, CMYColor * cColor)
void InterfaceLib_RGB2HSL(InterfaceLib::Globals* globals, MachineState* state);		// void RGB2HSL(const RGBColor * rColor, HSLColor * hColor)
void InterfaceLib_RGB2HSV(InterfaceLib::Globals* globals, MachineState* state);		// void RGB2HSV(const RGBColor * rColor, HSVColor * hColor)
void InterfaceLib_SmallFract2Fix(InterfaceLib::Globals* globals, MachineState* state);		// Fixed SmallFract2Fix(SmallFract s)

/* CommResources */
void InterfaceLib_CRMFindCommunications(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CRMFindCommunications(short * vRefNum, long * dirID)
void InterfaceLib_CRMGet1IndResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGet1IndResource(ResType theType, short index)
void InterfaceLib_CRMGet1NamedResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGet1NamedResource(ResType theType, ConstStr255Param name)
void InterfaceLib_CRMGet1Resource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGet1Resource(ResType theType, short theID)
void InterfaceLib_CRMGetCRMVersion(InterfaceLib::Globals* globals, MachineState* state);		// short CRMGetCRMVersion(void)
void InterfaceLib_CRMGetHeader(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr CRMGetHeader(void)
void InterfaceLib_CRMGetIndex(InterfaceLib::Globals* globals, MachineState* state);		// long CRMGetIndex(Handle theHandle)
void InterfaceLib_CRMGetIndResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGetIndResource(ResType theType, short index)
void InterfaceLib_CRMGetIndToolName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CRMGetIndToolName(OSType bundleType, short index, Str255 toolName)
void InterfaceLib_CRMGetNamedResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGetNamedResource(ResType theType, ConstStr255Param name)
void InterfaceLib_CRMGetResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGetResource(ResType theType, short theID)
void InterfaceLib_CRMGetToolNamedResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGetToolNamedResource(short procID, ResType theType, ConstStr255Param name)
void InterfaceLib_CRMGetToolResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle CRMGetToolResource(short procID, ResType theType, short theID)
void InterfaceLib_CRMInstall(InterfaceLib::Globals* globals, MachineState* state);		// void CRMInstall(CRMRecPtr crmReqPtr)
void InterfaceLib_CRMIsDriverOpen(InterfaceLib::Globals* globals, MachineState* state);		// Boolean CRMIsDriverOpen(ConstStr255Param driverName)
void InterfaceLib_CRMLocalToRealID(InterfaceLib::Globals* globals, MachineState* state);		// short CRMLocalToRealID(ResType bundleType, short toolID, ResType theType, short localID)
void InterfaceLib_CRMParseCAPSResource(InterfaceLib::Globals* globals, MachineState* state);		// CRMErr CRMParseCAPSResource(Handle theHandle, ResType selector, unsigned long * value)
void InterfaceLib_CRMRealToLocalID(InterfaceLib::Globals* globals, MachineState* state);		// short CRMRealToLocalID(ResType bundleType, short toolID, ResType theType, short realID)
void InterfaceLib_CRMReleaseResource(InterfaceLib::Globals* globals, MachineState* state);		// void CRMReleaseResource(Handle theHandle)
void InterfaceLib_CRMReleaseRF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CRMReleaseRF(short refNum)
void InterfaceLib_CRMReleaseToolResource(InterfaceLib::Globals* globals, MachineState* state);		// void CRMReleaseToolResource(short procID, Handle theHandle)
void InterfaceLib_CRMRemove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CRMRemove(CRMRecPtr crmReqPtr)
void InterfaceLib_CRMReserveRF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CRMReserveRF(short refNum)
void InterfaceLib_CRMSearch(InterfaceLib::Globals* globals, MachineState* state);		// CRMRecPtr CRMSearch(CRMRecPtr crmReqPtr)
void InterfaceLib_InitCRM(InterfaceLib::Globals* globals, MachineState* state);		// CRMErr InitCRM(void)

/* Components */
void InterfaceLib_CallComponentCanDo(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentCanDo(ComponentInstance ci, short ftnNumber)
void InterfaceLib_CallComponentClose(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentClose(ComponentInstance ci, ComponentInstance self)
void InterfaceLib_CallComponentFunction(InterfaceLib::Globals* globals, MachineState* state);		// long CallComponentFunction(ComponentParameters * params, ComponentFunctionUPP func)
void InterfaceLib_CallComponentFunctionWithStorage(InterfaceLib::Globals* globals, MachineState* state);		// long CallComponentFunctionWithStorage(Handle storage, ComponentParameters * params, ComponentFunctionUPP func)
void InterfaceLib_CallComponentFunctionWithStorageProcInfo(InterfaceLib::Globals* globals, MachineState* state);		// long CallComponentFunctionWithStorageProcInfo(Handle storage, ComponentParameters * params, ProcPtr func, ProcInfoType funcProcInfo)
void InterfaceLib_CallComponentGetMPWorkFunction(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentGetMPWorkFunction(ComponentInstance ci, ComponentMPWorkFunctionUPP * workFunction, void ** refCon)
void InterfaceLib_CallComponentGetPublicResource(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentGetPublicResource(ComponentInstance ci, OSType resourceType, short resourceID, Handle * resource)
void InterfaceLib_CallComponentOpen(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentOpen(ComponentInstance ci, ComponentInstance self)
void InterfaceLib_CallComponentRegister(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentRegister(ComponentInstance ci)
void InterfaceLib_CallComponentTarget(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentTarget(ComponentInstance ci, ComponentInstance target)
void InterfaceLib_CallComponentUnregister(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentUnregister(ComponentInstance ci)
void InterfaceLib_CallComponentVersion(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult CallComponentVersion(ComponentInstance ci)
void InterfaceLib_CaptureComponent(InterfaceLib::Globals* globals, MachineState* state);		// Component CaptureComponent(Component capturedComponent, Component capturingComponent)
void InterfaceLib_CloseComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseComponent(ComponentInstance aComponentInstance)
void InterfaceLib_CloseComponentResFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseComponentResFile(short refnum)
void InterfaceLib_ComponentFunctionImplemented(InterfaceLib::Globals* globals, MachineState* state);		// long ComponentFunctionImplemented(ComponentInstance ci, short ftnNumber)
void InterfaceLib_ComponentSetTarget(InterfaceLib::Globals* globals, MachineState* state);		// long ComponentSetTarget(ComponentInstance ci, ComponentInstance target)
void InterfaceLib_CountComponentInstances(InterfaceLib::Globals* globals, MachineState* state);		// long CountComponentInstances(Component aComponent)
void InterfaceLib_CountComponents(InterfaceLib::Globals* globals, MachineState* state);		// long CountComponents(ComponentDescription * looking)
void InterfaceLib_DelegateComponentCall(InterfaceLib::Globals* globals, MachineState* state);		// long DelegateComponentCall(ComponentParameters * originalParams, ComponentInstance ci)
void InterfaceLib_FindNextComponent(InterfaceLib::Globals* globals, MachineState* state);		// Component FindNextComponent(Component aComponent, ComponentDescription * looking)
void InterfaceLib_GetComponentIconSuite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentIconSuite(Component aComponent, Handle * iconSuite)
void InterfaceLib_GetComponentIndString(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentIndString(Component aComponent, Str255 theString, short strListID, short index)
void InterfaceLib_GetComponentInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentInfo(Component aComponent, ComponentDescription * cd, Handle componentName, Handle componentInfo, Handle componentIcon)
void InterfaceLib_GetComponentInstanceA5(InterfaceLib::Globals* globals, MachineState* state);		// long GetComponentInstanceA5(ComponentInstance aComponentInstance)
void InterfaceLib_GetComponentInstanceError(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentInstanceError(ComponentInstance aComponentInstance)
void InterfaceLib_GetComponentInstanceStorage(InterfaceLib::Globals* globals, MachineState* state);		// Handle GetComponentInstanceStorage(ComponentInstance aComponentInstance)
void InterfaceLib_GetComponentListModSeed(InterfaceLib::Globals* globals, MachineState* state);		// long GetComponentListModSeed(void)
void InterfaceLib_GetComponentPublicIndString(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentPublicIndString(Component aComponent, Str255 theString, short strListID, short index)
void InterfaceLib_GetComponentPublicResource(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentPublicResource(Component aComponent, OSType resourceType, short resourceID, Handle * theResource)
void InterfaceLib_GetComponentPublicResourceList(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentPublicResourceList(OSType resourceType, short resourceID, long flags, ComponentDescription * cd, GetMissingComponentResourceUPP missingProc, void * refCon, void * atomContainerPtr)
void InterfaceLib_GetComponentRefcon(InterfaceLib::Globals* globals, MachineState* state);		// long GetComponentRefcon(Component aComponent)
void InterfaceLib_GetComponentResource(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetComponentResource(Component aComponent, OSType resType, short resID, Handle * theResource)
void InterfaceLib_GetComponentTypeModSeed(InterfaceLib::Globals* globals, MachineState* state);		// long GetComponentTypeModSeed(OSType componentType)
void InterfaceLib_GetComponentVersion(InterfaceLib::Globals* globals, MachineState* state);		// long GetComponentVersion(ComponentInstance ci)
void InterfaceLib_OpenAComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenAComponent(Component aComponent, ComponentInstance * ci)
void InterfaceLib_OpenAComponentResFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenAComponentResFile(Component aComponent, short * resRef)
void InterfaceLib_OpenADefaultComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenADefaultComponent(OSType componentType, OSType componentSubType, ComponentInstance * ci)
void InterfaceLib_OpenComponent(InterfaceLib::Globals* globals, MachineState* state);		// ComponentInstance OpenComponent(Component aComponent)
void InterfaceLib_OpenComponentResFile(InterfaceLib::Globals* globals, MachineState* state);		// short OpenComponentResFile(Component aComponent)
void InterfaceLib_OpenDefaultComponent(InterfaceLib::Globals* globals, MachineState* state);		// ComponentInstance OpenDefaultComponent(OSType componentType, OSType componentSubType)
void InterfaceLib_RegisterComponent(InterfaceLib::Globals* globals, MachineState* state);		// Component RegisterComponent(ComponentDescription * cd, ComponentRoutineUPP componentEntryPoint, short global, Handle componentName, Handle componentInfo, Handle componentIcon)
void InterfaceLib_RegisterComponentResource(InterfaceLib::Globals* globals, MachineState* state);		// Component RegisterComponentResource(ComponentResourceHandle cr, short global)
void InterfaceLib_RegisterComponentResourceFile(InterfaceLib::Globals* globals, MachineState* state);		// long RegisterComponentResourceFile(short resRefNum, short global)
void InterfaceLib_ResolveComponentAlias(InterfaceLib::Globals* globals, MachineState* state);		// Component ResolveComponentAlias(Component aComponent)
void InterfaceLib_SetComponentInstanceA5(InterfaceLib::Globals* globals, MachineState* state);		// void SetComponentInstanceA5(ComponentInstance aComponentInstance, long theA5)
void InterfaceLib_SetComponentInstanceError(InterfaceLib::Globals* globals, MachineState* state);		// void SetComponentInstanceError(ComponentInstance aComponentInstance, OSErr theError)
void InterfaceLib_SetComponentInstanceStorage(InterfaceLib::Globals* globals, MachineState* state);		// void SetComponentInstanceStorage(ComponentInstance aComponentInstance, Handle theStorage)
void InterfaceLib_SetComponentRefcon(InterfaceLib::Globals* globals, MachineState* state);		// void SetComponentRefcon(Component aComponent, long theRefcon)
void InterfaceLib_SetDefaultComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDefaultComponent(Component aComponent, short flags)
void InterfaceLib_UncaptureComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UncaptureComponent(Component aComponent)
void InterfaceLib_UnregisterComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UnregisterComponent(Component aComponent)

/* Connections */
void InterfaceLib_CMAbort(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMAbort(ConnHandle hConn)
void InterfaceLib_CMAccept(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMAccept(ConnHandle hConn, Boolean accept)
void InterfaceLib_CMActivate(InterfaceLib::Globals* globals, MachineState* state);		// void CMActivate(ConnHandle hConn, Boolean activate)
void InterfaceLib_CMAddSearch(InterfaceLib::Globals* globals, MachineState* state);		// long CMAddSearch(ConnHandle hConn, ConstStr255Param theString, CMSearchFlags flags, ConnectionSearchCallBackUPP callBack)
void InterfaceLib_CMBreak(InterfaceLib::Globals* globals, MachineState* state);		// void CMBreak(ConnHandle hConn, long duration, Boolean async, ConnectionCompletionUPP completor)
void InterfaceLib_CMChoose(InterfaceLib::Globals* globals, MachineState* state);		// short CMChoose(ConnHandle * hConn, Point where, ConnectionChooseIdleUPP idle)
void InterfaceLib_CMClearSearch(InterfaceLib::Globals* globals, MachineState* state);		// void CMClearSearch(ConnHandle hConn)
void InterfaceLib_CMClose(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMClose(ConnHandle hConn, Boolean async, ConnectionCompletionUPP completor, long timeout, Boolean now)
void InterfaceLib_CMDefault(InterfaceLib::Globals* globals, MachineState* state);		// void CMDefault(Ptr * theConfig, short procID, Boolean allocate)
void InterfaceLib_CMDispose(InterfaceLib::Globals* globals, MachineState* state);		// void CMDispose(ConnHandle hConn)
void InterfaceLib_CMDisposeIOPB(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMDisposeIOPB(ConnHandle hConn, CMIOPBPtr theIOPB)
void InterfaceLib_CMEnglishToIntl(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CMEnglishToIntl(ConnHandle hConn, const void * inputPtr, Ptr * outputPtr, short language)
void InterfaceLib_CMEvent(InterfaceLib::Globals* globals, MachineState* state);		// void CMEvent(ConnHandle hConn, const EventRecord * theEvent)
void InterfaceLib_CMGetCMVersion(InterfaceLib::Globals* globals, MachineState* state);		// short CMGetCMVersion(void)
void InterfaceLib_CMGetConfig(InterfaceLib::Globals* globals, MachineState* state);		// Ptr CMGetConfig(ConnHandle hConn)
void InterfaceLib_CMGetConnEnvirons(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMGetConnEnvirons(ConnHandle hConn, ConnEnvironRec * theEnvirons)
void InterfaceLib_CMGetErrorString(InterfaceLib::Globals* globals, MachineState* state);		// void CMGetErrorString(ConnHandle hConn, short id, Str255 errMsg)
void InterfaceLib_CMGetProcID(InterfaceLib::Globals* globals, MachineState* state);		// short CMGetProcID(ConstStr255Param name)
void InterfaceLib_CMGetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// long CMGetRefCon(ConnHandle hConn)
void InterfaceLib_CMGetToolName(InterfaceLib::Globals* globals, MachineState* state);		// void CMGetToolName(short procID, Str255 name)
void InterfaceLib_CMGetUserData(InterfaceLib::Globals* globals, MachineState* state);		// long CMGetUserData(ConnHandle hConn)
void InterfaceLib_CMGetVersion(InterfaceLib::Globals* globals, MachineState* state);		// Handle CMGetVersion(ConnHandle hConn)
void InterfaceLib_CMIdle(InterfaceLib::Globals* globals, MachineState* state);		// void CMIdle(ConnHandle hConn)
void InterfaceLib_CMIntlToEnglish(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CMIntlToEnglish(ConnHandle hConn, const void * inputPtr, Ptr * outputPtr, short language)
void InterfaceLib_CMIOKill(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMIOKill(ConnHandle hConn, short which)
void InterfaceLib_CMListen(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMListen(ConnHandle hConn, Boolean async, ConnectionCompletionUPP completor, long timeout)
void InterfaceLib_CMMenu(InterfaceLib::Globals* globals, MachineState* state);		// Boolean CMMenu(ConnHandle hConn, short menuID, short item)
void InterfaceLib_CMNew(InterfaceLib::Globals* globals, MachineState* state);		// ConnHandle CMNew(short procID, CMRecFlags flags, ConstCMBufferSizesParam desiredSizes, long refCon, long userData)
void InterfaceLib_CMNewIOPB(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMNewIOPB(ConnHandle hConn, CMIOPBPtr * theIOPB)
void InterfaceLib_CMOpen(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMOpen(ConnHandle hConn, Boolean async, ConnectionCompletionUPP completor, long timeout)
void InterfaceLib_CMPBIOKill(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMPBIOKill(ConnHandle hConn, CMIOPBPtr theIOPB)
void InterfaceLib_CMPBRead(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMPBRead(ConnHandle hConn, CMIOPBPtr theIOPB, Boolean async)
void InterfaceLib_CMPBWrite(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMPBWrite(ConnHandle hConn, CMIOPBPtr theIOPB, Boolean async)
void InterfaceLib_CMRead(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMRead(ConnHandle hConn, void * theBuffer, long * toRead, CMChannel theChannel, Boolean async, ConnectionCompletionUPP completor, long timeout, CMFlags * flags)
void InterfaceLib_CMRemoveSearch(InterfaceLib::Globals* globals, MachineState* state);		// void CMRemoveSearch(ConnHandle hConn, long refnum)
void InterfaceLib_CMReset(InterfaceLib::Globals* globals, MachineState* state);		// void CMReset(ConnHandle hConn)
void InterfaceLib_CMResume(InterfaceLib::Globals* globals, MachineState* state);		// void CMResume(ConnHandle hConn, Boolean resume)
void InterfaceLib_CMSetConfig(InterfaceLib::Globals* globals, MachineState* state);		// short CMSetConfig(ConnHandle hConn, const void * thePtr)
void InterfaceLib_CMSetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// void CMSetRefCon(ConnHandle hConn, long refCon)
void InterfaceLib_CMSetupFilter(InterfaceLib::Globals* globals, MachineState* state);		// Boolean CMSetupFilter(short procID, const void * theConfig, short count, DialogRef theDialog, EventRecord * theEvent, short * theItem, long * magicCookie)
void InterfaceLib_CMSetupItem(InterfaceLib::Globals* globals, MachineState* state);		// void CMSetupItem(short procID, const void * theConfig, short count, DialogRef theDialog, short * theItem, long * magicCookie)
void InterfaceLib_CMSetupPostflight(InterfaceLib::Globals* globals, MachineState* state);		// void CMSetupPostflight(short procID)
void InterfaceLib_CMSetupPreflight(InterfaceLib::Globals* globals, MachineState* state);		// Handle CMSetupPreflight(short procID, long * magicCookie)
void InterfaceLib_CMSetupSetup(InterfaceLib::Globals* globals, MachineState* state);		// void CMSetupSetup(short procID, const void * theConfig, short count, DialogRef theDialog, long * magicCookie)
void InterfaceLib_CMSetupXCleanup(InterfaceLib::Globals* globals, MachineState* state);		// void CMSetupXCleanup(short procID, const void * theConfig, short count, DialogRef theDialog, Boolean OKed, long * magicCookie)
void InterfaceLib_CMSetUserData(InterfaceLib::Globals* globals, MachineState* state);		// void CMSetUserData(ConnHandle hConn, long userData)
void InterfaceLib_CMStatus(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMStatus(ConnHandle hConn, CMBufferSizes sizes, CMStatFlags * flags)
void InterfaceLib_CMValidate(InterfaceLib::Globals* globals, MachineState* state);		// Boolean CMValidate(ConnHandle hConn)
void InterfaceLib_CMWrite(InterfaceLib::Globals* globals, MachineState* state);		// CMErr CMWrite(ConnHandle hConn, const void * theBuffer, long * toWrite, CMChannel theChannel, Boolean async, ConnectionCompletionUPP completor, long timeout, CMFlags flags)
void InterfaceLib_InitCM(InterfaceLib::Globals* globals, MachineState* state);		// CMErr InitCM(void)

/* Controls */
void InterfaceLib_DisposeControl(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeControl(ControlRef theControl)
void InterfaceLib_DragControl(InterfaceLib::Globals* globals, MachineState* state);		// void DragControl(ControlRef theControl, Point startPoint, const Rect * limitRect, const Rect * slopRect, DragConstraint axis)
void InterfaceLib_Draw1Control(InterfaceLib::Globals* globals, MachineState* state);		// void Draw1Control(ControlRef theControl)
void InterfaceLib_DrawControls(InterfaceLib::Globals* globals, MachineState* state);		// void DrawControls(WindowRef theWindow)
void InterfaceLib_FindControl(InterfaceLib::Globals* globals, MachineState* state);		// ControlPartCode FindControl(Point testPoint, WindowRef theWindow, ControlRef * theControl)
void InterfaceLib_GetAuxiliaryControlRecord(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetAuxiliaryControlRecord(ControlRef theControl, AuxCtlHandle * acHndl)
void InterfaceLib_GetControlAction(InterfaceLib::Globals* globals, MachineState* state);		// ControlActionUPP GetControlAction(ControlRef theControl)
void InterfaceLib_GetControlMaximum(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 GetControlMaximum(ControlRef theControl)
void InterfaceLib_GetControlMinimum(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 GetControlMinimum(ControlRef theControl)
void InterfaceLib_GetControlReference(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 GetControlReference(ControlRef theControl)
void InterfaceLib_GetControlTitle(InterfaceLib::Globals* globals, MachineState* state);		// void GetControlTitle(ControlRef theControl, Str255 title)
void InterfaceLib_GetControlValue(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 GetControlValue(ControlRef theControl)
void InterfaceLib_GetControlVariant(InterfaceLib::Globals* globals, MachineState* state);		// ControlVariant GetControlVariant(ControlRef theControl)
void InterfaceLib_GetNewControl(InterfaceLib::Globals* globals, MachineState* state);		// ControlRef GetNewControl(SInt16 resourceID, WindowRef owningWindow)
void InterfaceLib_HideControl(InterfaceLib::Globals* globals, MachineState* state);		// void HideControl(ControlRef theControl)
void InterfaceLib_HiliteControl(InterfaceLib::Globals* globals, MachineState* state);		// void HiliteControl(ControlRef theControl, ControlPartCode hiliteState)
void InterfaceLib_KillControls(InterfaceLib::Globals* globals, MachineState* state);		// void KillControls(WindowRef theWindow)
void InterfaceLib_MoveControl(InterfaceLib::Globals* globals, MachineState* state);		// void MoveControl(ControlRef theControl, SInt16 h, SInt16 v)
void InterfaceLib_NewControl(InterfaceLib::Globals* globals, MachineState* state);		// ControlRef NewControl(WindowRef owningWindow, const Rect * boundsRect, ConstStr255Param controlTitle, Boolean initiallyVisible, SInt16 initialValue, SInt16 minimumValue, SInt16 maximumValue, SInt16 procID, SInt32 controlReference)
void InterfaceLib_SetControlAction(InterfaceLib::Globals* globals, MachineState* state);		// void SetControlAction(ControlRef theControl, ControlActionUPP actionProc)
void InterfaceLib_SetControlColor(InterfaceLib::Globals* globals, MachineState* state);		// void SetControlColor(ControlRef theControl, CCTabHandle newColorTable)
void InterfaceLib_SetControlMaximum(InterfaceLib::Globals* globals, MachineState* state);		// void SetControlMaximum(ControlRef theControl, SInt16 newMaximum)
void InterfaceLib_SetControlMinimum(InterfaceLib::Globals* globals, MachineState* state);		// void SetControlMinimum(ControlRef theControl, SInt16 newMinimum)
void InterfaceLib_SetControlReference(InterfaceLib::Globals* globals, MachineState* state);		// void SetControlReference(ControlRef theControl, SInt32 data)
void InterfaceLib_SetControlTitle(InterfaceLib::Globals* globals, MachineState* state);		// void SetControlTitle(ControlRef theControl, ConstStr255Param title)
void InterfaceLib_SetControlValue(InterfaceLib::Globals* globals, MachineState* state);		// void SetControlValue(ControlRef theControl, SInt16 newValue)
void InterfaceLib_ShowControl(InterfaceLib::Globals* globals, MachineState* state);		// void ShowControl(ControlRef theControl)
void InterfaceLib_SizeControl(InterfaceLib::Globals* globals, MachineState* state);		// void SizeControl(ControlRef theControl, SInt16 w, SInt16 h)
void InterfaceLib_TestControl(InterfaceLib::Globals* globals, MachineState* state);		// ControlPartCode TestControl(ControlRef theControl, Point testPoint)
void InterfaceLib_TrackControl(InterfaceLib::Globals* globals, MachineState* state);		// ControlPartCode TrackControl(ControlRef theControl, Point startPoint, ControlActionUPP actionProc)
void InterfaceLib_UpdateControls(InterfaceLib::Globals* globals, MachineState* state);		// void UpdateControls(WindowRef theWindow, RgnHandle updateRegion)

/* CursorDevices */
void InterfaceLib_CrsrDevMoveTo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CrsrDevMoveTo(CursorDevicePtr ourDevice, long absX, long absY)
void InterfaceLib_CrsrDevNextDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CrsrDevNextDevice(CursorDevicePtr * ourDevice)

/* DatabaseAccess */
void InterfaceLib_DBBreak(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBBreak(long sessID, Boolean abort, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBDisposeQuery(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBDisposeQuery(QueryHandle query)
void InterfaceLib_DBEnd(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBEnd(long sessID, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBExec(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBExec(long sessID, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBGetConnInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBGetConnInfo(long sessID, short sessNum, long * returnedID, long * version, Str63 ddevName, Str255 host, Str255 user, Str255 network, Str255 connStr, long * start, OSErr * state, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBGetErr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBGetErr(long sessID, long * err1, long * err2, Str255 item1, Str255 item2, Str255 errorMsg, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBGetItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBGetItem(long sessID, long timeout, DBType * dataType, short * len, short * places, short * flags, void * buffer, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBGetNewQuery(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBGetNewQuery(short queryID, QueryHandle * query)
void InterfaceLib_DBGetQueryResults(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBGetQueryResults(long sessID, ResultsRecord * results, long timeout, DBStatusUPP statusProc, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBGetResultHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBGetResultHandler(DBType dataType, DBResultHandlerUPP * theHandler, Boolean getSysHandler)
void InterfaceLib_DBGetSessionNum(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBGetSessionNum(long sessID, short * sessNum, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBInit(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBInit(long * sessID, ConstStr63Param ddevName, ConstStr255Param host, ConstStr255Param user, ConstStr255Param passwd, ConstStr255Param connStr, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBInstallResultHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBInstallResultHandler(DBType dataType, DBResultHandlerUPP theHandler, Boolean isSysHandler)
void InterfaceLib_DBKill(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBKill(DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBRemoveResultHandler(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBRemoveResultHandler(DBType dataType)
void InterfaceLib_DBResultsToText(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBResultsToText(ResultsRecord * results, Handle * theText)
void InterfaceLib_DBSend(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBSend(long sessID, Ptr text, short len, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBSendItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBSendItem(long sessID, DBType dataType, short len, short places, short flags, void * buffer, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBStartQuery(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBStartQuery(long * sessID, QueryHandle query, DBStatusUPP statusProc, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBState(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBState(long sessID, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_DBUnGetItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DBUnGetItem(long sessID, DBAsyncParmBlkPtr asyncPB)
void InterfaceLib_InitDBPack(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InitDBPack(void)

/* DateTimeUtils */
void InterfaceLib_DateToSeconds(InterfaceLib::Globals* globals, MachineState* state);		// void DateToSeconds(const DateTimeRec * d, unsigned long * secs)
void InterfaceLib_GetDateTime(InterfaceLib::Globals* globals, MachineState* state);		// void GetDateTime(unsigned long * secs)
void InterfaceLib_GetTime(InterfaceLib::Globals* globals, MachineState* state);		// void GetTime(DateTimeRec * d)
void InterfaceLib_InitDateCache(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InitDateCache(DateCachePtr theCache)
void InterfaceLib_IUDatePString(InterfaceLib::Globals* globals, MachineState* state);		// void IUDatePString(long dateTime, DateForm longFlag, Str255 result, Handle intlHandle)
void InterfaceLib_IUDateString(InterfaceLib::Globals* globals, MachineState* state);		// void IUDateString(long dateTime, DateForm longFlag, Str255 result)
void InterfaceLib_IULDateString(InterfaceLib::Globals* globals, MachineState* state);		// void IULDateString(LongDateTime * dateTime, DateForm longFlag, Str255 result, Handle intlHandle)
void InterfaceLib_IULTimeString(InterfaceLib::Globals* globals, MachineState* state);		// void IULTimeString(LongDateTime * dateTime, Boolean wantSeconds, Str255 result, Handle intlHandle)
void InterfaceLib_IUTimePString(InterfaceLib::Globals* globals, MachineState* state);		// void IUTimePString(long dateTime, Boolean wantSeconds, Str255 result, Handle intlHandle)
void InterfaceLib_IUTimeString(InterfaceLib::Globals* globals, MachineState* state);		// void IUTimeString(long dateTime, Boolean wantSeconds, Str255 result)
void InterfaceLib_LongDateToSeconds(InterfaceLib::Globals* globals, MachineState* state);		// void LongDateToSeconds(const LongDateRec * lDate, LongDateTime * lSecs)
void InterfaceLib_LongSecondsToDate(InterfaceLib::Globals* globals, MachineState* state);		// void LongSecondsToDate(const LongDateTime * lSecs, LongDateRec * lDate)
void InterfaceLib_ReadDateTime(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ReadDateTime(unsigned long * time)
void InterfaceLib_SecondsToDate(InterfaceLib::Globals* globals, MachineState* state);		// void SecondsToDate(unsigned long secs, DateTimeRec * d)
void InterfaceLib_SetDateTime(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDateTime(unsigned long time)
void InterfaceLib_SetTime(InterfaceLib::Globals* globals, MachineState* state);		// void SetTime(const DateTimeRec * d)
void InterfaceLib_StringToDate(InterfaceLib::Globals* globals, MachineState* state);		// StringToDateStatus StringToDate(Ptr textPtr, long textLen, DateCachePtr theCache, long * lengthUsed, LongDateRec * dateTime)
void InterfaceLib_StringToTime(InterfaceLib::Globals* globals, MachineState* state);		// StringToDateStatus StringToTime(Ptr textPtr, long textLen, DateCachePtr theCache, long * lengthUsed, LongDateRec * dateTime)
void InterfaceLib_ToggleDate(InterfaceLib::Globals* globals, MachineState* state);		// ToggleResults ToggleDate(LongDateTime * lSecs, LongDateField field, DateDelta delta, short ch, const TogglePB * params)
void InterfaceLib_ValidDate(InterfaceLib::Globals* globals, MachineState* state);		// short ValidDate(const LongDateRec * vDate, long flags, LongDateTime * newSecs)

/* DeskBus */
void InterfaceLib_ADBOp(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ADBOp(Ptr refCon, ADBCompletionUPP compRout, Ptr buffer, short commandNum)
void InterfaceLib_ADBReInit(InterfaceLib::Globals* globals, MachineState* state);		// void ADBReInit(void)
void InterfaceLib_CountADBs(InterfaceLib::Globals* globals, MachineState* state);		// short CountADBs(void)
void InterfaceLib_GetADBInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetADBInfo(ADBDataBlock * info, ADBAddress adbAddr)
void InterfaceLib_GetIndADB(InterfaceLib::Globals* globals, MachineState* state);		// ADBAddress GetIndADB(ADBDataBlock * info, short devTableIndex)
void InterfaceLib_SetADBInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetADBInfo(const ADBSetInfoBlock * info, ADBAddress adbAddr)

/* Devices */
void InterfaceLib_CloseDeskAcc(InterfaceLib::Globals* globals, MachineState* state);		// void CloseDeskAcc(short refNum)
void InterfaceLib_Control(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Control(short refNum, short csCode, const void * csParamPtr)
void InterfaceLib_DriverInstall(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DriverInstall(DRVRHeaderPtr drvrPtr, short refNum)
void InterfaceLib_DriverInstallReserveMem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DriverInstallReserveMem(DRVRHeaderPtr drvrPtr, short refNum)
void InterfaceLib_DrvrRemove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DrvrRemove(short refNum)
void InterfaceLib_GetDCtlEntry(InterfaceLib::Globals* globals, MachineState* state);		// DCtlHandle GetDCtlEntry(short refNum)
void InterfaceLib_KillIO(InterfaceLib::Globals* globals, MachineState* state);		// OSErr KillIO(short refNum)
void InterfaceLib_OpenDeskAcc(InterfaceLib::Globals* globals, MachineState* state);		// short OpenDeskAcc(ConstStr255Param deskAccName)
void InterfaceLib_PBCloseAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCloseAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBCloseImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCloseImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBCloseSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCloseSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBControlAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBControlAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBControlImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBControlImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBControlSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBControlSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBKillIOAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBKillIOAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBKillIOImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBKillIOImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBKillIOSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBKillIOSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBReadAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBReadAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBReadImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBReadImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBReadSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBReadSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBStatusAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBStatusAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBStatusImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBStatusImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBStatusSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBStatusSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBWaitIOComplete(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBWaitIOComplete(ParmBlkPtr paramBlock, Duration timeout)
void InterfaceLib_PBWriteAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBWriteAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBWriteImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBWriteImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBWriteSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBWriteSync(ParmBlkPtr paramBlock)
void InterfaceLib_Status(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Status(short refNum, short csCode, void * csParamPtr)

/* Dialogs */
void InterfaceLib_Alert(InterfaceLib::Globals* globals, MachineState* state);		// DialogItemIndex Alert(SInt16 alertID, ModalFilterUPP modalFilter)
void InterfaceLib_AppendDITL(InterfaceLib::Globals* globals, MachineState* state);		// void AppendDITL(DialogRef theDialog, Handle theHandle, DITLMethod method)
void InterfaceLib_CautionAlert(InterfaceLib::Globals* globals, MachineState* state);		// DialogItemIndex CautionAlert(SInt16 alertID, ModalFilterUPP modalFilter)
void InterfaceLib_CloseDialog(InterfaceLib::Globals* globals, MachineState* state);		// void CloseDialog(DialogRef theDialog)
void InterfaceLib_CountDITL(InterfaceLib::Globals* globals, MachineState* state);		// DialogItemIndex CountDITL(DialogRef theDialog)
void InterfaceLib_DialogCopy(InterfaceLib::Globals* globals, MachineState* state);		// void DialogCopy(DialogRef theDialog)
void InterfaceLib_DialogCut(InterfaceLib::Globals* globals, MachineState* state);		// void DialogCut(DialogRef theDialog)
void InterfaceLib_DialogDelete(InterfaceLib::Globals* globals, MachineState* state);		// void DialogDelete(DialogRef theDialog)
void InterfaceLib_DialogPaste(InterfaceLib::Globals* globals, MachineState* state);		// void DialogPaste(DialogRef theDialog)
void InterfaceLib_DialogSelect(InterfaceLib::Globals* globals, MachineState* state);		// Boolean DialogSelect(const EventRecord * theEvent, DialogRef * theDialog, DialogItemIndex * itemHit)
void InterfaceLib_DisposeDialog(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeDialog(DialogRef theDialog)
void InterfaceLib_DrawDialog(InterfaceLib::Globals* globals, MachineState* state);		// void DrawDialog(DialogRef theDialog)
void InterfaceLib_ErrorSound(InterfaceLib::Globals* globals, MachineState* state);		// void ErrorSound(SoundUPP soundProc)
void InterfaceLib_FindDialogItem(InterfaceLib::Globals* globals, MachineState* state);		// DialogItemIndexZeroBased FindDialogItem(DialogRef theDialog, Point thePt)
void InterfaceLib_GetAlertStage(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 GetAlertStage(void)
void InterfaceLib_GetDialogItem(InterfaceLib::Globals* globals, MachineState* state);		// void GetDialogItem(DialogRef theDialog, DialogItemIndex itemNo, DialogItemType * itemType, Handle * item, Rect * box)
void InterfaceLib_GetDialogItemText(InterfaceLib::Globals* globals, MachineState* state);		// void GetDialogItemText(Handle item, Str255 text)
void InterfaceLib_GetNewDialog(InterfaceLib::Globals* globals, MachineState* state);		// DialogRef GetNewDialog(SInt16 dialogID, void * dStorage, WindowRef behind)
void InterfaceLib_GetStdFilterProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetStdFilterProc(ModalFilterUPP * theProc)
void InterfaceLib_HideDialogItem(InterfaceLib::Globals* globals, MachineState* state);		// void HideDialogItem(DialogRef theDialog, DialogItemIndex itemNo)
void InterfaceLib_InitDialogs(InterfaceLib::Globals* globals, MachineState* state);		// void InitDialogs(void * ignored)
void InterfaceLib_IsDialogEvent(InterfaceLib::Globals* globals, MachineState* state);		// Boolean IsDialogEvent(const EventRecord * theEvent)
void InterfaceLib_ModalDialog(InterfaceLib::Globals* globals, MachineState* state);		// void ModalDialog(ModalFilterUPP modalFilter, DialogItemIndex * itemHit)
void InterfaceLib_NewColorDialog(InterfaceLib::Globals* globals, MachineState* state);		// DialogRef NewColorDialog(void * dStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowRef behind, Boolean goAwayFlag, SInt32 refCon, Handle items)
void InterfaceLib_NewDialog(InterfaceLib::Globals* globals, MachineState* state);		// DialogRef NewDialog(void * dStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, SInt16 procID, WindowRef behind, Boolean goAwayFlag, SInt32 refCon, Handle items)
void InterfaceLib_NoteAlert(InterfaceLib::Globals* globals, MachineState* state);		// DialogItemIndex NoteAlert(SInt16 alertID, ModalFilterUPP modalFilter)
void InterfaceLib_ParamText(InterfaceLib::Globals* globals, MachineState* state);		// void ParamText(ConstStr255Param param0, ConstStr255Param param1, ConstStr255Param param2, ConstStr255Param param3)
void InterfaceLib_ResetAlertStage(InterfaceLib::Globals* globals, MachineState* state);		// void ResetAlertStage(void)
void InterfaceLib_SelectDialogItemText(InterfaceLib::Globals* globals, MachineState* state);		// void SelectDialogItemText(DialogRef theDialog, DialogItemIndex itemNo, SInt16 strtSel, SInt16 endSel)
void InterfaceLib_SetDialogCancelItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDialogCancelItem(DialogRef theDialog, DialogItemIndex newItem)
void InterfaceLib_SetDialogDefaultItem(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDialogDefaultItem(DialogRef theDialog, DialogItemIndex newItem)
void InterfaceLib_SetDialogFont(InterfaceLib::Globals* globals, MachineState* state);		// void SetDialogFont(SInt16 fontNum)
void InterfaceLib_SetDialogItem(InterfaceLib::Globals* globals, MachineState* state);		// void SetDialogItem(DialogRef theDialog, DialogItemIndex itemNo, DialogItemType itemType, Handle item, const Rect * box)
void InterfaceLib_SetDialogItemText(InterfaceLib::Globals* globals, MachineState* state);		// void SetDialogItemText(Handle item, ConstStr255Param text)
void InterfaceLib_SetDialogTracksCursor(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDialogTracksCursor(DialogRef theDialog, Boolean tracks)
void InterfaceLib_ShortenDITL(InterfaceLib::Globals* globals, MachineState* state);		// void ShortenDITL(DialogRef theDialog, DialogItemIndex numberItems)
void InterfaceLib_ShowDialogItem(InterfaceLib::Globals* globals, MachineState* state);		// void ShowDialogItem(DialogRef theDialog, DialogItemIndex itemNo)
void InterfaceLib_StdFilterProc(InterfaceLib::Globals* globals, MachineState* state);		// Boolean StdFilterProc(DialogRef theDialog, EventRecord * event, DialogItemIndex * itemHit)
void InterfaceLib_StopAlert(InterfaceLib::Globals* globals, MachineState* state);		// DialogItemIndex StopAlert(SInt16 alertID, ModalFilterUPP modalFilter)
void InterfaceLib_UpdateDialog(InterfaceLib::Globals* globals, MachineState* state);		// void UpdateDialog(DialogRef theDialog, RgnHandle updateRgn)

/* Dictionary */
void InterfaceLib_CloseDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseDictionary(SInt32 dictionaryReference)
void InterfaceLib_CompactDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CompactDictionary(SInt32 dictionaryReference)
void InterfaceLib_DeleteRecordFromDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DeleteRecordFromDictionary(SInt32 dictionaryReference, ConstStr255Param key)
void InterfaceLib_FindRecordByIndexInDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FindRecordByIndexInDictionary(SInt32 dictionaryReference, SInt32 recordIndex, DictionaryAttributeTablePtr requestedAttributeTablePointer, Str255 recordKey, Handle recordDataHandle)
void InterfaceLib_FindRecordInDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FindRecordInDictionary(SInt32 dictionaryReference, ConstStr255Param key, DictionaryAttributeTablePtr requestedAttributeTablePointer, Handle recordDataHandle)
void InterfaceLib_GetDictionaryInformation(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetDictionaryInformation(SInt32 dictionaryReference, DictionaryInformation * theDictionaryInformation)
void InterfaceLib_InitializeDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InitializeDictionary(const FSSpec * theFsspecPtr, SInt16 maximumKeyLength, SInt8 keyAttributes, ScriptCode script)
void InterfaceLib_InsertRecordToDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InsertRecordToDictionary(SInt32 dictionaryReference, ConstStr255Param key, Handle recordDataHandle, DictionaryDataInsertMode whichMode)
void InterfaceLib_OpenDictionary(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenDictionary(const FSSpec * theFsspecPtr, SInt8 accessPermission, SInt32 * dictionaryReference)

/* DiskInit */
void InterfaceLib_DIBadMount(InterfaceLib::Globals* globals, MachineState* state);		// short DIBadMount(Point where, UInt32 evtMessage)
void InterfaceLib_DIFormat(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DIFormat(short drvNum)
void InterfaceLib_DILoad(InterfaceLib::Globals* globals, MachineState* state);		// void DILoad(void)
void InterfaceLib_DIReformat(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DIReformat(short drvNum, short fsid, ConstStr255Param volName, ConstStr255Param msgText)
void InterfaceLib_DIUnload(InterfaceLib::Globals* globals, MachineState* state);		// void DIUnload(void)
void InterfaceLib_DIVerify(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DIVerify(short drvNum)
void InterfaceLib_DIXFormat(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DIXFormat(short drvNum, Boolean fmtFlag, unsigned long fmtArg, unsigned long * actSize)
void InterfaceLib_DIXZero(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DIXZero(short drvNum, ConstStr255Param volName, short fsid, short mediaStatus, short volTypeSelector, unsigned long volSize, void * extendedInfoPtr)
void InterfaceLib_DIZero(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DIZero(short drvNum, ConstStr255Param volName)

/* Disks */
void InterfaceLib_AddDrive(InterfaceLib::Globals* globals, MachineState* state);		// void AddDrive(short drvrRefNum, short drvNum, DrvQElPtr qEl)
void InterfaceLib_DiskEject(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DiskEject(short drvNum)
void InterfaceLib_DriveStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DriveStatus(short drvNum, DrvSts * status)
void InterfaceLib_GetDrvQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr GetDrvQHdr(void)
void InterfaceLib_SetTagBuffer(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetTagBuffer(void * buffPtr)

/* Displays */
void InterfaceLib_DMAddDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMAddDisplay(GDHandle newDevice, short driver, unsigned long mode, unsigned long reserved, unsigned long displayID, Component displayComponent, Handle displayState)
void InterfaceLib_DMBeginConfigureDisplays(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMBeginConfigureDisplays(Handle * displayState)
void InterfaceLib_DMBlockMirroring(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMBlockMirroring(void)
void InterfaceLib_DMCanMirrorNow(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMCanMirrorNow(Boolean * canMirrorNow)
void InterfaceLib_DMCheckDisplayMode(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMCheckDisplayMode(GDHandle theDevice, unsigned long mode, unsigned long depthMode, unsigned long * switchFlags, unsigned long reserved, Boolean * modeOk)
void InterfaceLib_DMDisableDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMDisableDisplay(GDHandle disableDevice, Handle displayState)
void InterfaceLib_DMDisposeDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMDisposeDisplay(GDHandle disposeDevice, Handle displayState)
void InterfaceLib_DMDrawDesktopRect(InterfaceLib::Globals* globals, MachineState* state);		// void DMDrawDesktopRect(Rect * globalRect)
void InterfaceLib_DMDrawDesktopRegion(InterfaceLib::Globals* globals, MachineState* state);		// void DMDrawDesktopRegion(RgnHandle globalRgn)
void InterfaceLib_DMEnableDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMEnableDisplay(GDHandle enableDevice, Handle displayState)
void InterfaceLib_DMEndConfigureDisplays(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMEndConfigureDisplays(Handle displayState)
void InterfaceLib_DMGetDeskRegion(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMGetDeskRegion(RgnHandle * desktopRegion)
void InterfaceLib_DMGetDisplayComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMGetDisplayComponent(GDHandle theDevice, Component * displayComponent)
void InterfaceLib_DMGetDisplayIDByGDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMGetDisplayIDByGDevice(GDHandle displayDevice, DisplayIDType * displayID, Boolean failToMain)
void InterfaceLib_DMGetDisplayMgrA5World(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMGetDisplayMgrA5World(Ptr * dmA5)
void InterfaceLib_DMGetFirstScreenDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle DMGetFirstScreenDevice(Boolean activeOnly)
void InterfaceLib_DMGetGDeviceByDisplayID(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMGetGDeviceByDisplayID(DisplayIDType displayID, GDHandle * displayDevice, Boolean failToMain)
void InterfaceLib_DMGetNextMirroredDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMGetNextMirroredDevice(GDHandle gDevice, GDHandle * mirroredDevice)
void InterfaceLib_DMGetNextScreenDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle DMGetNextScreenDevice(GDHandle theDevice, Boolean activeOnly)
void InterfaceLib_DMIsMirroringOn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMIsMirroringOn(Boolean * isMirroringOn)
void InterfaceLib_DMMirrorDevices(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMMirrorDevices(GDHandle gD1, GDHandle gD2, Handle displayState)
void InterfaceLib_DMMoveDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMMoveDisplay(GDHandle moveDevice, short x, short y, Handle displayState)
void InterfaceLib_DMNewDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMNewDisplay(GDHandle * newDevice, short driverRefNum, unsigned long mode, unsigned long reserved, DisplayIDType displayID, Component displayComponent, Handle displayState)
void InterfaceLib_DMQDIsMirroringCapable(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMQDIsMirroringCapable(Boolean * qdIsMirroringCapable)
void InterfaceLib_DMRegisterNotifyProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMRegisterNotifyProc(DMNotificationUPP notificationProc, DMProcessInfoPtr whichPSN)
void InterfaceLib_DMRemoveDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMRemoveDisplay(GDHandle removeDevice, Handle displayState)
void InterfaceLib_DMRemoveNotifyProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMRemoveNotifyProc(DMNotificationUPP notificationProc, DMProcessInfoPtr whichPSN)
void InterfaceLib_DMResolveDisplayComponents(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMResolveDisplayComponents(void)
void InterfaceLib_DMSetDisplayComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMSetDisplayComponent(GDHandle theDevice, Component displayComponent)
void InterfaceLib_DMSetDisplayMode(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMSetDisplayMode(GDHandle theDevice, unsigned long mode, unsigned long * depthMode, unsigned long reserved, Handle displayState)
void InterfaceLib_DMSetMainDisplay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMSetMainDisplay(GDHandle newMainDevice, Handle displayState)
void InterfaceLib_DMUnblockMirroring(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMUnblockMirroring(void)
void InterfaceLib_DMUnmirrorDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DMUnmirrorDevice(GDHandle gDevice, Handle displayState)

/* ENET */
void InterfaceLib_EAddMulti(InterfaceLib::Globals* globals, MachineState* state);		// OSErr EAddMulti(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_EAttachPH(InterfaceLib::Globals* globals, MachineState* state);		// OSErr EAttachPH(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_EDelMulti(InterfaceLib::Globals* globals, MachineState* state);		// OSErr EDelMulti(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_EDetachPH(InterfaceLib::Globals* globals, MachineState* state);		// OSErr EDetachPH(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_EGetInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr EGetInfo(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_ERdCancel(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ERdCancel(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_ERead(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ERead(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_ESetGeneral(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ESetGeneral(EParamBlkPtr thePBptr, Boolean async)
void InterfaceLib_EWrite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr EWrite(EParamBlkPtr thePBptr, Boolean async)

/* EPPC */
void InterfaceLib_AcceptHighLevelEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AcceptHighLevelEvent(TargetID * sender, unsigned long * msgRefcon, void * msgBuff, unsigned long * msgLen)
void InterfaceLib_GetPortNameFromProcessSerialNumber(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetPortNameFromProcessSerialNumber(PPCPortRec * portName, const ProcessSerialNumber * pPSN)
void InterfaceLib_GetProcessSerialNumberFromPortName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetProcessSerialNumberFromPortName(const PPCPortRec * portName, ProcessSerialNumber * pPSN)
void InterfaceLib_GetSpecificHighLevelEvent(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetSpecificHighLevelEvent(GetSpecificFilterUPP aFilter, void * contextPtr, OSErr * err)
void InterfaceLib_PostHighLevelEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PostHighLevelEvent(const EventRecord * theEvent, void * receiverID, unsigned long msgRefcon, void * msgBuff, unsigned long msgLen, unsigned long postingOptions)

/* Editions */
void InterfaceLib_AssociateSection(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AssociateSection(SectionHandle sectionH, const FSSpec * newSectionDocument)
void InterfaceLib_CallEditionOpenerProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CallEditionOpenerProc(EditionOpenerVerb selector, EditionOpenerParamBlock * PB, EditionOpenerUPP routine)
void InterfaceLib_CallFormatIOProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CallFormatIOProc(FormatIOVerb selector, FormatIOParamBlock * PB, FormatIOUPP routine)
void InterfaceLib_CloseEdition(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseEdition(EditionRefNum whichEdition, Boolean successful)
void InterfaceLib_CreateEditionContainerFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CreateEditionContainerFile(const FSSpec * editionFile, OSType fdCreator, ScriptCode editionFileNameScript)
void InterfaceLib_DeleteEditionContainerFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DeleteEditionContainerFile(const FSSpec * editionFile)
void InterfaceLib_EditionHasFormat(InterfaceLib::Globals* globals, MachineState* state);		// OSErr EditionHasFormat(EditionRefNum whichEdition, FormatType whichFormat, Size * formatSize)
void InterfaceLib_GetEditionFormatMark(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetEditionFormatMark(EditionRefNum whichEdition, FormatType whichFormat, unsigned long * currentMark)
void InterfaceLib_GetEditionInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetEditionInfo(SectionHandle sectionH, EditionInfoRecord * editionInfo)
void InterfaceLib_GetEditionOpenerProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetEditionOpenerProc(EditionOpenerUPP * opener)
void InterfaceLib_GetLastEditionContainerUsed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetLastEditionContainerUsed(EditionContainerSpec * container)
void InterfaceLib_GetStandardFormats(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetStandardFormats(const EditionContainerSpec * container, FormatType * previewFormat, Handle preview, Handle publisherAlias, Handle formats)
void InterfaceLib_GoToPublisherSection(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GoToPublisherSection(const EditionContainerSpec * container)
void InterfaceLib_InitEditionPackVersion(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InitEditionPackVersion(short curEditionMgrVers)
void InterfaceLib_IsRegisteredSection(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IsRegisteredSection(SectionHandle sectionH)
void InterfaceLib_NewPublisherDialog(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewPublisherDialog(NewPublisherReply * reply)
void InterfaceLib_NewPublisherExpDialog(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewPublisherExpDialog(NewPublisherReply * reply, Point where, short expansionDITLresID, ExpDlgHookUPP dlgHook, ExpModalFilterUPP filter, void * yourDataPtr)
void InterfaceLib_NewSection(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewSection(const EditionContainerSpec * container, const FSSpec * sectionDocument, /* can be NULL */ SectionType kind, long sectionID, UpdateMode initalMode, SectionHandle * sectionH)
void InterfaceLib_NewSubscriberDialog(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewSubscriberDialog(NewSubscriberReply * reply)
void InterfaceLib_NewSubscriberExpDialog(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewSubscriberExpDialog(NewSubscriberReply * reply, Point where, short expansionDITLresID, ExpDlgHookUPP dlgHook, ExpModalFilterUPP filter, void * yourDataPtr)
void InterfaceLib_OpenEdition(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenEdition(SectionHandle subscriberSectionH, EditionRefNum * refNum)
void InterfaceLib_OpenNewEdition(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenNewEdition(SectionHandle publisherSectionH, OSType fdCreator, const FSSpec * publisherSectionDocument, /* can be NULL */ EditionRefNum * refNum)
void InterfaceLib_ReadEdition(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ReadEdition(EditionRefNum whichEdition, FormatType whichFormat, void * buffPtr, Size * buffLen)
void InterfaceLib_RegisterSection(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RegisterSection(const FSSpec * sectionDocument, SectionHandle sectionH, Boolean * aliasWasUpdated)
void InterfaceLib_SectionOptionsDialog(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SectionOptionsDialog(SectionOptionsReply * reply)
void InterfaceLib_SectionOptionsExpDialog(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SectionOptionsExpDialog(SectionOptionsReply * reply, Point where, short expansionDITLresID, ExpDlgHookUPP dlgHook, ExpModalFilterUPP filter, void * yourDataPtr)
void InterfaceLib_SetEditionFormatMark(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetEditionFormatMark(EditionRefNum whichEdition, FormatType whichFormat, unsigned long setMarkTo)
void InterfaceLib_SetEditionOpenerProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetEditionOpenerProc(EditionOpenerUPP opener)
void InterfaceLib_UnRegisterSection(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UnRegisterSection(SectionHandle sectionH)
void InterfaceLib_WriteEdition(InterfaceLib::Globals* globals, MachineState* state);		// OSErr WriteEdition(EditionRefNum whichEdition, FormatType whichFormat, const void * buffPtr, Size buffLen)

/* Events */
void InterfaceLib_Button(InterfaceLib::Globals* globals, MachineState* state);		// Boolean Button(void)
void InterfaceLib_EventAvail(InterfaceLib::Globals* globals, MachineState* state);		// Boolean EventAvail(EventMask eventMask, EventRecord * theEvent)
void InterfaceLib_FlushEvents(InterfaceLib::Globals* globals, MachineState* state);		// void FlushEvents(EventMask whichMask, EventMask stopMask)
void InterfaceLib_GetCaretTime(InterfaceLib::Globals* globals, MachineState* state);		// UInt32 GetCaretTime(void)
void InterfaceLib_GetDblTime(InterfaceLib::Globals* globals, MachineState* state);		// UInt32 GetDblTime(void)
void InterfaceLib_GetEvQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr GetEvQHdr(void)
void InterfaceLib_GetKeys(InterfaceLib::Globals* globals, MachineState* state);		// void GetKeys(KeyMap theKeys)
void InterfaceLib_GetMouse(InterfaceLib::Globals* globals, MachineState* state);		// void GetMouse(Point * mouseLoc)
void InterfaceLib_GetNextEvent(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetNextEvent(EventMask eventMask, EventRecord * theEvent)
void InterfaceLib_GetOSEvent(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetOSEvent(EventMask mask, EventRecord * theEvent)
void InterfaceLib_IsCmdChar(InterfaceLib::Globals* globals, MachineState* state);		// Boolean IsCmdChar(const EventRecord * event, short test)
void InterfaceLib_KeyScript(InterfaceLib::Globals* globals, MachineState* state);		// void KeyScript(short code)
void InterfaceLib_KeyTranslate(InterfaceLib::Globals* globals, MachineState* state);		// UInt32 KeyTranslate(const void * transData, UInt16 keycode, UInt32 * state)
void InterfaceLib_LMGetKbdLast(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetKbdLast(void)
void InterfaceLib_LMGetKbdType(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetKbdType(void)
void InterfaceLib_LMGetKeyRepThresh(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetKeyRepThresh(void)
void InterfaceLib_LMGetKeyThresh(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetKeyThresh(void)
void InterfaceLib_LMSetKbdLast(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetKbdLast(UInt8 value)
void InterfaceLib_LMSetKbdType(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetKbdType(UInt8 value)
void InterfaceLib_LMSetKeyRepThresh(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetKeyRepThresh(SInt16 value)
void InterfaceLib_LMSetKeyThresh(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetKeyThresh(SInt16 value)
void InterfaceLib_OSEventAvail(InterfaceLib::Globals* globals, MachineState* state);		// Boolean OSEventAvail(EventMask mask, EventRecord * theEvent)
void InterfaceLib_PostEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PostEvent(EventKind eventNum, UInt32 eventMsg)
void InterfaceLib_PPostEvent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPostEvent(EventKind eventCode, UInt32 eventMsg, EvQElPtr * qEl)
void InterfaceLib_SetEventMask(InterfaceLib::Globals* globals, MachineState* state);		// void SetEventMask(EventMask value)
void InterfaceLib_StillDown(InterfaceLib::Globals* globals, MachineState* state);		// Boolean StillDown(void)
void InterfaceLib_SystemClick(InterfaceLib::Globals* globals, MachineState* state);		// void SystemClick(const EventRecord * theEvent, WindowRef theWindow)
void InterfaceLib_SystemEvent(InterfaceLib::Globals* globals, MachineState* state);		// Boolean SystemEvent(const EventRecord * theEvent)
void InterfaceLib_SystemTask(InterfaceLib::Globals* globals, MachineState* state);		// void SystemTask(void)
void InterfaceLib_WaitMouseUp(InterfaceLib::Globals* globals, MachineState* state);		// Boolean WaitMouseUp(void)
void InterfaceLib_WaitNextEvent(InterfaceLib::Globals* globals, MachineState* state);		// Boolean WaitNextEvent(EventMask eventMask, EventRecord * theEvent, UInt32 sleep, RgnHandle mouseRgn)

/* FSM */
void InterfaceLib_GetFSInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFSInfo(short selector, short key, short * bufSize, FSDRecPtr fsdPtr)
void InterfaceLib_InformFFS(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InformFFS(short fsid, void * paramBlock)
void InterfaceLib_InformFSM(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InformFSM(short theMessage, void * paramBlock)
void InterfaceLib_InstallFS(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InstallFS(FSDRecPtr fsdPtr)
void InterfaceLib_RemoveFS(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RemoveFS(short fsid)
void InterfaceLib_SetFSInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetFSInfo(short fsid, short bufSize, FSDRecPtr fsdPtr)
void InterfaceLib_UTAddFCBToSearchList(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTAddFCBToSearchList(FCBRecPtr fileCtrlBlockPtr)
void InterfaceLib_UTAddNewVCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTAddNewVCB(short driveNum, short * vRefNum, VCBPtr volCtrlBlockPtr)
void InterfaceLib_UTAdjustEOF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTAdjustEOF(short fileRefNum)
void InterfaceLib_UTAllocateFCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTAllocateFCB(short * fileRefNum, FCBRecPtr * fileCtrlBlockPtr)
void InterfaceLib_UTAllocateVCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTAllocateVCB(unsigned short * sysVCBLength, VCBPtr * volCtrlBlockPtr, unsigned short addSize)
void InterfaceLib_UTAllocateWDCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTAllocateWDCB(WDPBPtr paramBlock)
void InterfaceLib_UTBlockInFQHashP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTBlockInFQHashP(short vRefNum, unsigned long diskBlock)
void InterfaceLib_UTCacheReadIP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCacheReadIP(void * log2PhyProc, unsigned long filePosition, Ptr ioBuffer, short fileRefNum, unsigned long reqCount, unsigned long * actCount, short cacheOption)
void InterfaceLib_UTCacheWriteIP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCacheWriteIP(void * log2PhyProc, unsigned long filePosition, Ptr ioBuffer, short fileRefNum, unsigned long reqCount, unsigned long * actCount, short cacheOption)
void InterfaceLib_UTCheckDirBusy(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckDirBusy(VCBPtr volCtrlBlockPtr, unsigned long dirID)
void InterfaceLib_UTCheckFCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckFCB(FCBRecPtr fileCtrlBlockPtr)
void InterfaceLib_UTCheckFileModifiable(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckFileModifiable(short fileRefNum)
void InterfaceLib_UTCheckFileRefNum(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckFileRefNum(short fileRefNum)
void InterfaceLib_UTCheckForkPermissions(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckForkPermissions(VCBPtr volCtrlBlockPtr, UInt32 fileNum, UInt32 forkID, Boolean fileLocked, SInt8 permissions, Boolean useSearchList, SInt8 * fcbFlags, SInt16 * openForkRefNum)
void InterfaceLib_UTCheckPermission(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckPermission(VCBPtr volCtrlBlockPtr, short * modByte, unsigned long fileNum, ParmBlkPtr paramBlock)
void InterfaceLib_UTCheckVolModifiable(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckVolModifiable(short vRefNum)
void InterfaceLib_UTCheckVolOffline(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckVolOffline(short vRefNum)
void InterfaceLib_UTCheckVolRefNum(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckVolRefNum(short vRefNum)
void InterfaceLib_UTCheckWDRefNum(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTCheckWDRefNum(short wdRefNum)
void InterfaceLib_UTDetermineVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTDetermineVol(ParmBlkPtr paramBlock, short * status, short * moreMatches, short * vRefNum, VCBPtr * volCtrlBlockPtr)
void InterfaceLib_UTDisposeVCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTDisposeVCB(VCBPtr volCtrlBlockPtr)
void InterfaceLib_UTEjectVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTEjectVol(VCBPtr volCtrlBlockPtr)
void InterfaceLib_UTFindDrive(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTFindDrive(short driveNum, DrvQElPtr * driveQElementPtr)
void InterfaceLib_UTFlushCache(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTFlushCache(short refNum, short fcOption)
void InterfaceLib_UTGetBlock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTGetBlock(short refNum, void * log2PhyProc, unsigned long blockNum, short gbOption, Ptr * buffer)
void InterfaceLib_UTGetDefaultVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTGetDefaultVol(WDPBPtr paramBlock)
void InterfaceLib_UTGetForkControlBlockSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTGetForkControlBlockSize(UInt32 * fcbSize)
void InterfaceLib_UTGetPathComponentName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTGetPathComponentName(ParsePathRecPtr parseRec)
void InterfaceLib_UTIndexFCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTIndexFCB(VCBPtr volCtrlBlockPtr, short * fileRefNum, FCBRecPtr * fileCtrlBlockPtr)
void InterfaceLib_UTLocateFCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTLocateFCB(VCBPtr volCtrlBlockPtr, unsigned long fileNum, StringPtr namePtr, short * fileRefNum, FCBRecPtr * fileCtrlBlockPtr)
void InterfaceLib_UTLocateFCBInSearchList(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTLocateFCBInSearchList(VCBPtr volCtrlBlockPtr, unsigned long fileNum, short * fileRefNum, FCBRecPtr * fileCtrlBlockPtr)
void InterfaceLib_UTLocateNextFCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTLocateNextFCB(VCBPtr volCtrlBlockPtr, unsigned long fileNum, StringPtr namePtr, short * fileRefNum, FCBRecPtr * fileCtrlBlockPtr)
void InterfaceLib_UTLocateNextVCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTLocateNextVCB(StringPtr namePtr, short * moreMatches, short * vRefNum, VCBPtr * volCtrlBlockPtr)
void InterfaceLib_UTLocateVCBByName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTLocateVCBByName(StringPtr namePtr, short * moreMatches, short * vRefNum, VCBPtr * volCtrlBlockPtr)
void InterfaceLib_UTLocateVCBByRefNum(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTLocateVCBByRefNum(short refNum, short * vRefNum, VCBPtr * volCtrlBlockPtr)
void InterfaceLib_UTMarkDirty(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTMarkDirty(Ptr buffer)
void InterfaceLib_UTParsePathname(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTParsePathname(short * volNamelength, StringPtr namePtr)
void InterfaceLib_UTReleaseBlock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTReleaseBlock(Ptr buffer, short rbOption)
void InterfaceLib_UTReleaseFCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTReleaseFCB(short fileRefNum)
void InterfaceLib_UTReleaseWDCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTReleaseWDCB(short wdRefNum)
void InterfaceLib_UTRemoveFCBFromSearchList(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTRemoveFCBFromSearchList(FCBRecPtr fileCtrlBlockPtr)
void InterfaceLib_UTResolveFCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTResolveFCB(short fileRefNum, FCBRecPtr * fileCtrlBlockPtr)
void InterfaceLib_UTResolveFileRefNum(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTResolveFileRefNum(FCBRecPtr fileCtrlBlockPtr, short * fileRefNum)
void InterfaceLib_UTResolveWDCB(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTResolveWDCB(long procID, short wdIndex, short wdRefNum, WDCBRecPtr * wdCtrlBlockPtr)
void InterfaceLib_UTSetDefaultVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTSetDefaultVol(long nodeHint, unsigned long dirID, short refNum)
void InterfaceLib_UTTrashBlocks(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTTrashBlocks(unsigned long beginPosition, unsigned long byteCount, VCBPtr volCtrlBlockPtr, short fileRefNum, short tbOption)
void InterfaceLib_UTTrashFileBlocks(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTTrashFileBlocks(VCBPtr volCtrlBlockPtr, unsigned long fileNum)
void InterfaceLib_UTTrashVolBlocks(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTTrashVolBlocks(VCBPtr volCtrlBlockPtr)
void InterfaceLib_UTVolCacheReadIP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTVolCacheReadIP(VCBPtr volCtrlBlockPtr, unsigned long blockPosition, Ptr ioBuffer, unsigned long reqCount, unsigned long * actCount, short cacheOption)
void InterfaceLib_UTVolCacheWriteIP(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UTVolCacheWriteIP(VCBPtr volCtrlBlockPtr, unsigned long blockPosition, Ptr ioBuffer, unsigned long reqCount, unsigned long * actCount, short cacheOption)

/* FileMapping */
void InterfaceLib_CloseMappedFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseMappedFile(BackingFileID backingFile)
void InterfaceLib_FSpOpenMappedFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpOpenMappedFile(const FSSpec * spec, Boolean mapResFork, MappingPrivileges privileges, BackingFileID * backingFile)
void InterfaceLib_GetFileViewAccessOptions(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFileViewAccessOptions(FileViewAccess * access, FileViewOptions * options)
void InterfaceLib_GetFileViewFromAddress(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFileViewFromAddress(LogicalAddress address, FileViewID * theView)
void InterfaceLib_GetFileViewInformation(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFileViewInformation(FileViewID theView, PBVersion version, FileViewInformation * fileViewInfo)
void InterfaceLib_GetMappedFileInformation(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetMappedFileInformation(BackingFileID backingFile, PBVersion version, MappedFileInformation * mappedFileInfo)
void InterfaceLib_GetNextFileView(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetNextFileView(FileViewID * theView)
void InterfaceLib_GetNextMappedFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetNextMappedFile(BackingFileID * backingFile)
void InterfaceLib_MapFileView(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MapFileView(BackingFileID backingFile, const UInt64 * backingBase, /* can be NULL */ ByteCount backingLength, FileViewAccess access, ByteCount guardLength, FileViewOptions options, LogicalAddress * viewBase, ByteCount * viewLength, FileViewID * theView)
void InterfaceLib_OpenMappedFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenMappedFile(const FSRef * ref, UniCharCount forkNameLength, const UniChar * forkName, /* can be NULL */ MappingPrivileges privileges, BackingFileID * backingFile)
void InterfaceLib_OpenMappedScratchFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenMappedScratchFile(FSVolumeRefNum volume, ByteCount fileSize, MappingPrivileges privileges, BackingFileID * backingFile)
void InterfaceLib_SetFileViewAccess(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetFileViewAccess(FileViewID theView, FileViewAccess access)
void InterfaceLib_SetFileViewBackingBase(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetFileViewBackingBase(FileViewID theView, const UInt64 * newBackingBase)
void InterfaceLib_SetMappedFileSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetMappedFileSize(BackingFileID backingFile, UInt16 positionMode, const SInt64 * positionOffset)
void InterfaceLib_UnmapFileView(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UnmapFileView(FileViewID theView)

/* FileTransfers */
void InterfaceLib_FTAbort(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTAbort(FTHandle hFT)
void InterfaceLib_FTActivate(InterfaceLib::Globals* globals, MachineState* state);		// void FTActivate(FTHandle hFT, Boolean activate)
void InterfaceLib_FTChoose(InterfaceLib::Globals* globals, MachineState* state);		// short FTChoose(FTHandle * hFT, Point where, FileTransferChooseIdleUPP idleProc)
void InterfaceLib_FTCompletionAsync(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTCompletionAsync(FTHandle hFT, FTCompletionKind completionCall)
void InterfaceLib_FTDefault(InterfaceLib::Globals* globals, MachineState* state);		// void FTDefault(Ptr * theConfig, short procID, Boolean allocate)
void InterfaceLib_FTDispose(InterfaceLib::Globals* globals, MachineState* state);		// void FTDispose(FTHandle hFT)
void InterfaceLib_FTEnglishToIntl(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTEnglishToIntl(FTHandle hFT, const void * inputPtr, Ptr * outputPtr, short language)
void InterfaceLib_FTEvent(InterfaceLib::Globals* globals, MachineState* state);		// void FTEvent(FTHandle hFT, const EventRecord * theEvent)
void InterfaceLib_FTExec(InterfaceLib::Globals* globals, MachineState* state);		// void FTExec(FTHandle hFT)
void InterfaceLib_FTGetConfig(InterfaceLib::Globals* globals, MachineState* state);		// Ptr FTGetConfig(FTHandle hFT)
void InterfaceLib_FTGetErrorString(InterfaceLib::Globals* globals, MachineState* state);		// void FTGetErrorString(FTHandle hFT, short id, Str255 errMsg)
void InterfaceLib_FTGetFTVersion(InterfaceLib::Globals* globals, MachineState* state);		// short FTGetFTVersion(void)
void InterfaceLib_FTGetProcID(InterfaceLib::Globals* globals, MachineState* state);		// short FTGetProcID(ConstStr255Param name)
void InterfaceLib_FTGetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// long FTGetRefCon(FTHandle hFT)
void InterfaceLib_FTGetToolName(InterfaceLib::Globals* globals, MachineState* state);		// void FTGetToolName(short procID, Str255 name)
void InterfaceLib_FTGetUserData(InterfaceLib::Globals* globals, MachineState* state);		// long FTGetUserData(FTHandle hFT)
void InterfaceLib_FTGetVersion(InterfaceLib::Globals* globals, MachineState* state);		// Handle FTGetVersion(FTHandle hFT)
void InterfaceLib_FTIntlToEnglish(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTIntlToEnglish(FTHandle hFT, const void * inputPtr, Ptr * outputPtr, short language)
void InterfaceLib_FTMenu(InterfaceLib::Globals* globals, MachineState* state);		// Boolean FTMenu(FTHandle hFT, short menuID, short item)
void InterfaceLib_FTNew(InterfaceLib::Globals* globals, MachineState* state);		// FTHandle FTNew(short procID, FTFlags flags, FileTransferSendUPP sendProc, FileTransferReceiveUPP recvProc, FileTransferReadUPP readProc, FileTransferWriteUPP writeProc, FileTransferEnvironsUPP environsProc, WindowRef owner, long refCon, long userData)
void InterfaceLib_FTReceive(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTReceive(FTHandle hFT, FSSpecPtr pFSSpec, FileTransferNotificationUPP notifyProc)
void InterfaceLib_FTReceiveAsync(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTReceiveAsync(FTHandle hFT, FSSpecPtr pFSSpec, FileTransferNotificationUPP notifyProc)
void InterfaceLib_FTResume(InterfaceLib::Globals* globals, MachineState* state);		// void FTResume(FTHandle hFT, Boolean resume)
void InterfaceLib_FTSend(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTSend(FTHandle hFT, short numFiles, FSSpecArrayPtr pFSSpec, FileTransferNotificationUPP notifyProc)
void InterfaceLib_FTSendAsync(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTSendAsync(FTHandle hFT, short numFiles, FSSpecArrayPtr pFSSpec, FileTransferNotificationUPP notifyProc)
void InterfaceLib_FTSetConfig(InterfaceLib::Globals* globals, MachineState* state);		// short FTSetConfig(FTHandle hFT, const void * thePtr)
void InterfaceLib_FTSetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// void FTSetRefCon(FTHandle hFT, long refCon)
void InterfaceLib_FTSetupFilter(InterfaceLib::Globals* globals, MachineState* state);		// Boolean FTSetupFilter(short procID, const void * theConfig, short count, DialogRef theDialog, EventRecord * theEvent, short * theItem, long * magicCookie)
void InterfaceLib_FTSetupItem(InterfaceLib::Globals* globals, MachineState* state);		// void FTSetupItem(short procID, const void * theConfig, short count, DialogRef theDialog, short * theItem, long * magicCookie)
void InterfaceLib_FTSetupPostflight(InterfaceLib::Globals* globals, MachineState* state);		// void FTSetupPostflight(short procID)
void InterfaceLib_FTSetupPreflight(InterfaceLib::Globals* globals, MachineState* state);		// Handle FTSetupPreflight(short procID, long * magicCookie)
void InterfaceLib_FTSetupSetup(InterfaceLib::Globals* globals, MachineState* state);		// void FTSetupSetup(short procID, const void * theConfig, short count, DialogRef theDialog, long * magicCookie)
void InterfaceLib_FTSetupXCleanup(InterfaceLib::Globals* globals, MachineState* state);		// void FTSetupXCleanup(short procID, const void * theConfig, short count, DialogRef theDialog, Boolean OKed, long * magicCookie)
void InterfaceLib_FTSetUserData(InterfaceLib::Globals* globals, MachineState* state);		// void FTSetUserData(FTHandle hFT, long userData)
void InterfaceLib_FTStart(InterfaceLib::Globals* globals, MachineState* state);		// FTErr FTStart(FTHandle hFT, FTDirection direction, const SFReply * fileInfo)
void InterfaceLib_FTValidate(InterfaceLib::Globals* globals, MachineState* state);		// Boolean FTValidate(FTHandle hFT)
void InterfaceLib_InitFT(InterfaceLib::Globals* globals, MachineState* state);		// FTErr InitFT(void)

/* Files */
void InterfaceLib_Allocate(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Allocate(short refNum, long * count)
void InterfaceLib_AllocContig(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AllocContig(short refNum, long * count)
void InterfaceLib_CatMove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CatMove(short vRefNum, long dirID, ConstStr255Param oldName, long newDirID, ConstStr255Param newName)
void InterfaceLib_CloseWD(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseWD(short wdRefNum)
void InterfaceLib_Create(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Create(ConstStr255Param fileName, short vRefNum, OSType creator, OSType fileType)
void InterfaceLib_DirCreate(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DirCreate(short vRefNum, long parentDirID, ConstStr255Param directoryName, long * createdDirID)
void InterfaceLib_Eject(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Eject(ConstStr63Param volName, /* can be NULL */ short vRefNum)
void InterfaceLib_FInitQueue(InterfaceLib::Globals* globals, MachineState* state);		// void FInitQueue(void)
void InterfaceLib_FlushVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FlushVol(ConstStr63Param volName, /* can be NULL */ short vRefNum)
void InterfaceLib_FSAllocateFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSAllocateFork(SInt16 forkRefNum, FSAllocationFlags flags, UInt16 positionMode, SInt64 positionOffset, UInt64 requestCount, UInt64 * actualCount)
void InterfaceLib_FSCatalogSearch(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSCatalogSearch(FSIterator iterator, const FSSearchParams * searchCriteria, ItemCount maximumObjects, ItemCount * actualObjects, Boolean * containerChanged, /* can be NULL */ FSCatalogInfoBitmap whichInfo, FSCatalogInfo * catalogInfos, /* can be NULL */ FSRef * refs, /* can be NULL */ FSSpec * specs, /* can be NULL */ HFSUniStr255 * names)
void InterfaceLib_FSClose(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSClose(short refNum)
void InterfaceLib_FSCloseFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSCloseFork(SInt16 forkRefNum)
void InterfaceLib_FSCloseIterator(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSCloseIterator(FSIterator iterator)
void InterfaceLib_FSCompareFSRefs(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSCompareFSRefs(const FSRef * ref1, const FSRef * ref2)
void InterfaceLib_FSCreateDirectoryUnicode(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSCreateDirectoryUnicode(const FSRef * parentRef, UniCharCount nameLength, const UniChar * name, FSCatalogInfoBitmap whichInfo, const FSCatalogInfo * catalogInfo, /* can be NULL */ FSRef * newRef, /* can be NULL */ FSSpec * newSpec, /* can be NULL */ UInt32 * newDirID)
void InterfaceLib_FSCreateFileUnicode(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSCreateFileUnicode(const FSRef * parentRef, UniCharCount nameLength, const UniChar * name, FSCatalogInfoBitmap whichInfo, const FSCatalogInfo * catalogInfo, /* can be NULL */ FSRef * newRef, /* can be NULL */ FSSpec * newSpec)
void InterfaceLib_FSCreateFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSCreateFork(const FSRef * ref, UniCharCount forkNameLength, const UniChar * forkName)
void InterfaceLib_FSDelete(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSDelete(ConstStr255Param fileName, short vRefNum)
void InterfaceLib_FSDeleteFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSDeleteFork(const FSRef * ref, UniCharCount forkNameLength, const UniChar * forkName)
void InterfaceLib_FSDeleteObject(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSDeleteObject(const FSRef * ref)
void InterfaceLib_FSExchangeObjects(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSExchangeObjects(const FSRef * ref, const FSRef * destRef)
void InterfaceLib_FSFlushFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSFlushFork(SInt16 forkRefNum)
void InterfaceLib_FSGetCatalogInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetCatalogInfo(const FSRef * ref, FSCatalogInfoBitmap whichInfo, FSCatalogInfo * catalogInfo, /* can be NULL */ HFSUniStr255 * outName, /* can be NULL */ FSSpec * fsSpec, /* can be NULL */ FSRef * parentRef)
void InterfaceLib_FSGetCatalogInfoBulk(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetCatalogInfoBulk(FSIterator iterator, ItemCount maximumObjects, ItemCount * actualObjects, Boolean * containerChanged, /* can be NULL */ FSCatalogInfoBitmap whichInfo, FSCatalogInfo * catalogInfos, /* can be NULL */ FSRef * refs, /* can be NULL */ FSSpec * specs, /* can be NULL */ HFSUniStr255 * names)
void InterfaceLib_FSGetDataForkName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetDataForkName(HFSUniStr255 * dataForkName)
void InterfaceLib_FSGetForkCBInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetForkCBInfo(SInt16 desiredRefNum, FSVolumeRefNum volume, SInt16 * iterator, /* can be NULL */ SInt16 * actualRefNum, /* can be NULL */ FSForkInfo * forkInfo, /* can be NULL */ FSRef * ref, /* can be NULL */ HFSUniStr255 * outForkName)
void InterfaceLib_FSGetForkPosition(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetForkPosition(SInt16 forkRefNum, SInt64 * position)
void InterfaceLib_FSGetForkSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetForkSize(SInt16 forkRefNum, SInt64 * forkSize)
void InterfaceLib_FSGetResourceForkName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetResourceForkName(HFSUniStr255 * resourceForkName)
void InterfaceLib_FSGetVolumeInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSGetVolumeInfo(FSVolumeRefNum volume, ItemCount volumeIndex, FSVolumeRefNum * actualVolume, /* can be NULL */ FSVolumeInfoBitmap whichInfo, FSVolumeInfo * info, /* can be NULL */ HFSUniStr255 * volumeName, /* can be NULL */ FSRef * rootDirectory)
void InterfaceLib_FSIterateForks(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSIterateForks(const FSRef * ref, CatPositionRec * forkIterator, HFSUniStr255 * forkName, /* can be NULL */ SInt64 * forkSize, /* can be NULL */ UInt64 * forkPhysicalSize)
void InterfaceLib_FSMakeFSRefUnicode(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSMakeFSRefUnicode(const FSRef * parentRef, UniCharCount nameLength, const UniChar * name, TextEncoding textEncodingHint, FSRef * newRef)
void InterfaceLib_FSMakeFSSpec(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSMakeFSSpec(short vRefNum, long dirID, ConstStr255Param fileName, FSSpec * spec)
void InterfaceLib_FSMoveObject(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSMoveObject(const FSRef * ref, const FSRef * destDirectory, FSRef * newRef)
void InterfaceLib_FSOpen(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSOpen(ConstStr255Param fileName, short vRefNum, short * refNum)
void InterfaceLib_FSOpenFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSOpenFork(const FSRef * ref, UniCharCount forkNameLength, const UniChar * forkName, /* can be NULL */ SInt8 permissions, SInt16 * forkRefNum)
void InterfaceLib_FSOpenIterator(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSOpenIterator(const FSRef * container, FSIteratorFlags iteratorFlags, FSIterator * iterator)
void InterfaceLib_FSpCatMove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpCatMove(const FSSpec * source, const FSSpec * dest)
void InterfaceLib_FSpCreate(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpCreate(const FSSpec * spec, OSType creator, OSType fileType, ScriptCode scriptTag)
void InterfaceLib_FSpDelete(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpDelete(const FSSpec * spec)
void InterfaceLib_FSpDirCreate(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpDirCreate(const FSSpec * spec, ScriptCode scriptTag, long * createdDirID)
void InterfaceLib_FSpExchangeFiles(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpExchangeFiles(const FSSpec * source, const FSSpec * dest)
void InterfaceLib_FSpGetFInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpGetFInfo(const FSSpec * spec, FInfo * fndrInfo)
void InterfaceLib_FSpMakeFSRef(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpMakeFSRef(const FSSpec * source, FSRef * newRef)
void InterfaceLib_FSpOpenDF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpOpenDF(const FSSpec * spec, SInt8 permission, short * refNum)
void InterfaceLib_FSpOpenRF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpOpenRF(const FSSpec * spec, SInt8 permission, short * refNum)
void InterfaceLib_FSpRename(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpRename(const FSSpec * spec, ConstStr255Param newName)
void InterfaceLib_FSpRstFLock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpRstFLock(const FSSpec * spec)
void InterfaceLib_FSpSetFInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpSetFInfo(const FSSpec * spec, const FInfo * fndrInfo)
void InterfaceLib_FSpSetFLock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSpSetFLock(const FSSpec * spec)
void InterfaceLib_FSRead(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSRead(short refNum, long * count, void * buffPtr)
void InterfaceLib_FSReadFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSReadFork(SInt16 forkRefNum, UInt16 positionMode, SInt64 positionOffset, ByteCount requestCount, void * buffer, ByteCount * actualCount)
void InterfaceLib_FSRenameUnicode(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSRenameUnicode(const FSRef * ref, UniCharCount nameLength, const UniChar * name, TextEncoding textEncodingHint, FSRef * newRef)
void InterfaceLib_FSSetCatalogInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSSetCatalogInfo(const FSRef * ref, FSCatalogInfoBitmap whichInfo, const FSCatalogInfo * catalogInfo)
void InterfaceLib_FSSetForkPosition(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSSetForkPosition(SInt16 forkRefNum, UInt16 positionMode, SInt64 positionOffset)
void InterfaceLib_FSSetForkSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSSetForkSize(SInt16 forkRefNum, UInt16 positionMode, SInt64 positionOffset)
void InterfaceLib_FSSetVolumeInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSSetVolumeInfo(FSVolumeRefNum volume, FSVolumeInfoBitmap whichInfo, const FSVolumeInfo * info)
void InterfaceLib_FSWrite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSWrite(short refNum, long * count, const void * buffPtr)
void InterfaceLib_FSWriteFork(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSWriteFork(SInt16 forkRefNum, UInt16 positionMode, SInt64 positionOffset, ByteCount requestCount, const void * buffer, ByteCount * actualCount)
void InterfaceLib_GetEOF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetEOF(short refNum, long * logEOF)
void InterfaceLib_GetFInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFInfo(ConstStr255Param fileName, short vRefNum, FInfo * fndrInfo)
void InterfaceLib_GetFPos(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFPos(short refNum, long * filePos)
void InterfaceLib_GetFSQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr GetFSQHdr(void)
void InterfaceLib_GetVCBQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr GetVCBQHdr(void)
void InterfaceLib_GetVInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetVInfo(short drvNum, StringPtr volName, short * vRefNum, long * freeBytes)
void InterfaceLib_GetVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetVol(StringPtr volName, short * vRefNum)
void InterfaceLib_GetVRefNum(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetVRefNum(short fileRefNum, short * vRefNum)
void InterfaceLib_GetWDInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetWDInfo(short wdRefNum, short * vRefNum, long * dirID, long * procID)
void InterfaceLib_HCreate(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HCreate(short vRefNum, long dirID, ConstStr255Param fileName, OSType creator, OSType fileType)
void InterfaceLib_HDelete(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HDelete(short vRefNum, long dirID, ConstStr255Param fileName)
void InterfaceLib_HGetFInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HGetFInfo(short vRefNum, long dirID, ConstStr255Param fileName, FInfo * fndrInfo)
void InterfaceLib_HGetVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HGetVol(StringPtr volName, short * vRefNum, long * dirID)
void InterfaceLib_HOpen(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HOpen(short vRefNum, long dirID, ConstStr255Param fileName, SInt8 permission, short * refNum)
void InterfaceLib_HOpenDF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HOpenDF(short vRefNum, long dirID, ConstStr255Param fileName, SInt8 permission, short * refNum)
void InterfaceLib_HOpenRF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HOpenRF(short vRefNum, long dirID, ConstStr255Param fileName, SInt8 permission, short * refNum)
void InterfaceLib_HRename(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HRename(short vRefNum, long dirID, ConstStr255Param oldName, ConstStr255Param newName)
void InterfaceLib_HRstFLock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HRstFLock(short vRefNum, long dirID, ConstStr255Param fileName)
void InterfaceLib_HSetFInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HSetFInfo(short vRefNum, long dirID, ConstStr255Param fileName, const FInfo * fndrInfo)
void InterfaceLib_HSetFLock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HSetFLock(short vRefNum, long dirID, ConstStr255Param fileName)
void InterfaceLib_HSetVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HSetVol(ConstStr63Param volName, /* can be NULL */ short vRefNum, long dirID)
void InterfaceLib_OpenDF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenDF(ConstStr255Param fileName, short vRefNum, short * refNum)
void InterfaceLib_OpenRF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenRF(ConstStr255Param fileName, short vRefNum, short * refNum)
void InterfaceLib_OpenWD(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenWD(short vRefNum, long dirID, long procID, short * wdRefNum)
void InterfaceLib_PBAllocateAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBAllocateAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBAllocateForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBAllocateForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBAllocateForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBAllocateForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBAllocateSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBAllocateSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBAllocContigAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBAllocContigAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBAllocContigSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBAllocContigSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBCatalogSearchAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBCatalogSearchAsync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBCatalogSearchSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCatalogSearchSync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBCatMoveAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCatMoveAsync(CMovePBPtr paramBlock)
void InterfaceLib_PBCatMoveSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCatMoveSync(CMovePBPtr paramBlock)
void InterfaceLib_PBCatSearchAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCatSearchAsync(CSParamPtr paramBlock)
void InterfaceLib_PBCatSearchSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCatSearchSync(CSParamPtr paramBlock)
void InterfaceLib_PBCloseForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBCloseForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBCloseForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCloseForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBCloseIteratorAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBCloseIteratorAsync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBCloseIteratorSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCloseIteratorSync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBCloseWDAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCloseWDAsync(WDPBPtr paramBlock)
void InterfaceLib_PBCloseWDSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCloseWDSync(WDPBPtr paramBlock)
void InterfaceLib_PBCompareFSRefsAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBCompareFSRefsAsync(FSRefParam * paramBlock)
void InterfaceLib_PBCompareFSRefsSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCompareFSRefsSync(FSRefParam * paramBlock)
void InterfaceLib_PBCreateAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCreateAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBCreateDirectoryUnicodeAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBCreateDirectoryUnicodeAsync(FSRefParam * paramBlock)
void InterfaceLib_PBCreateDirectoryUnicodeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCreateDirectoryUnicodeSync(FSRefParam * paramBlock)
void InterfaceLib_PBCreateFileIDRefAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCreateFileIDRefAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBCreateFileIDRefSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCreateFileIDRefSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBCreateFileUnicodeAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBCreateFileUnicodeAsync(FSRefParam * paramBlock)
void InterfaceLib_PBCreateFileUnicodeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCreateFileUnicodeSync(FSRefParam * paramBlock)
void InterfaceLib_PBCreateForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBCreateForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBCreateForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCreateForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBCreateSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBCreateSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBDeleteAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDeleteAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBDeleteFileIDRefAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDeleteFileIDRefAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBDeleteFileIDRefSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDeleteFileIDRefSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBDeleteForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBDeleteForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBDeleteForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDeleteForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBDeleteObjectAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBDeleteObjectAsync(FSRefParam * paramBlock)
void InterfaceLib_PBDeleteObjectSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDeleteObjectSync(FSRefParam * paramBlock)
void InterfaceLib_PBDeleteSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDeleteSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBDirCreateAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDirCreateAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBDirCreateSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDirCreateSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBDTAddAPPLAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTAddAPPLAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTAddAPPLSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTAddAPPLSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTAddIconAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTAddIconAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTAddIconSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTAddIconSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTCloseDown(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTCloseDown(DTPBPtr paramBlock)
void InterfaceLib_PBDTDeleteAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTDeleteAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTDeleteSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTDeleteSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTFlushAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTFlushAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTFlushSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTFlushSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetAPPLAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetAPPLAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetAPPLSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetAPPLSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetCommentAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetCommentAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetCommentSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetCommentSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetIconAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetIconAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetIconInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetIconInfoAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetIconInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetIconInfoSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetIconSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetIconSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetInfoAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetInfoSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTGetPath(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTGetPath(DTPBPtr paramBlock)
void InterfaceLib_PBDTOpenInform(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTOpenInform(DTPBPtr paramBlock)
void InterfaceLib_PBDTRemoveAPPLAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTRemoveAPPLAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTRemoveAPPLSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTRemoveAPPLSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTRemoveCommentAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTRemoveCommentAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTRemoveCommentSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTRemoveCommentSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTResetAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTResetAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTResetSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTResetSync(DTPBPtr paramBlock)
void InterfaceLib_PBDTSetCommentAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTSetCommentAsync(DTPBPtr paramBlock)
void InterfaceLib_PBDTSetCommentSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBDTSetCommentSync(DTPBPtr paramBlock)
void InterfaceLib_PBEject(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBEject(ParmBlkPtr paramBlock)
void InterfaceLib_PBExchangeFilesAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBExchangeFilesAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBExchangeFilesSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBExchangeFilesSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBExchangeObjectsAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBExchangeObjectsAsync(FSRefParam * paramBlock)
void InterfaceLib_PBExchangeObjectsSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBExchangeObjectsSync(FSRefParam * paramBlock)
void InterfaceLib_PBFlushFileAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBFlushFileAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBFlushFileSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBFlushFileSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBFlushForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBFlushForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBFlushForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBFlushForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBFlushVolAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBFlushVolAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBFlushVolSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBFlushVolSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetCatalogInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBGetCatalogInfoAsync(FSRefParam * paramBlock)
void InterfaceLib_PBGetCatalogInfoBulkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBGetCatalogInfoBulkAsync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBGetCatalogInfoBulkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetCatalogInfoBulkSync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBGetCatalogInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetCatalogInfoSync(FSRefParam * paramBlock)
void InterfaceLib_PBGetCatInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetCatInfoAsync(CInfoPBPtr paramBlock)
void InterfaceLib_PBGetCatInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetCatInfoSync(CInfoPBPtr paramBlock)
void InterfaceLib_PBGetEOFAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetEOFAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetEOFSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetEOFSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetFCBInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetFCBInfoAsync(FCBPBPtr paramBlock)
void InterfaceLib_PBGetFCBInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetFCBInfoSync(FCBPBPtr paramBlock)
void InterfaceLib_PBGetFInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetFInfoAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetFInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetFInfoSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetForeignPrivsAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetForeignPrivsAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBGetForeignPrivsSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetForeignPrivsSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBGetForkCBInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBGetForkCBInfoAsync(FSForkCBInfoParam * paramBlock)
void InterfaceLib_PBGetForkCBInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetForkCBInfoSync(FSForkCBInfoParam * paramBlock)
void InterfaceLib_PBGetForkPositionAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBGetForkPositionAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBGetForkPositionSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetForkPositionSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBGetForkSizeAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBGetForkSizeAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBGetForkSizeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetForkSizeSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBGetFPosAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetFPosAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetFPosSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetFPosSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetUGEntryAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetUGEntryAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBGetUGEntrySync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetUGEntrySync(HParmBlkPtr paramBlock)
void InterfaceLib_PBGetVInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetVInfoAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetVInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetVInfoSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetVolAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetVolAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetVolMountInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetVolMountInfo(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetVolMountInfoSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetVolMountInfoSize(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetVolSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetVolSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBGetVolumeInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBGetVolumeInfoAsync(FSVolumeInfoParam * paramBlock)
void InterfaceLib_PBGetVolumeInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetVolumeInfoSync(FSVolumeInfoParam * paramBlock)
void InterfaceLib_PBGetWDInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetWDInfoAsync(WDPBPtr paramBlock)
void InterfaceLib_PBGetWDInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetWDInfoSync(WDPBPtr paramBlock)
void InterfaceLib_PBGetXCatInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetXCatInfoAsync(XCInfoPBPtr paramBlock)
void InterfaceLib_PBGetXCatInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBGetXCatInfoSync(XCInfoPBPtr paramBlock)
void InterfaceLib_PBHCopyFileAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHCopyFileAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHCopyFileSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHCopyFileSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHCreateAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHCreateAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHCreateSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHCreateSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHDeleteAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHDeleteAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHDeleteSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHDeleteSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetDirAccessAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetDirAccessAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetDirAccessSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetDirAccessSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetFInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetFInfoAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetFInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetFInfoSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetLogInInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetLogInInfoAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetLogInInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetLogInInfoSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetVInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetVInfoAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetVInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetVInfoSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetVolAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetVolAsync(WDPBPtr paramBlock)
void InterfaceLib_PBHGetVolParmsAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetVolParmsAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetVolParmsSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetVolParmsSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHGetVolSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHGetVolSync(WDPBPtr paramBlock)
void InterfaceLib_PBHMapIDAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHMapIDAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHMapIDSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHMapIDSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHMapNameAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHMapNameAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHMapNameSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHMapNameSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHMoveRenameAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHMoveRenameAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHMoveRenameSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHMoveRenameSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenDenyAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenDenyAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenDenySync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenDenySync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenDFAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenDFAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenDFSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenDFSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenRFAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenRFAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenRFDenyAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenRFDenyAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenRFDenySync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenRFDenySync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenRFSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenRFSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHOpenSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHOpenSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHRenameAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHRenameAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHRenameSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHRenameSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHRstFLockAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHRstFLockAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHRstFLockSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHRstFLockSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHSetDirAccessAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetDirAccessAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHSetDirAccessSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetDirAccessSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHSetFInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetFInfoAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHSetFInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetFInfoSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHSetFLockAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetFLockAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHSetFLockSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetFLockSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBHSetVolAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetVolAsync(WDPBPtr paramBlock)
void InterfaceLib_PBHSetVolSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHSetVolSync(WDPBPtr paramBlock)
void InterfaceLib_PBHTrashVolumeCachesSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBHTrashVolumeCachesSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBIterateForksAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBIterateForksAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBIterateForksSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBIterateForksSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBLockRangeAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBLockRangeAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBLockRangeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBLockRangeSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBMakeFSRefAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBMakeFSRefAsync(FSRefParam * paramBlock)
void InterfaceLib_PBMakeFSRefSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBMakeFSRefSync(FSRefParam * paramBlock)
void InterfaceLib_PBMakeFSRefUnicodeAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBMakeFSRefUnicodeAsync(FSRefParam * paramBlock)
void InterfaceLib_PBMakeFSRefUnicodeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBMakeFSRefUnicodeSync(FSRefParam * paramBlock)
void InterfaceLib_PBMakeFSSpecAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBMakeFSSpecAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBMakeFSSpecSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBMakeFSSpecSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBMountVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBMountVol(ParmBlkPtr paramBlock)
void InterfaceLib_PBMoveObjectAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBMoveObjectAsync(FSRefParam * paramBlock)
void InterfaceLib_PBMoveObjectSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBMoveObjectSync(FSRefParam * paramBlock)
void InterfaceLib_PBOffLine(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOffLine(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenDFAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenDFAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenDFSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenDFSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBOpenForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBOpenForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBOpenIteratorAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBOpenIteratorAsync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBOpenIteratorSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenIteratorSync(FSCatalogBulkParam * paramBlock)
void InterfaceLib_PBOpenRFAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenRFAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenRFSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenRFSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBOpenWDAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenWDAsync(WDPBPtr paramBlock)
void InterfaceLib_PBOpenWDSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBOpenWDSync(WDPBPtr paramBlock)
void InterfaceLib_PBReadForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBReadForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBReadForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBReadForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBRenameAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBRenameAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBRenameSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBRenameSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBRenameUnicodeAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBRenameUnicodeAsync(FSRefParam * paramBlock)
void InterfaceLib_PBRenameUnicodeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBRenameUnicodeSync(FSRefParam * paramBlock)
void InterfaceLib_PBResolveFileIDRefAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBResolveFileIDRefAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBResolveFileIDRefSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBResolveFileIDRefSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBRstFLockAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBRstFLockAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBRstFLockSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBRstFLockSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetCatalogInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBSetCatalogInfoAsync(FSRefParam * paramBlock)
void InterfaceLib_PBSetCatalogInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetCatalogInfoSync(FSRefParam * paramBlock)
void InterfaceLib_PBSetCatInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetCatInfoAsync(CInfoPBPtr paramBlock)
void InterfaceLib_PBSetCatInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetCatInfoSync(CInfoPBPtr paramBlock)
void InterfaceLib_PBSetEOFAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetEOFAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetEOFSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetEOFSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetFInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFInfoAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetFInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFInfoSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetFLockAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFLockAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetFLockSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFLockSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetForeignPrivsAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetForeignPrivsAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBSetForeignPrivsSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetForeignPrivsSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBSetForkPositionAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBSetForkPositionAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBSetForkPositionSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetForkPositionSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBSetForkSizeAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBSetForkSizeAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBSetForkSizeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetForkSizeSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBSetFPosAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFPosAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetFPosSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFPosSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetFVersAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFVersAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetFVersSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetFVersSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetVInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetVInfoAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBSetVInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetVInfoSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBSetVolAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetVolAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetVolSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetVolSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBSetVolumeInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBSetVolumeInfoAsync(FSVolumeInfoParam * paramBlock)
void InterfaceLib_PBSetVolumeInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBSetVolumeInfoSync(FSVolumeInfoParam * paramBlock)
void InterfaceLib_PBShareAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBShareAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBShareSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBShareSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBUnlockRangeAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBUnlockRangeAsync(ParmBlkPtr paramBlock)
void InterfaceLib_PBUnlockRangeSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBUnlockRangeSync(ParmBlkPtr paramBlock)
void InterfaceLib_PBUnmountVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBUnmountVol(ParmBlkPtr paramBlock)
void InterfaceLib_PBUnmountVolImmed(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBUnmountVolImmed(ParmBlkPtr paramBlock)
void InterfaceLib_PBUnshareAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBUnshareAsync(HParmBlkPtr paramBlock)
void InterfaceLib_PBUnshareSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBUnshareSync(HParmBlkPtr paramBlock)
void InterfaceLib_PBVolumeMount(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBVolumeMount(ParmBlkPtr paramBlock)
void InterfaceLib_PBWriteForkAsync(InterfaceLib::Globals* globals, MachineState* state);		// void PBWriteForkAsync(FSForkIOParam * paramBlock)
void InterfaceLib_PBWriteForkSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBWriteForkSync(FSForkIOParam * paramBlock)
void InterfaceLib_PBXGetVolInfoAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBXGetVolInfoAsync(XVolumeParamPtr paramBlock)
void InterfaceLib_PBXGetVolInfoSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PBXGetVolInfoSync(XVolumeParamPtr paramBlock)
void InterfaceLib_Rename(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Rename(ConstStr255Param oldName, short vRefNum, ConstStr255Param newName)
void InterfaceLib_RstFLock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RstFLock(ConstStr255Param fileName, short vRefNum)
void InterfaceLib_SetEOF(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetEOF(short refNum, long logEOF)
void InterfaceLib_SetFInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetFInfo(ConstStr255Param fileName, short vRefNum, const FInfo * fndrInfo)
void InterfaceLib_SetFLock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetFLock(ConstStr255Param fileName, short vRefNum)
void InterfaceLib_SetFPos(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetFPos(short refNum, short posMode, long posOff)
void InterfaceLib_SetVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetVol(ConstStr63Param volName, /* can be NULL */ short vRefNum)
void InterfaceLib_UnmountVol(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UnmountVol(ConstStr63Param volName, /* can be NULL */ short vRefNum)

/* FixMath */
void InterfaceLib_Fix2Frac(InterfaceLib::Globals* globals, MachineState* state);		// Fract Fix2Frac(Fixed x)
void InterfaceLib_Fix2Long(InterfaceLib::Globals* globals, MachineState* state);		// long Fix2Long(Fixed x)
void InterfaceLib_Fix2X(InterfaceLib::Globals* globals, MachineState* state);		// double Fix2X(Fixed x)
void InterfaceLib_FixATan2(InterfaceLib::Globals* globals, MachineState* state);		// Fixed FixATan2(long x, long y)
void InterfaceLib_FixDiv(InterfaceLib::Globals* globals, MachineState* state);		// Fixed FixDiv(Fixed x, Fixed y)
void InterfaceLib_FixMul(InterfaceLib::Globals* globals, MachineState* state);		// Fixed FixMul(Fixed a, Fixed b)
void InterfaceLib_FixRatio(InterfaceLib::Globals* globals, MachineState* state);		// Fixed FixRatio(short numer, short denom)
void InterfaceLib_FixRound(InterfaceLib::Globals* globals, MachineState* state);		// short FixRound(Fixed x)
void InterfaceLib_Frac2Fix(InterfaceLib::Globals* globals, MachineState* state);		// Fixed Frac2Fix(Fract x)
void InterfaceLib_Frac2X(InterfaceLib::Globals* globals, MachineState* state);		// double Frac2X(Fract x)
void InterfaceLib_FracCos(InterfaceLib::Globals* globals, MachineState* state);		// Fract FracCos(Fixed x)
void InterfaceLib_FracDiv(InterfaceLib::Globals* globals, MachineState* state);		// Fract FracDiv(Fract x, Fract y)
void InterfaceLib_FracMul(InterfaceLib::Globals* globals, MachineState* state);		// Fract FracMul(Fract x, Fract y)
void InterfaceLib_FracSin(InterfaceLib::Globals* globals, MachineState* state);		// Fract FracSin(Fixed x)
void InterfaceLib_FracSqrt(InterfaceLib::Globals* globals, MachineState* state);		// Fract FracSqrt(Fract x)
void InterfaceLib_Long2Fix(InterfaceLib::Globals* globals, MachineState* state);		// Fixed Long2Fix(long x)
void InterfaceLib_X2Fix(InterfaceLib::Globals* globals, MachineState* state);		// Fixed X2Fix(double x)
void InterfaceLib_X2Frac(InterfaceLib::Globals* globals, MachineState* state);		// Fract X2Frac(double x)

/* Folders */
void InterfaceLib_FindFolder(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FindFolder(short vRefNum, OSType folderType, Boolean createFolder, short * foundVRefNum, long * foundDirID)
void InterfaceLib_FindFolderExtended(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FindFolderExtended(short vol, OSType foldType, Boolean createFolder, UInt32 flags, void * data, short * vRefNum, long * dirID)
void InterfaceLib_FolderManagerRegisterCallNotificationProcs(InterfaceLib::Globals* globals, MachineState* state);		// OSStatus FolderManagerRegisterCallNotificationProcs(OSType message, void * arg, UInt32 options)
void InterfaceLib_FolderManagerRegisterNotificationProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FolderManagerRegisterNotificationProc(FolderManagerNotificationUPP notificationProc, void * refCon, UInt32 options)
void InterfaceLib_FolderManagerUnregisterNotificationProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FolderManagerUnregisterNotificationProc(FolderManagerNotificationUPP notificationProc, void * refCon)
void InterfaceLib_FSFindFolder(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSFindFolder(short vRefNum, OSType folderType, Boolean createFolder, FSRef * foundRef)
void InterfaceLib_FSFindFolderExtended(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FSFindFolderExtended(short vol, OSType foldType, Boolean createFolder, UInt32 flags, void * data, FSRef * foundRef)

/* Fonts */
void InterfaceLib_FetchFontInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FetchFontInfo(SInt16 fontID, SInt16 fontSize, SInt16 fontStyle, FontInfo * info)
void InterfaceLib_FlushFonts(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FlushFonts(void)
void InterfaceLib_FMSwapFont(InterfaceLib::Globals* globals, MachineState* state);		// FMOutPtr FMSwapFont(const FMInput * inRec)
void InterfaceLib_FontMetrics(InterfaceLib::Globals* globals, MachineState* state);		// void FontMetrics(FMetricRecPtr theMetrics)
void InterfaceLib_GetAppFont(InterfaceLib::Globals* globals, MachineState* state);		// short GetAppFont(void)
void InterfaceLib_GetDefFontSize(InterfaceLib::Globals* globals, MachineState* state);		// short GetDefFontSize(void)
void InterfaceLib_GetFNum(InterfaceLib::Globals* globals, MachineState* state);		// void GetFNum(ConstStr255Param name, short * familyID)
void InterfaceLib_GetFontName(InterfaceLib::Globals* globals, MachineState* state);		// void GetFontName(short familyID, Str255 name)
void InterfaceLib_GetOutlinePreferred(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetOutlinePreferred(void)
void InterfaceLib_GetPreserveGlyph(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetPreserveGlyph(void)
void InterfaceLib_GetSysFont(InterfaceLib::Globals* globals, MachineState* state);		// short GetSysFont(void)
void InterfaceLib_InitFonts(InterfaceLib::Globals* globals, MachineState* state);		// void InitFonts(void)
void InterfaceLib_IsAntiAliasedTextEnabled(InterfaceLib::Globals* globals, MachineState* state);		// Boolean IsAntiAliasedTextEnabled(SInt16 * oMinFontSize)
void InterfaceLib_IsOutline(InterfaceLib::Globals* globals, MachineState* state);		// Boolean IsOutline(Point numer, Point denom)
void InterfaceLib_OutlineMetrics(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OutlineMetrics(short byteCount, const void * textPtr, Point numer, Point denom, short * yMax, short * yMin, FixedPtr awArray, FixedPtr lsbArray, RectPtr boundsArray)
void InterfaceLib_QDTextBounds(InterfaceLib::Globals* globals, MachineState* state);		// void QDTextBounds(short byteCount, const void * textAddr, Rect * bounds)
void InterfaceLib_RealFont(InterfaceLib::Globals* globals, MachineState* state);		// Boolean RealFont(short fontNum, short size)
void InterfaceLib_SetAntiAliasedTextEnabled(InterfaceLib::Globals* globals, MachineState* state);		// OSStatus SetAntiAliasedTextEnabled(Boolean iEnable, SInt16 iMinFontSize)
void InterfaceLib_SetFontLock(InterfaceLib::Globals* globals, MachineState* state);		// void SetFontLock(Boolean lockFlag)
void InterfaceLib_SetFractEnable(InterfaceLib::Globals* globals, MachineState* state);		// void SetFractEnable(Boolean fractEnable)
void InterfaceLib_SetFScaleDisable(InterfaceLib::Globals* globals, MachineState* state);		// void SetFScaleDisable(Boolean fscaleDisable)
void InterfaceLib_SetOutlinePreferred(InterfaceLib::Globals* globals, MachineState* state);		// void SetOutlinePreferred(Boolean outlinePreferred)
void InterfaceLib_SetPreserveGlyph(InterfaceLib::Globals* globals, MachineState* state);		// void SetPreserveGlyph(Boolean preserveGlyph)

/* Gestalt */
void InterfaceLib_DeleteGestaltValue(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DeleteGestaltValue(OSType selector)
void InterfaceLib_Gestalt(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Gestalt(OSType selector, long * response)
void InterfaceLib_NewGestalt(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewGestalt(OSType selector, SelectorFunctionUPP gestaltFunction)
void InterfaceLib_NewGestaltValue(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewGestaltValue(OSType selector, long newValue)
void InterfaceLib_ReplaceGestalt(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ReplaceGestalt(OSType selector, SelectorFunctionUPP gestaltFunction, SelectorFunctionUPP * oldGestaltFunction)
void InterfaceLib_ReplaceGestaltValue(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ReplaceGestaltValue(OSType selector, long replacementValue)
void InterfaceLib_SetGestaltValue(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetGestaltValue(OSType selector, long newValue)

/* Icons */
void InterfaceLib_AddIconToSuite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AddIconToSuite(Handle theIconData, IconSuiteRef theSuite, ResType theType)
void InterfaceLib_DisposeCIcon(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeCIcon(CIconHandle theIcon)
void InterfaceLib_DisposeIconSuite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DisposeIconSuite(IconSuiteRef theIconSuite, Boolean disposeData)
void InterfaceLib_ForEachIconDo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ForEachIconDo(IconSuiteRef theSuite, IconSelectorValue selector, IconActionUPP action, void * yourDataPtr)
void InterfaceLib_GetCIcon(InterfaceLib::Globals* globals, MachineState* state);		// CIconHandle GetCIcon(SInt16 iconID)
void InterfaceLib_GetIcon(InterfaceLib::Globals* globals, MachineState* state);		// Handle GetIcon(SInt16 iconID)
void InterfaceLib_GetIconCacheData(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetIconCacheData(IconCacheRef theCache, void ** theData)
void InterfaceLib_GetIconCacheProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetIconCacheProc(IconCacheRef theCache, IconGetterUPP * theProc)
void InterfaceLib_GetIconFromSuite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetIconFromSuite(Handle * theIconData, IconSuiteRef theSuite, ResType theType)
void InterfaceLib_GetIconSuite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetIconSuite(IconSuiteRef * theIconSuite, SInt16 theResID, IconSelectorValue selector)
void InterfaceLib_GetLabel(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetLabel(SInt16 labelNumber, RGBColor * labelColor, Str255 labelString)
void InterfaceLib_GetSuiteLabel(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 GetSuiteLabel(IconSuiteRef theSuite)
void InterfaceLib_IconIDToRgn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IconIDToRgn(RgnHandle theRgn, const Rect * iconRect, IconAlignmentType align, SInt16 iconID)
void InterfaceLib_IconMethodToRgn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IconMethodToRgn(RgnHandle theRgn, const Rect * iconRect, IconAlignmentType align, IconGetterUPP theMethod, void * yourDataPtr)
void InterfaceLib_IconSuiteToRgn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IconSuiteToRgn(RgnHandle theRgn, const Rect * iconRect, IconAlignmentType align, IconSuiteRef theIconSuite)
void InterfaceLib_LoadIconCache(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LoadIconCache(const Rect * theRect, IconAlignmentType align, IconTransformType transform, IconCacheRef theIconCache)
void InterfaceLib_MakeIconCache(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MakeIconCache(IconCacheRef * theCache, IconGetterUPP makeIcon, void * yourDataPtr)
void InterfaceLib_NewIconSuite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewIconSuite(IconSuiteRef * theIconSuite)
void InterfaceLib_PlotCIcon(InterfaceLib::Globals* globals, MachineState* state);		// void PlotCIcon(const Rect * theRect, CIconHandle theIcon)
void InterfaceLib_PlotCIconHandle(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PlotCIconHandle(const Rect * theRect, IconAlignmentType align, IconTransformType transform, CIconHandle theCIcon)
void InterfaceLib_PlotIcon(InterfaceLib::Globals* globals, MachineState* state);		// void PlotIcon(const Rect * theRect, Handle theIcon)
void InterfaceLib_PlotIconHandle(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PlotIconHandle(const Rect * theRect, IconAlignmentType align, IconTransformType transform, Handle theIcon)
void InterfaceLib_PlotIconID(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PlotIconID(const Rect * theRect, IconAlignmentType align, IconTransformType transform, SInt16 theResID)
void InterfaceLib_PlotIconMethod(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PlotIconMethod(const Rect * theRect, IconAlignmentType align, IconTransformType transform, IconGetterUPP theMethod, void * yourDataPtr)
void InterfaceLib_PlotIconSuite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PlotIconSuite(const Rect * theRect, IconAlignmentType align, IconTransformType transform, IconSuiteRef theIconSuite)
void InterfaceLib_PlotSICNHandle(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PlotSICNHandle(const Rect * theRect, IconAlignmentType align, IconTransformType transform, Handle theSICN)
void InterfaceLib_PtInIconID(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PtInIconID(Point testPt, const Rect * iconRect, IconAlignmentType align, SInt16 iconID)
void InterfaceLib_PtInIconMethod(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PtInIconMethod(Point testPt, const Rect * iconRect, IconAlignmentType align, IconGetterUPP theMethod, void * yourDataPtr)
void InterfaceLib_PtInIconSuite(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PtInIconSuite(Point testPt, const Rect * iconRect, IconAlignmentType align, IconSuiteRef theIconSuite)
void InterfaceLib_RectInIconID(InterfaceLib::Globals* globals, MachineState* state);		// Boolean RectInIconID(const Rect * testRect, const Rect * iconRect, IconAlignmentType align, SInt16 iconID)
void InterfaceLib_RectInIconMethod(InterfaceLib::Globals* globals, MachineState* state);		// Boolean RectInIconMethod(const Rect * testRect, const Rect * iconRect, IconAlignmentType align, IconGetterUPP theMethod, void * yourDataPtr)
void InterfaceLib_RectInIconSuite(InterfaceLib::Globals* globals, MachineState* state);		// Boolean RectInIconSuite(const Rect * testRect, const Rect * iconRect, IconAlignmentType align, IconSuiteRef theIconSuite)
void InterfaceLib_SetIconCacheData(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetIconCacheData(IconCacheRef theCache, void * theData)
void InterfaceLib_SetIconCacheProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetIconCacheProc(IconCacheRef theCache, IconGetterUPP theProc)
void InterfaceLib_SetSuiteLabel(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetSuiteLabel(IconSuiteRef theSuite, SInt16 theLabel)

/* Lists */
void InterfaceLib_LActivate(InterfaceLib::Globals* globals, MachineState* state);		// void LActivate(Boolean act, ListHandle lHandle)
void InterfaceLib_LAddColumn(InterfaceLib::Globals* globals, MachineState* state);		// short LAddColumn(short count, short colNum, ListHandle lHandle)
void InterfaceLib_LAddRow(InterfaceLib::Globals* globals, MachineState* state);		// short LAddRow(short count, short rowNum, ListHandle lHandle)
void InterfaceLib_LAddToCell(InterfaceLib::Globals* globals, MachineState* state);		// void LAddToCell(const void * dataPtr, short dataLen, Cell theCell, ListHandle lHandle)
void InterfaceLib_LAutoScroll(InterfaceLib::Globals* globals, MachineState* state);		// void LAutoScroll(ListHandle lHandle)
void InterfaceLib_LCellSize(InterfaceLib::Globals* globals, MachineState* state);		// void LCellSize(Point cSize, ListHandle lHandle)
void InterfaceLib_LClick(InterfaceLib::Globals* globals, MachineState* state);		// Boolean LClick(Point pt, EventModifiers modifiers, ListHandle lHandle)
void InterfaceLib_LClrCell(InterfaceLib::Globals* globals, MachineState* state);		// void LClrCell(Cell theCell, ListHandle lHandle)
void InterfaceLib_LDelColumn(InterfaceLib::Globals* globals, MachineState* state);		// void LDelColumn(short count, short colNum, ListHandle lHandle)
void InterfaceLib_LDelRow(InterfaceLib::Globals* globals, MachineState* state);		// void LDelRow(short count, short rowNum, ListHandle lHandle)
void InterfaceLib_LDispose(InterfaceLib::Globals* globals, MachineState* state);		// void LDispose(ListHandle lHandle)
void InterfaceLib_LDraw(InterfaceLib::Globals* globals, MachineState* state);		// void LDraw(Cell theCell, ListHandle lHandle)
void InterfaceLib_LGetCell(InterfaceLib::Globals* globals, MachineState* state);		// void LGetCell(void * dataPtr, short * dataLen, Cell theCell, ListHandle lHandle)
void InterfaceLib_LGetCellDataLocation(InterfaceLib::Globals* globals, MachineState* state);		// void LGetCellDataLocation(short * offset, short * len, Cell theCell, ListHandle lHandle)
void InterfaceLib_LGetSelect(InterfaceLib::Globals* globals, MachineState* state);		// Boolean LGetSelect(Boolean next, Cell * theCell, ListHandle lHandle)
void InterfaceLib_LLastClick(InterfaceLib::Globals* globals, MachineState* state);		// Cell LLastClick(ListHandle lHandle)
void InterfaceLib_LNew(InterfaceLib::Globals* globals, MachineState* state);		// ListHandle LNew(const Rect * rView, const ListBounds * dataBounds, Point cSize, short theProc, WindowRef theWindow, Boolean drawIt, Boolean hasGrow, Boolean scrollHoriz, Boolean scrollVert)
void InterfaceLib_LNextCell(InterfaceLib::Globals* globals, MachineState* state);		// Boolean LNextCell(Boolean hNext, Boolean vNext, Cell * theCell, ListHandle lHandle)
void InterfaceLib_LRect(InterfaceLib::Globals* globals, MachineState* state);		// void LRect(Rect * cellRect, Cell theCell, ListHandle lHandle)
void InterfaceLib_LScroll(InterfaceLib::Globals* globals, MachineState* state);		// void LScroll(short dCols, short dRows, ListHandle lHandle)
void InterfaceLib_LSearch(InterfaceLib::Globals* globals, MachineState* state);		// Boolean LSearch(const void * dataPtr, short dataLen, ListSearchUPP searchProc, Cell * theCell, ListHandle lHandle)
void InterfaceLib_LSetCell(InterfaceLib::Globals* globals, MachineState* state);		// void LSetCell(const void * dataPtr, short dataLen, Cell theCell, ListHandle lHandle)
void InterfaceLib_LSetDrawingMode(InterfaceLib::Globals* globals, MachineState* state);		// void LSetDrawingMode(Boolean drawIt, ListHandle lHandle)
void InterfaceLib_LSetSelect(InterfaceLib::Globals* globals, MachineState* state);		// void LSetSelect(Boolean setIt, Cell theCell, ListHandle lHandle)
void InterfaceLib_LSize(InterfaceLib::Globals* globals, MachineState* state);		// void LSize(short listWidth, short listHeight, ListHandle lHandle)
void InterfaceLib_LUpdate(InterfaceLib::Globals* globals, MachineState* state);		// void LUpdate(RgnHandle theRgn, ListHandle lHandle)

/* LowMem */
void InterfaceLib_LMGetABusDCE(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetABusDCE(void)
void InterfaceLib_LMGetABusGlobals(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetABusGlobals(void)
void InterfaceLib_LMGetACount(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetACount(void)
void InterfaceLib_LMGetANumber(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetANumber(void)
void InterfaceLib_LMGetApFontID(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetApFontID(void)
void InterfaceLib_LMGetApplLimit(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetApplLimit(void)
void InterfaceLib_LMGetApplScratch(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetApplScratch(void)
void InterfaceLib_LMGetApplZone(InterfaceLib::Globals* globals, MachineState* state);		// THz LMGetApplZone(void)
void InterfaceLib_LMGetAppParmHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetAppParmHandle(void)
void InterfaceLib_LMGetATalkHk2(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetATalkHk2(void)
void InterfaceLib_LMGetAtMenuBottom(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetAtMenuBottom(void)
void InterfaceLib_LMGetAuxWinHead(InterfaceLib::Globals* globals, MachineState* state);		// AuxWinHandle LMGetAuxWinHead(void)
void InterfaceLib_LMGetBootDrive(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetBootDrive(void)
void InterfaceLib_LMGetBufPtr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetBufPtr(void)
void InterfaceLib_LMGetBufTgDate(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetBufTgDate(void)
void InterfaceLib_LMGetBufTgFBkNum(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetBufTgFBkNum(void)
void InterfaceLib_LMGetBufTgFFlg(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetBufTgFFlg(void)
void InterfaceLib_LMGetBufTgFNum(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetBufTgFNum(void)
void InterfaceLib_LMGetCaretTime(InterfaceLib::Globals* globals, MachineState* state);		// UInt32 LMGetCaretTime(void)
void InterfaceLib_LMGetCPUFlag(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetCPUFlag(void)
void InterfaceLib_LMGetCrsrBusy(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetCrsrBusy(void)
void InterfaceLib_LMGetCrsrThresh(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetCrsrThresh(void)
void InterfaceLib_LMGetCurActivate(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef LMGetCurActivate(void)
void InterfaceLib_LMGetCurApName(InterfaceLib::Globals* globals, MachineState* state);		// StringPtr LMGetCurApName(void)
void InterfaceLib_LMGetCurApRefNum(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetCurApRefNum(void)
void InterfaceLib_LMGetCurDeactive(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef LMGetCurDeactive(void)
void InterfaceLib_LMGetCurDirStore(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetCurDirStore(void)
void InterfaceLib_LMGetCurJTOffset(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetCurJTOffset(void)
void InterfaceLib_LMGetCurMap(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetCurMap(void)
void InterfaceLib_LMGetCurPageOption(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetCurPageOption(void)
void InterfaceLib_LMGetCurPitch(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetCurPitch(void)
void InterfaceLib_LMGetCurrentA5(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetCurrentA5(void)
void InterfaceLib_LMGetCurStackBase(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetCurStackBase(void)
void InterfaceLib_LMGetDABeeper(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetDABeeper(void)
void InterfaceLib_LMGetDAStrings(InterfaceLib::Globals* globals, MachineState* state);		// StringHandle LMGetDAStrings(short whichString)
void InterfaceLib_LMGetDefltStack(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetDefltStack(void)
void InterfaceLib_LMGetDefVCBPtr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetDefVCBPtr(void)
void InterfaceLib_LMGetDeskCPat(InterfaceLib::Globals* globals, MachineState* state);		// PixPatHandle LMGetDeskCPat(void)
void InterfaceLib_LMGetDeskHook(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetDeskHook(void)
void InterfaceLib_LMGetDeskPattern(InterfaceLib::Globals* globals, MachineState* state);		// void LMGetDeskPattern(Pattern * deskPatternValue)
void InterfaceLib_LMGetDiskFormatingHFSDefaults(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetDiskFormatingHFSDefaults(void)
void InterfaceLib_LMGetDlgFont(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetDlgFont(void)
void InterfaceLib_LMGetDoubleTime(InterfaceLib::Globals* globals, MachineState* state);		// UInt32 LMGetDoubleTime(void)
void InterfaceLib_LMGetDragHook(InterfaceLib::Globals* globals, MachineState* state);		// DragGrayRgnUPP LMGetDragHook(void)
void InterfaceLib_LMGetDragPattern(InterfaceLib::Globals* globals, MachineState* state);		// void LMGetDragPattern(Pattern * dragPatternValue)
void InterfaceLib_LMGetDrvQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr LMGetDrvQHdr(void)
void InterfaceLib_LMGetDSAlertRect(InterfaceLib::Globals* globals, MachineState* state);		// void LMGetDSAlertRect(Rect * dsAlertRectValue)
void InterfaceLib_LMGetDSAlertTab(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetDSAlertTab(void)
void InterfaceLib_LMGetDSErrCode(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetDSErrCode(void)
void InterfaceLib_LMGetDTQueue(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr LMGetDTQueue(void)
void InterfaceLib_LMGetEventQueue(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr LMGetEventQueue(void)
void InterfaceLib_LMGetExtStsDT(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetExtStsDT(short vectorNumber)
void InterfaceLib_LMGetFCBSPtr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetFCBSPtr(void)
void InterfaceLib_LMGetFinderName(InterfaceLib::Globals* globals, MachineState* state);		// StringPtr LMGetFinderName(void)
void InterfaceLib_LMGetFScaleDisable(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetFScaleDisable(void)
void InterfaceLib_LMGetFSFCBLen(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetFSFCBLen(void)
void InterfaceLib_LMGetFSQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr LMGetFSQHdr(void)
void InterfaceLib_LMGetGhostWindow(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef LMGetGhostWindow(void)
void InterfaceLib_LMGetGNEFilter(InterfaceLib::Globals* globals, MachineState* state);		// GetNextEventFilterUPP LMGetGNEFilter(void)
void InterfaceLib_LMGetGrayRgn(InterfaceLib::Globals* globals, MachineState* state);		// RgnHandle LMGetGrayRgn(void)
void InterfaceLib_LMGetGZMoveHnd(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetGZMoveHnd(void)
void InterfaceLib_LMGetGZRootHnd(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetGZRootHnd(void)
void InterfaceLib_LMGetHeapEnd(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetHeapEnd(void)
void InterfaceLib_LMGetHighHeapMark(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetHighHeapMark(void)
void InterfaceLib_LMGetHWCfgFlags(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetHWCfgFlags(void)
void InterfaceLib_LMGetIntlSpec(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetIntlSpec(void)
void InterfaceLib_LMGetJDTInstall(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetJDTInstall(void)
void InterfaceLib_LMGetJFetch(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetJFetch(void)
void InterfaceLib_LMGetJIODone(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetJIODone(void)
void InterfaceLib_LMGetJournalRef(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetJournalRef(void)
void InterfaceLib_LMGetJStash(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetJStash(void)
void InterfaceLib_LMGetJVBLTask(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetJVBLTask(void)
void InterfaceLib_LMGetKeyTime(InterfaceLib::Globals* globals, MachineState* state);		// long LMGetKeyTime(void)
void InterfaceLib_LMGetLo3Bytes(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetLo3Bytes(void)
void InterfaceLib_LMGetLvl2DT(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetLvl2DT(short vectorNumber)
void InterfaceLib_LMGetMBarEnable(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetMBarEnable(void)
void InterfaceLib_LMGetMBarHeight(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetMBarHeight(void)
void InterfaceLib_LMGetMBarHook(InterfaceLib::Globals* globals, MachineState* state);		// MBarHookUPP LMGetMBarHook(void)
void InterfaceLib_LMGetMBTicks(InterfaceLib::Globals* globals, MachineState* state);		// long LMGetMBTicks(void)
void InterfaceLib_LMGetMemErr(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetMemErr(void)
void InterfaceLib_LMGetMemTop(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetMemTop(void)
void InterfaceLib_LMGetMenuCInfo(InterfaceLib::Globals* globals, MachineState* state);		// MCTableHandle LMGetMenuCInfo(void)
void InterfaceLib_LMGetMenuDisable(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetMenuDisable(void)
void InterfaceLib_LMGetMenuFlash(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetMenuFlash(void)
void InterfaceLib_LMGetMenuHook(InterfaceLib::Globals* globals, MachineState* state);		// MenuHookUPP LMGetMenuHook(void)
void InterfaceLib_LMGetMenuList(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetMenuList(void)
void InterfaceLib_LMGetMinStack(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetMinStack(void)
void InterfaceLib_LMGetMinusOne(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetMinusOne(void)
void InterfaceLib_LMGetMMU32Bit(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetMMU32Bit(void)
void InterfaceLib_LMGetMouseButtonState(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetMouseButtonState(void)
void InterfaceLib_LMGetMouseLocation(InterfaceLib::Globals* globals, MachineState* state);		// Point LMGetMouseLocation(void)
void InterfaceLib_LMGetMouseTemp(InterfaceLib::Globals* globals, MachineState* state);		// Point LMGetMouseTemp(void)
void InterfaceLib_LMGetOldContent(InterfaceLib::Globals* globals, MachineState* state);		// RgnHandle LMGetOldContent(void)
void InterfaceLib_LMGetOldStructure(InterfaceLib::Globals* globals, MachineState* state);		// RgnHandle LMGetOldStructure(void)
void InterfaceLib_LMGetOneOne(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetOneOne(void)
void InterfaceLib_LMGetPaintWhite(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetPaintWhite(void)
void InterfaceLib_LMGetPortAInfo(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetPortAInfo(void)
void InterfaceLib_LMGetPortBUse(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetPortBUse(void)
void InterfaceLib_LMGetPrintErr(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetPrintErr(void)
void InterfaceLib_LMGetRAMBase(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetRAMBase(void)
void InterfaceLib_LMGetRawMouseLocation(InterfaceLib::Globals* globals, MachineState* state);		// Point LMGetRawMouseLocation(void)
void InterfaceLib_LMGetResErr(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetResErr(void)
void InterfaceLib_LMGetResErrProc(InterfaceLib::Globals* globals, MachineState* state);		// ResErrUPP LMGetResErrProc(void)
void InterfaceLib_LMGetResLoad(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetResLoad(void)
void InterfaceLib_LMGetResumeProc(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetResumeProc(void)
void InterfaceLib_LMGetRndSeed(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetRndSeed(void)
void InterfaceLib_LMGetROM85(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetROM85(void)
void InterfaceLib_LMGetROMBase(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetROMBase(void)
void InterfaceLib_LMGetROMFont0(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetROMFont0(void)
void InterfaceLib_LMGetROMMapHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetROMMapHandle(void)
void InterfaceLib_LMGetROMMapInsert(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetROMMapInsert(void)
void InterfaceLib_LMGetSaveUpdate(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSaveUpdate(void)
void InterfaceLib_LMGetSaveVisRgn(InterfaceLib::Globals* globals, MachineState* state);		// RgnHandle LMGetSaveVisRgn(void)
void InterfaceLib_LMGetSCCRd(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetSCCRd(void)
void InterfaceLib_LMGetSCCWr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetSCCWr(void)
void InterfaceLib_LMGetScrapCount(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetScrapCount(void)
void InterfaceLib_LMGetScrapHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetScrapHandle(void)
void InterfaceLib_LMGetScrapName(InterfaceLib::Globals* globals, MachineState* state);		// StringPtr LMGetScrapName(void)
void InterfaceLib_LMGetScrapSize(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetScrapSize(void)
void InterfaceLib_LMGetScrapState(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetScrapState(void)
void InterfaceLib_LMGetScratch20(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetScratch20(void)
void InterfaceLib_LMGetScrDmpEnb(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetScrDmpEnb(void)
void InterfaceLib_LMGetScrnBase(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetScrnBase(void)
void InterfaceLib_LMGetSdVolume(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSdVolume(void)
void InterfaceLib_LMGetSEvtEnb(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSEvtEnb(void)
void InterfaceLib_LMGetSFSaveDisk(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSFSaveDisk(void)
void InterfaceLib_LMGetSoundBase(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetSoundBase(void)
void InterfaceLib_LMGetSoundLevel(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSoundLevel(void)
void InterfaceLib_LMGetSoundPtr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetSoundPtr(void)
void InterfaceLib_LMGetSPAlarm(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetSPAlarm(void)
void InterfaceLib_LMGetSPATalkA(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPATalkA(void)
void InterfaceLib_LMGetSPATalkB(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPATalkB(void)
void InterfaceLib_LMGetSPClikCaret(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPClikCaret(void)
void InterfaceLib_LMGetSPConfig(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPConfig(void)
void InterfaceLib_LMGetSPFont(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSPFont(void)
void InterfaceLib_LMGetSPKbd(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPKbd(void)
void InterfaceLib_LMGetSPMisc2(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPMisc2(void)
void InterfaceLib_LMGetSPPortA(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSPPortA(void)
void InterfaceLib_LMGetSPPortB(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSPPortB(void)
void InterfaceLib_LMGetSPPrint(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPPrint(void)
void InterfaceLib_LMGetSPValid(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPValid(void)
void InterfaceLib_LMGetSPVolCtl(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetSPVolCtl(void)
void InterfaceLib_LMGetStackLowPoint(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetStackLowPoint(void)
void InterfaceLib_LMGetSynListHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetSynListHandle(void)
void InterfaceLib_LMGetSysEvtMask(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSysEvtMask(void)
void InterfaceLib_LMGetSysFontFam(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSysFontFam(void)
void InterfaceLib_LMGetSysFontSize(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSysFontSize(void)
void InterfaceLib_LMGetSysMap(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetSysMap(void)
void InterfaceLib_LMGetSysMapHndl(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetSysMapHndl(void)
void InterfaceLib_LMGetSysResName(InterfaceLib::Globals* globals, MachineState* state);		// StringPtr LMGetSysResName(void)
void InterfaceLib_LMGetSysZone(InterfaceLib::Globals* globals, MachineState* state);		// THz LMGetSysZone(void)
void InterfaceLib_LMGetTEDoText(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetTEDoText(void)
void InterfaceLib_LMGetTERecal(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetTERecal(void)
void InterfaceLib_LMGetTEScrpHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetTEScrpHandle(void)
void InterfaceLib_LMGetTEScrpLength(InterfaceLib::Globals* globals, MachineState* state);		// UInt16 LMGetTEScrpLength(void)
void InterfaceLib_LMGetTESysJust(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetTESysJust(void)
void InterfaceLib_LMGetTheZone(InterfaceLib::Globals* globals, MachineState* state);		// THz LMGetTheZone(void)
void InterfaceLib_LMGetTicks(InterfaceLib::Globals* globals, MachineState* state);		// UInt32 LMGetTicks(void)
void InterfaceLib_LMGetTime(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetTime(void)
void InterfaceLib_LMGetTimeDBRA(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetTimeDBRA(void)
void InterfaceLib_LMGetTimeSCCDB(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetTimeSCCDB(void)
void InterfaceLib_LMGetTimeSCSIDB(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetTimeSCSIDB(void)
void InterfaceLib_LMGetTmpResLoad(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetTmpResLoad(void)
void InterfaceLib_LMGetToExtFS(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr LMGetToExtFS(void)
void InterfaceLib_LMGetToolScratch(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetToolScratch(void)
void InterfaceLib_LMGetTopMapHndl(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetTopMapHndl(void)
void InterfaceLib_LMGetTopMenuItem(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetTopMenuItem(void)
void InterfaceLib_LMGetUnitTableEntryCount(InterfaceLib::Globals* globals, MachineState* state);		// short LMGetUnitTableEntryCount(void)
void InterfaceLib_LMGetUTableBase(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetUTableBase(void)
void InterfaceLib_LMGetVBLQueue(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr LMGetVBLQueue(void)
void InterfaceLib_LMGetVCBQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr LMGetVCBQHdr(void)
void InterfaceLib_LMGetVIA(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetVIA(void)
void InterfaceLib_LMGetWindowList(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef LMGetWindowList(void)
void InterfaceLib_LMGetWMgrPort(InterfaceLib::Globals* globals, MachineState* state);		// GrafPtr LMGetWMgrPort(void)
void InterfaceLib_LMSetABusDCE(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetABusDCE(Ptr value)
void InterfaceLib_LMSetABusGlobals(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetABusGlobals(Ptr value)
void InterfaceLib_LMSetACount(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetACount(SInt16 value)
void InterfaceLib_LMSetANumber(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetANumber(SInt16 value)
void InterfaceLib_LMSetApFontID(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetApFontID(SInt16 value)
void InterfaceLib_LMSetApplLimit(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetApplLimit(Ptr value)
void InterfaceLib_LMSetApplScratch(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetApplScratch(const void * applScratchValue)
void InterfaceLib_LMSetApplZone(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetApplZone(THz value)
void InterfaceLib_LMSetAppParmHandle(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetAppParmHandle(Handle value)
void InterfaceLib_LMSetATalkHk2(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetATalkHk2(Ptr value)
void InterfaceLib_LMSetAtMenuBottom(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetAtMenuBottom(SInt16 value)
void InterfaceLib_LMSetAuxWinHead(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetAuxWinHead(AuxWinHandle value)
void InterfaceLib_LMSetBootDrive(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetBootDrive(SInt16 value)
void InterfaceLib_LMSetBufPtr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetBufPtr(Ptr value)
void InterfaceLib_LMSetBufTgDate(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetBufTgDate(SInt32 value)
void InterfaceLib_LMSetBufTgFBkNum(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetBufTgFBkNum(SInt16 value)
void InterfaceLib_LMSetBufTgFFlg(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetBufTgFFlg(SInt16 value)
void InterfaceLib_LMSetBufTgFNum(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetBufTgFNum(SInt32 value)
void InterfaceLib_LMSetCaretTime(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCaretTime(UInt32 value)
void InterfaceLib_LMSetCPUFlag(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCPUFlag(UInt8 value)
void InterfaceLib_LMSetCrsrBusy(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCrsrBusy(UInt8 value)
void InterfaceLib_LMSetCrsrThresh(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCrsrThresh(SInt16 value)
void InterfaceLib_LMSetCurActivate(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurActivate(WindowRef value)
void InterfaceLib_LMSetCurApName(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurApName(ConstStr31Param curApNameValue)
void InterfaceLib_LMSetCurApRefNum(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurApRefNum(SInt16 value)
void InterfaceLib_LMSetCurDeactive(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurDeactive(WindowRef value)
void InterfaceLib_LMSetCurDirStore(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurDirStore(SInt32 value)
void InterfaceLib_LMSetCurJTOffset(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurJTOffset(SInt16 value)
void InterfaceLib_LMSetCurMap(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurMap(SInt16 value)
void InterfaceLib_LMSetCurPageOption(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurPageOption(SInt16 value)
void InterfaceLib_LMSetCurPitch(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurPitch(SInt16 value)
void InterfaceLib_LMSetCurrentA5(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurrentA5(Ptr value)
void InterfaceLib_LMSetCurStackBase(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCurStackBase(Ptr value)
void InterfaceLib_LMSetDABeeper(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDABeeper(UniversalProcPtr value)
void InterfaceLib_LMSetDAStrings(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDAStrings(StringHandle stringsValue, short whichString)
void InterfaceLib_LMSetDefltStack(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDefltStack(SInt32 value)
void InterfaceLib_LMSetDefVCBPtr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDefVCBPtr(Ptr value)
void InterfaceLib_LMSetDeskCPat(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDeskCPat(PixPatHandle value)
void InterfaceLib_LMSetDeskHook(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDeskHook(UniversalProcPtr value)
void InterfaceLib_LMSetDeskPattern(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDeskPattern(const Pattern * deskPatternValue)
void InterfaceLib_LMSetDiskFormatingHFSDefaults(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDiskFormatingHFSDefaults(Ptr value)
void InterfaceLib_LMSetDlgFont(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDlgFont(SInt16 value)
void InterfaceLib_LMSetDoubleTime(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDoubleTime(UInt32 value)
void InterfaceLib_LMSetDragHook(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDragHook(DragGrayRgnUPP value)
void InterfaceLib_LMSetDragPattern(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDragPattern(const Pattern * dragPatternValue)
void InterfaceLib_LMSetDrvQHdr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDrvQHdr(QHdrPtr drvQHdrValue)
void InterfaceLib_LMSetDSAlertRect(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDSAlertRect(const Rect * dsAlertRectValue)
void InterfaceLib_LMSetDSAlertTab(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDSAlertTab(Ptr value)
void InterfaceLib_LMSetDSErrCode(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDSErrCode(SInt16 value)
void InterfaceLib_LMSetDTQueue(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDTQueue(QHdrPtr dtQueueValue)
void InterfaceLib_LMSetEventQueue(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetEventQueue(QHdrPtr eventQueueValue)
void InterfaceLib_LMSetExtStsDT(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetExtStsDT(UniversalProcPtr ExtStsDTValue, short vectorNumber)
void InterfaceLib_LMSetFCBSPtr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetFCBSPtr(Ptr value)
void InterfaceLib_LMSetFinderName(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetFinderName(ConstStr15Param finderNameValue)
void InterfaceLib_LMSetFScaleDisable(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetFScaleDisable(UInt8 value)
void InterfaceLib_LMSetFSFCBLen(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetFSFCBLen(SInt16 value)
void InterfaceLib_LMSetGhostWindow(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetGhostWindow(WindowRef value)
void InterfaceLib_LMSetGNEFilter(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetGNEFilter(GetNextEventFilterUPP value)
void InterfaceLib_LMSetGrayRgn(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetGrayRgn(RgnHandle value)
void InterfaceLib_LMSetGZMoveHnd(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetGZMoveHnd(Handle value)
void InterfaceLib_LMSetGZRootHnd(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetGZRootHnd(Handle value)
void InterfaceLib_LMSetHeapEnd(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetHeapEnd(Ptr value)
void InterfaceLib_LMSetHighHeapMark(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetHighHeapMark(Ptr value)
void InterfaceLib_LMSetHWCfgFlags(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetHWCfgFlags(SInt16 value)
void InterfaceLib_LMSetIntlSpec(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetIntlSpec(Ptr value)
void InterfaceLib_LMSetJDTInstall(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetJDTInstall(UniversalProcPtr value)
void InterfaceLib_LMSetJFetch(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetJFetch(UniversalProcPtr value)
void InterfaceLib_LMSetJIODone(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetJIODone(UniversalProcPtr value)
void InterfaceLib_LMSetJournalRef(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetJournalRef(SInt16 value)
void InterfaceLib_LMSetJStash(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetJStash(UniversalProcPtr value)
void InterfaceLib_LMSetJVBLTask(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetJVBLTask(UniversalProcPtr value)
void InterfaceLib_LMSetKeyTime(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetKeyTime(long value)
void InterfaceLib_LMSetLo3Bytes(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetLo3Bytes(SInt32 value)
void InterfaceLib_LMSetLvl2DT(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetLvl2DT(UniversalProcPtr Lvl2DTValue, short vectorNumber)
void InterfaceLib_LMSetMBarEnable(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMBarEnable(SInt16 value)
void InterfaceLib_LMSetMBarHeight(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMBarHeight(SInt16 value)
void InterfaceLib_LMSetMBarHook(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMBarHook(MBarHookUPP value)
void InterfaceLib_LMSetMBTicks(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMBTicks(long value)
void InterfaceLib_LMSetMemErr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMemErr(SInt16 value)
void InterfaceLib_LMSetMemTop(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMemTop(Ptr value)
void InterfaceLib_LMSetMenuCInfo(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMenuCInfo(MCTableHandle value)
void InterfaceLib_LMSetMenuDisable(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMenuDisable(SInt32 value)
void InterfaceLib_LMSetMenuFlash(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMenuFlash(SInt16 value)
void InterfaceLib_LMSetMenuHook(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMenuHook(MenuHookUPP value)
void InterfaceLib_LMSetMenuList(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMenuList(Handle value)
void InterfaceLib_LMSetMinStack(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMinStack(SInt32 value)
void InterfaceLib_LMSetMinusOne(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMinusOne(SInt32 value)
void InterfaceLib_LMSetMMU32Bit(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMMU32Bit(UInt8 value)
void InterfaceLib_LMSetMouseButtonState(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMouseButtonState(UInt8 value)
void InterfaceLib_LMSetMouseLocation(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMouseLocation(Point value)
void InterfaceLib_LMSetMouseTemp(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMouseTemp(Point value)
void InterfaceLib_LMSetOldContent(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetOldContent(RgnHandle value)
void InterfaceLib_LMSetOldStructure(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetOldStructure(RgnHandle value)
void InterfaceLib_LMSetOneOne(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetOneOne(SInt32 value)
void InterfaceLib_LMSetPaintWhite(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetPaintWhite(SInt16 value)
void InterfaceLib_LMSetPortAInfo(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetPortAInfo(UInt8 value)
void InterfaceLib_LMSetPortBUse(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetPortBUse(UInt8 value)
void InterfaceLib_LMSetPrintErr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetPrintErr(SInt16 value)
void InterfaceLib_LMSetRAMBase(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetRAMBase(Ptr value)
void InterfaceLib_LMSetRawMouseLocation(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetRawMouseLocation(Point value)
void InterfaceLib_LMSetResErr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetResErr(SInt16 value)
void InterfaceLib_LMSetResErrProc(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetResErrProc(ResErrUPP value)
void InterfaceLib_LMSetResLoad(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetResLoad(UInt8 value)
void InterfaceLib_LMSetResumeProc(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetResumeProc(UniversalProcPtr value)
void InterfaceLib_LMSetRndSeed(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetRndSeed(SInt32 value)
void InterfaceLib_LMSetROM85(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetROM85(SInt16 value)
void InterfaceLib_LMSetROMBase(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetROMBase(Ptr value)
void InterfaceLib_LMSetROMFont0(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetROMFont0(Handle value)
void InterfaceLib_LMSetROMMapHandle(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetROMMapHandle(Handle value)
void InterfaceLib_LMSetROMMapInsert(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetROMMapInsert(UInt8 value)
void InterfaceLib_LMSetSaveUpdate(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSaveUpdate(SInt16 value)
void InterfaceLib_LMSetSaveVisRgn(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSaveVisRgn(RgnHandle value)
void InterfaceLib_LMSetSCCRd(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSCCRd(Ptr value)
void InterfaceLib_LMSetSCCWr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSCCWr(Ptr value)
void InterfaceLib_LMSetScrapCount(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrapCount(SInt16 value)
void InterfaceLib_LMSetScrapHandle(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrapHandle(Handle value)
void InterfaceLib_LMSetScrapName(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrapName(StringPtr value)
void InterfaceLib_LMSetScrapSize(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrapSize(SInt32 value)
void InterfaceLib_LMSetScrapState(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrapState(SInt16 value)
void InterfaceLib_LMSetScratch20(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScratch20(const void * scratch20Value)
void InterfaceLib_LMSetScrDmpEnb(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrDmpEnb(UInt8 value)
void InterfaceLib_LMSetScrnBase(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrnBase(Ptr value)
void InterfaceLib_LMSetSdVolume(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSdVolume(UInt8 value)
void InterfaceLib_LMSetSEvtEnb(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSEvtEnb(UInt8 value)
void InterfaceLib_LMSetSFSaveDisk(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSFSaveDisk(SInt16 value)
void InterfaceLib_LMSetSoundBase(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSoundBase(Ptr value)
void InterfaceLib_LMSetSoundLevel(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSoundLevel(UInt8 value)
void InterfaceLib_LMSetSoundPtr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSoundPtr(Ptr value)
void InterfaceLib_LMSetSPAlarm(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPAlarm(SInt32 value)
void InterfaceLib_LMSetSPATalkA(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPATalkA(UInt8 value)
void InterfaceLib_LMSetSPATalkB(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPATalkB(UInt8 value)
void InterfaceLib_LMSetSPClikCaret(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPClikCaret(UInt8 value)
void InterfaceLib_LMSetSPConfig(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPConfig(UInt8 value)
void InterfaceLib_LMSetSPFont(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPFont(SInt16 value)
void InterfaceLib_LMSetSPKbd(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPKbd(UInt8 value)
void InterfaceLib_LMSetSPMisc2(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPMisc2(UInt8 value)
void InterfaceLib_LMSetSPPortA(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPPortA(SInt16 value)
void InterfaceLib_LMSetSPPortB(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPPortB(SInt16 value)
void InterfaceLib_LMSetSPPrint(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPPrint(UInt8 value)
void InterfaceLib_LMSetSPValid(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPValid(UInt8 value)
void InterfaceLib_LMSetSPVolCtl(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSPVolCtl(UInt8 value)
void InterfaceLib_LMSetStackLowPoint(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetStackLowPoint(Ptr value)
void InterfaceLib_LMSetSynListHandle(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSynListHandle(Handle value)
void InterfaceLib_LMSetSysEvtMask(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSysEvtMask(SInt16 value)
void InterfaceLib_LMSetSysFontFam(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSysFontFam(SInt16 value)
void InterfaceLib_LMSetSysFontSize(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSysFontSize(SInt16 value)
void InterfaceLib_LMSetSysMap(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSysMap(SInt16 value)
void InterfaceLib_LMSetSysMapHndl(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSysMapHndl(Handle value)
void InterfaceLib_LMSetSysResName(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSysResName(ConstStr15Param sysResNameValue)
void InterfaceLib_LMSetSysZone(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetSysZone(THz value)
void InterfaceLib_LMSetTEDoText(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTEDoText(UniversalProcPtr value)
void InterfaceLib_LMSetTERecal(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTERecal(UniversalProcPtr value)
void InterfaceLib_LMSetTEScrpHandle(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTEScrpHandle(Handle value)
void InterfaceLib_LMSetTEScrpLength(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTEScrpLength(UInt16 value)
void InterfaceLib_LMSetTESysJust(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTESysJust(SInt16 value)
void InterfaceLib_LMSetTheMenu(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTheMenu(SInt16 value)
void InterfaceLib_LMSetTheZone(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTheZone(THz value)
void InterfaceLib_LMSetTicks(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTicks(UInt32 value)
void InterfaceLib_LMSetTime(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTime(SInt32 value)
void InterfaceLib_LMSetTimeDBRA(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTimeDBRA(SInt16 value)
void InterfaceLib_LMSetTimeSCCDB(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTimeSCCDB(SInt16 value)
void InterfaceLib_LMSetTimeSCSIDB(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTimeSCSIDB(SInt16 value)
void InterfaceLib_LMSetTmpResLoad(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTmpResLoad(UInt8 value)
void InterfaceLib_LMSetToExtFS(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetToExtFS(UniversalProcPtr value)
void InterfaceLib_LMSetToolScratch(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetToolScratch(const void * toolScratchValue)
void InterfaceLib_LMSetTopMapHndl(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTopMapHndl(Handle value)
void InterfaceLib_LMSetTopMenuItem(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTopMenuItem(SInt16 value)
void InterfaceLib_LMSetUnitTableEntryCount(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetUnitTableEntryCount(short value)
void InterfaceLib_LMSetUTableBase(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetUTableBase(Ptr value)
void InterfaceLib_LMSetVBLQueue(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetVBLQueue(QHdrPtr vblQueueValue)
void InterfaceLib_LMSetVCBQHdr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetVCBQHdr(QHdrPtr vcbQHdrValue)
void InterfaceLib_LMSetVIA(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetVIA(Ptr value)
void InterfaceLib_LMSetWindowList(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetWindowList(WindowRef value)
void InterfaceLib_LMSetWMgrPort(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetWMgrPort(GrafPtr value)

/* MIDI */
void InterfaceLib_MIDIAddPort(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MIDIAddPort(OSType clientID, short BufSize, short * refnum, MIDIPortParamsPtr init)
void InterfaceLib_MIDIConnectData(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MIDIConnectData(OSType srcClID, OSType srcPortID, OSType dstClID, OSType dstPortID)
void InterfaceLib_MIDIConnectTime(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MIDIConnectTime(OSType srcClID, OSType srcPortID, OSType dstClID, OSType dstPortID)
void InterfaceLib_MIDIConvertTime(InterfaceLib::Globals* globals, MachineState* state);		// long MIDIConvertTime(short srcFormat, short dstFormat, long time)
void InterfaceLib_MIDIFlush(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIFlush(short refnum)
void InterfaceLib_MIDIGetClientIcon(InterfaceLib::Globals* globals, MachineState* state);		// Handle MIDIGetClientIcon(OSType clientID)
void InterfaceLib_MIDIGetClientName(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIGetClientName(OSType clientID, Str255 name)
void InterfaceLib_MIDIGetClients(InterfaceLib::Globals* globals, MachineState* state);		// MIDIIDListHandle MIDIGetClients(void)
void InterfaceLib_MIDIGetClRefCon(InterfaceLib::Globals* globals, MachineState* state);		// long MIDIGetClRefCon(OSType clientID)
void InterfaceLib_MIDIGetCurTime(InterfaceLib::Globals* globals, MachineState* state);		// long MIDIGetCurTime(short refnum)
void InterfaceLib_MIDIGetOffsetTime(InterfaceLib::Globals* globals, MachineState* state);		// long MIDIGetOffsetTime(short refnum)
void InterfaceLib_MIDIGetPortInfo(InterfaceLib::Globals* globals, MachineState* state);		// MIDIPortInfoHandle MIDIGetPortInfo(OSType clientID, OSType portID)
void InterfaceLib_MIDIGetPortName(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIGetPortName(OSType clientID, OSType portID, Str255 name)
void InterfaceLib_MIDIGetPorts(InterfaceLib::Globals* globals, MachineState* state);		// MIDIIDListHandle MIDIGetPorts(OSType clientID)
void InterfaceLib_MIDIGetReadHook(InterfaceLib::Globals* globals, MachineState* state);		// ProcPtr MIDIGetReadHook(short refnum)
void InterfaceLib_MIDIGetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// long MIDIGetRefCon(short refnum)
void InterfaceLib_MIDIGetSync(InterfaceLib::Globals* globals, MachineState* state);		// short MIDIGetSync(short refnum)
void InterfaceLib_MIDIGetTCFormat(InterfaceLib::Globals* globals, MachineState* state);		// short MIDIGetTCFormat(short refnum)
void InterfaceLib_MIDIPoll(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIPoll(short refnum, long offsetTime)
void InterfaceLib_MIDIRemovePort(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIRemovePort(short refnum)
void InterfaceLib_MIDISetClientName(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetClientName(OSType clientID, ConstStr255Param name)
void InterfaceLib_MIDISetClRefCon(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetClRefCon(OSType clientID, long refCon)
void InterfaceLib_MIDISetCurTime(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetCurTime(short refnum, long time)
void InterfaceLib_MIDISetOffsetTime(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetOffsetTime(short refnum, long offsetTime)
void InterfaceLib_MIDISetPortName(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetPortName(OSType clientID, OSType portID, ConstStr255Param name)
void InterfaceLib_MIDISetReadHook(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetReadHook(short refnum, ProcPtr hook)
void InterfaceLib_MIDISetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetRefCon(short refnum, long refCon)
void InterfaceLib_MIDISetRunRate(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetRunRate(short refnum, short rate, long time)
void InterfaceLib_MIDISetSync(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetSync(short refnum, short sync)
void InterfaceLib_MIDISetTCFormat(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISetTCFormat(short refnum, short format)
void InterfaceLib_MIDISignIn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MIDISignIn(OSType clientID, long refCon, Handle icon, ConstStr255Param name)
void InterfaceLib_MIDISignOut(InterfaceLib::Globals* globals, MachineState* state);		// void MIDISignOut(OSType clientID)
void InterfaceLib_MIDIStartTime(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIStartTime(short refnum)
void InterfaceLib_MIDIStopTime(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIStopTime(short refnum)
void InterfaceLib_MIDIUnConnectData(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MIDIUnConnectData(OSType srcClID, OSType srcPortID, OSType dstClID, OSType dstPortID)
void InterfaceLib_MIDIUnConnectTime(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MIDIUnConnectTime(OSType srcClID, OSType srcPortID, OSType dstClID, OSType dstPortID)
void InterfaceLib_MIDIVersion(InterfaceLib::Globals* globals, MachineState* state);		// NumVersion MIDIVersion(void)
void InterfaceLib_MIDIWakeUp(InterfaceLib::Globals* globals, MachineState* state);		// void MIDIWakeUp(short refnum, long time, long period, MIDITimeUPP timeProc)
void InterfaceLib_MIDIWorldChanged(InterfaceLib::Globals* globals, MachineState* state);		// Boolean MIDIWorldChanged(OSType clientID)
void InterfaceLib_MIDIWritePacket(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MIDIWritePacket(short refnum, MIDIPacketPtr packet)

/* MacErrors */
void InterfaceLib_SysError(InterfaceLib::Globals* globals, MachineState* state);		// void SysError(short errorCode)

/* MacMemory */
void InterfaceLib_ApplicationZone(InterfaceLib::Globals* globals, MachineState* state);		// THz ApplicationZone(void)
void InterfaceLib_BlockMove(InterfaceLib::Globals* globals, MachineState* state);		// void BlockMove(const void * srcPtr, void * destPtr, Size byteCount)
void InterfaceLib_BlockMoveData(InterfaceLib::Globals* globals, MachineState* state);		// void BlockMoveData(const void * srcPtr, void * destPtr, Size byteCount)
void InterfaceLib_CompactMem(InterfaceLib::Globals* globals, MachineState* state);		// Size CompactMem(Size cbNeeded)
void InterfaceLib_CompactMemSys(InterfaceLib::Globals* globals, MachineState* state);		// Size CompactMemSys(Size cbNeeded)
void InterfaceLib_DebuggerEnter(InterfaceLib::Globals* globals, MachineState* state);		// void DebuggerEnter(void)
void InterfaceLib_DebuggerExit(InterfaceLib::Globals* globals, MachineState* state);		// void DebuggerExit(void)
void InterfaceLib_DebuggerGetMax(InterfaceLib::Globals* globals, MachineState* state);		// long DebuggerGetMax(void)
void InterfaceLib_DebuggerLockMemory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DebuggerLockMemory(void * address, unsigned long count)
void InterfaceLib_DebuggerPoll(InterfaceLib::Globals* globals, MachineState* state);		// void DebuggerPoll(void)
void InterfaceLib_DebuggerUnlockMemory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DebuggerUnlockMemory(void * address, unsigned long count)
void InterfaceLib_DeferUserFn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DeferUserFn(UserFnUPP userFunction, void * argument)
void InterfaceLib_DisposeHandle(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeHandle(Handle h)
void InterfaceLib_DisposePtr(InterfaceLib::Globals* globals, MachineState* state);		// void DisposePtr(Ptr p)
void InterfaceLib_EmptyHandle(InterfaceLib::Globals* globals, MachineState* state);		// void EmptyHandle(Handle h)
void InterfaceLib_EnterSupervisorMode(InterfaceLib::Globals* globals, MachineState* state);		// StatusRegisterContents EnterSupervisorMode(void)
void InterfaceLib_FlushMemory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FlushMemory(void * address, unsigned long count)
void InterfaceLib_FreeMem(InterfaceLib::Globals* globals, MachineState* state);		// long FreeMem(void)
void InterfaceLib_FreeMemSys(InterfaceLib::Globals* globals, MachineState* state);		// long FreeMemSys(void)
void InterfaceLib_GetApplLimit(InterfaceLib::Globals* globals, MachineState* state);		// Ptr GetApplLimit(void)
void InterfaceLib_GetHandleSize(InterfaceLib::Globals* globals, MachineState* state);		// Size GetHandleSize(Handle h)
void InterfaceLib_GetPageState(InterfaceLib::Globals* globals, MachineState* state);		// PageState GetPageState(const void * address)
void InterfaceLib_GetPhysical(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetPhysical(LogicalToPhysicalTable * addresses, unsigned long * physicalEntryCount)
void InterfaceLib_GetPtrSize(InterfaceLib::Globals* globals, MachineState* state);		// Size GetPtrSize(Ptr p)
void InterfaceLib_GetVolumeVirtualMemoryInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetVolumeVirtualMemoryInfo(VolumeVirtualMemoryInfoPtr volVMInfo)
void InterfaceLib_GetZone(InterfaceLib::Globals* globals, MachineState* state);		// THz GetZone(void)
void InterfaceLib_GZSaveHnd(InterfaceLib::Globals* globals, MachineState* state);		// Handle GZSaveHnd(void)
void InterfaceLib_HandAndHand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HandAndHand(Handle hand1, Handle hand2)
void InterfaceLib_HandleZone(InterfaceLib::Globals* globals, MachineState* state);		// THz HandleZone(Handle h)
void InterfaceLib_HandToHand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HandToHand(Handle * theHndl)
void InterfaceLib_HClrRBit(InterfaceLib::Globals* globals, MachineState* state);		// void HClrRBit(Handle h)
void InterfaceLib_HGetState(InterfaceLib::Globals* globals, MachineState* state);		// SInt8 HGetState(Handle h)
void InterfaceLib_HLock(InterfaceLib::Globals* globals, MachineState* state);		// void HLock(Handle h)
void InterfaceLib_HLockHi(InterfaceLib::Globals* globals, MachineState* state);		// void HLockHi(Handle h)
void InterfaceLib_HNoPurge(InterfaceLib::Globals* globals, MachineState* state);		// void HNoPurge(Handle h)
void InterfaceLib_HoldMemory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr HoldMemory(void * address, unsigned long count)
void InterfaceLib_HPurge(InterfaceLib::Globals* globals, MachineState* state);		// void HPurge(Handle h)
void InterfaceLib_HSetRBit(InterfaceLib::Globals* globals, MachineState* state);		// void HSetRBit(Handle h)
void InterfaceLib_HSetState(InterfaceLib::Globals* globals, MachineState* state);		// void HSetState(Handle h, SInt8 flags)
void InterfaceLib_HUnlock(InterfaceLib::Globals* globals, MachineState* state);		// void HUnlock(Handle h)
void InterfaceLib_InitApplZone(InterfaceLib::Globals* globals, MachineState* state);		// void InitApplZone(void)
void InterfaceLib_InitZone(InterfaceLib::Globals* globals, MachineState* state);		// void InitZone(GrowZoneUPP pgrowZone, short cmoreMasters, void * limitPtr, void * startPtr)
void InterfaceLib_InlineGetHandleSize(InterfaceLib::Globals* globals, MachineState* state);		// Size InlineGetHandleSize(Handle h)
void InterfaceLib_LockMemory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LockMemory(void * address, unsigned long count)
void InterfaceLib_LockMemoryContiguous(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LockMemoryContiguous(void * address, unsigned long count)
void InterfaceLib_LockMemoryForOutput(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LockMemoryForOutput(void * address, unsigned long count)
void InterfaceLib_MakeMemoryNonResident(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MakeMemoryNonResident(void * address, unsigned long count)
void InterfaceLib_MakeMemoryResident(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MakeMemoryResident(void * address, unsigned long count)
void InterfaceLib_MaxApplZone(InterfaceLib::Globals* globals, MachineState* state);		// void MaxApplZone(void)
void InterfaceLib_MaxBlock(InterfaceLib::Globals* globals, MachineState* state);		// long MaxBlock(void)
void InterfaceLib_MaxBlockSys(InterfaceLib::Globals* globals, MachineState* state);		// long MaxBlockSys(void)
void InterfaceLib_MaxMem(InterfaceLib::Globals* globals, MachineState* state);		// Size MaxMem(Size * grow)
void InterfaceLib_MaxMemSys(InterfaceLib::Globals* globals, MachineState* state);		// Size MaxMemSys(Size * grow)
void InterfaceLib_MemError(InterfaceLib::Globals* globals, MachineState* state);		// OSErr MemError(void)
void InterfaceLib_MoreMasters(InterfaceLib::Globals* globals, MachineState* state);		// void MoreMasters(void)
void InterfaceLib_MoveHHi(InterfaceLib::Globals* globals, MachineState* state);		// void MoveHHi(Handle h)
void InterfaceLib_NewEmptyHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle NewEmptyHandle(void)
void InterfaceLib_NewEmptyHandleSys(InterfaceLib::Globals* globals, MachineState* state);		// Handle NewEmptyHandleSys(void)
void InterfaceLib_NewHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle NewHandle(Size byteCount)
void InterfaceLib_NewHandleClear(InterfaceLib::Globals* globals, MachineState* state);		// Handle NewHandleClear(Size byteCount)
void InterfaceLib_NewHandleSys(InterfaceLib::Globals* globals, MachineState* state);		// Handle NewHandleSys(Size byteCount)
void InterfaceLib_NewHandleSysClear(InterfaceLib::Globals* globals, MachineState* state);		// Handle NewHandleSysClear(Size byteCount)
void InterfaceLib_NewPtr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr NewPtr(Size byteCount)
void InterfaceLib_NewPtrClear(InterfaceLib::Globals* globals, MachineState* state);		// Ptr NewPtrClear(Size byteCount)
void InterfaceLib_NewPtrSys(InterfaceLib::Globals* globals, MachineState* state);		// Ptr NewPtrSys(Size byteCount)
void InterfaceLib_NewPtrSysClear(InterfaceLib::Globals* globals, MachineState* state);		// Ptr NewPtrSysClear(Size byteCount)
void InterfaceLib_PageFaultFatal(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PageFaultFatal(void)
void InterfaceLib_PtrAndHand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PtrAndHand(const void * ptr1, Handle hand2, long size)
void InterfaceLib_PtrToHand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PtrToHand(const void * srcPtr, Handle * dstHndl, long size)
void InterfaceLib_PtrToXHand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PtrToXHand(const void * srcPtr, Handle dstHndl, long size)
void InterfaceLib_PtrZone(InterfaceLib::Globals* globals, MachineState* state);		// THz PtrZone(Ptr p)
void InterfaceLib_PurgeMem(InterfaceLib::Globals* globals, MachineState* state);		// void PurgeMem(Size cbNeeded)
void InterfaceLib_PurgeMemSys(InterfaceLib::Globals* globals, MachineState* state);		// void PurgeMemSys(Size cbNeeded)
void InterfaceLib_PurgeSpace(InterfaceLib::Globals* globals, MachineState* state);		// void PurgeSpace(long * total, long * contig)
void InterfaceLib_PurgeSpaceContiguous(InterfaceLib::Globals* globals, MachineState* state);		// long PurgeSpaceContiguous(void)
void InterfaceLib_PurgeSpaceSysContiguous(InterfaceLib::Globals* globals, MachineState* state);		// long PurgeSpaceSysContiguous(void)
void InterfaceLib_PurgeSpaceSysTotal(InterfaceLib::Globals* globals, MachineState* state);		// long PurgeSpaceSysTotal(void)
void InterfaceLib_PurgeSpaceTotal(InterfaceLib::Globals* globals, MachineState* state);		// long PurgeSpaceTotal(void)
void InterfaceLib_ReallocateHandle(InterfaceLib::Globals* globals, MachineState* state);		// void ReallocateHandle(Handle h, Size byteCount)
void InterfaceLib_ReallocateHandleSys(InterfaceLib::Globals* globals, MachineState* state);		// void ReallocateHandleSys(Handle h, Size byteCount)
void InterfaceLib_RecoverHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle RecoverHandle(Ptr p)
void InterfaceLib_RecoverHandleSys(InterfaceLib::Globals* globals, MachineState* state);		// Handle RecoverHandleSys(Ptr p)
void InterfaceLib_ReleaseMemoryData(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ReleaseMemoryData(void * address, unsigned long count)
void InterfaceLib_ReserveMem(InterfaceLib::Globals* globals, MachineState* state);		// void ReserveMem(Size cbNeeded)
void InterfaceLib_ReserveMemSys(InterfaceLib::Globals* globals, MachineState* state);		// void ReserveMemSys(Size cbNeeded)
void InterfaceLib_SetApplBase(InterfaceLib::Globals* globals, MachineState* state);		// void SetApplBase(void * startPtr)
void InterfaceLib_SetApplLimit(InterfaceLib::Globals* globals, MachineState* state);		// void SetApplLimit(void * zoneLimit)
void InterfaceLib_SetGrowZone(InterfaceLib::Globals* globals, MachineState* state);		// void SetGrowZone(GrowZoneUPP growZone)
void InterfaceLib_SetHandleSize(InterfaceLib::Globals* globals, MachineState* state);		// void SetHandleSize(Handle h, Size newSize)
void InterfaceLib_SetPtrSize(InterfaceLib::Globals* globals, MachineState* state);		// void SetPtrSize(Ptr p, Size newSize)
void InterfaceLib_SetZone(InterfaceLib::Globals* globals, MachineState* state);		// void SetZone(THz hz)
void InterfaceLib_StackSpace(InterfaceLib::Globals* globals, MachineState* state);		// long StackSpace(void)
void InterfaceLib_SystemZone(InterfaceLib::Globals* globals, MachineState* state);		// THz SystemZone(void)
void InterfaceLib_TempDisposeHandle(InterfaceLib::Globals* globals, MachineState* state);		// void TempDisposeHandle(Handle h, OSErr * resultCode)
void InterfaceLib_TempFreeMem(InterfaceLib::Globals* globals, MachineState* state);		// long TempFreeMem(void)
void InterfaceLib_TempHLock(InterfaceLib::Globals* globals, MachineState* state);		// void TempHLock(Handle h, OSErr * resultCode)
void InterfaceLib_TempHUnlock(InterfaceLib::Globals* globals, MachineState* state);		// void TempHUnlock(Handle h, OSErr * resultCode)
void InterfaceLib_TempMaxMem(InterfaceLib::Globals* globals, MachineState* state);		// Size TempMaxMem(Size * grow)
void InterfaceLib_TempNewHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle TempNewHandle(Size logicalSize, OSErr * resultCode)
void InterfaceLib_TempTopMem(InterfaceLib::Globals* globals, MachineState* state);		// Ptr TempTopMem(void)
void InterfaceLib_TopMem(InterfaceLib::Globals* globals, MachineState* state);		// Ptr TopMem(void)
void InterfaceLib_UnholdMemory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UnholdMemory(void * address, unsigned long count)
void InterfaceLib_UnlockMemory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UnlockMemory(void * address, unsigned long count)

/* MacTypes */
void InterfaceLib_Debugger(InterfaceLib::Globals* globals, MachineState* state);		// void Debugger(void)
void InterfaceLib_DebugStr(InterfaceLib::Globals* globals, MachineState* state);		// void DebugStr(ConstStr255Param debuggerMsg)
void InterfaceLib_SysBreak(InterfaceLib::Globals* globals, MachineState* state);		// void SysBreak(void)
void InterfaceLib_SysBreakFunc(InterfaceLib::Globals* globals, MachineState* state);		// void SysBreakFunc(ConstStr255Param debuggerMsg)
void InterfaceLib_SysBreakStr(InterfaceLib::Globals* globals, MachineState* state);		// void SysBreakStr(ConstStr255Param debuggerMsg)

/* MacWindows */
void InterfaceLib_BeginUpdate(InterfaceLib::Globals* globals, MachineState* state);		// void BeginUpdate(WindowRef window)
void InterfaceLib_BringToFront(InterfaceLib::Globals* globals, MachineState* state);		// void BringToFront(WindowRef window)
void InterfaceLib_CalcVis(InterfaceLib::Globals* globals, MachineState* state);		// void CalcVis(WindowRef window)
void InterfaceLib_CalcVisBehind(InterfaceLib::Globals* globals, MachineState* state);		// void CalcVisBehind(WindowRef startWindow, /* can be NULL */ RgnHandle clobberedRgn)
void InterfaceLib_CheckUpdate(InterfaceLib::Globals* globals, MachineState* state);		// Boolean CheckUpdate(EventRecord * theEvent)
void InterfaceLib_ClipAbove(InterfaceLib::Globals* globals, MachineState* state);		// void ClipAbove(WindowRef window)
void InterfaceLib_DisposeWindow(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeWindow(WindowRef window)
void InterfaceLib_DragGrayRgn(InterfaceLib::Globals* globals, MachineState* state);		// long DragGrayRgn(RgnHandle theRgn, Point startPt, const Rect * limitRect, const Rect * slopRect, short axis, DragGrayRgnUPP actionProc)
void InterfaceLib_DragTheRgn(InterfaceLib::Globals* globals, MachineState* state);		// long DragTheRgn(RgnHandle theRgn, Point startPt, const Rect * limitRect, const Rect * slopRect, short axis, DragGrayRgnUPP actionProc)
void InterfaceLib_DragWindow(InterfaceLib::Globals* globals, MachineState* state);		// void DragWindow(WindowRef window, Point startPt, const Rect * boundsRect)
void InterfaceLib_DrawGrowIcon(InterfaceLib::Globals* globals, MachineState* state);		// void DrawGrowIcon(WindowRef window)
void InterfaceLib_DrawNew(InterfaceLib::Globals* globals, MachineState* state);		// void DrawNew(WindowRef window, Boolean update)
void InterfaceLib_EndUpdate(InterfaceLib::Globals* globals, MachineState* state);		// void EndUpdate(WindowRef window)
void InterfaceLib_FrontWindow(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef FrontWindow(void)
void InterfaceLib_GetAuxWin(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetAuxWin(WindowRef window, AuxWinHandle * awHndl)
void InterfaceLib_GetCWMgrPort(InterfaceLib::Globals* globals, MachineState* state);		// void GetCWMgrPort(CGrafPtr * wMgrCPort)
void InterfaceLib_GetGrayRgn(InterfaceLib::Globals* globals, MachineState* state);		// RgnHandle GetGrayRgn(void)
void InterfaceLib_GetNewCWindow(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef GetNewCWindow(short windowID, void * wStorage, WindowRef behind)
void InterfaceLib_GetNewWindow(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef GetNewWindow(short windowID, void * wStorage, WindowRef behind)
void InterfaceLib_GetWindowPic(InterfaceLib::Globals* globals, MachineState* state);		// PicHandle GetWindowPic(WindowRef window)
void InterfaceLib_GetWMgrPort(InterfaceLib::Globals* globals, MachineState* state);		// void GetWMgrPort(GrafPtr * wPort)
void InterfaceLib_GetWRefCon(InterfaceLib::Globals* globals, MachineState* state);		// long GetWRefCon(WindowRef window)
void InterfaceLib_GetWTitle(InterfaceLib::Globals* globals, MachineState* state);		// void GetWTitle(WindowRef window, Str255 title)
void InterfaceLib_GetWVariant(InterfaceLib::Globals* globals, MachineState* state);		// short GetWVariant(WindowRef window)
void InterfaceLib_GrowWindow(InterfaceLib::Globals* globals, MachineState* state);		// long GrowWindow(WindowRef window, Point startPt, const Rect * bBox)
void InterfaceLib_HideWindow(InterfaceLib::Globals* globals, MachineState* state);		// void HideWindow(WindowRef window)
void InterfaceLib_HiliteWindow(InterfaceLib::Globals* globals, MachineState* state);		// void HiliteWindow(WindowRef window, Boolean fHilite)
void InterfaceLib_InitWindows(InterfaceLib::Globals* globals, MachineState* state);		// void InitWindows(void)
void InterfaceLib_InvalRect(InterfaceLib::Globals* globals, MachineState* state);		// void InvalRect(const Rect * badRect)
void InterfaceLib_InvalRgn(InterfaceLib::Globals* globals, MachineState* state);		// void InvalRgn(RgnHandle badRgn)
void InterfaceLib_NewCWindow(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef NewCWindow(void * wStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, short procID, WindowRef behind, Boolean goAwayFlag, long refCon)
void InterfaceLib_NewWindow(InterfaceLib::Globals* globals, MachineState* state);		// WindowRef NewWindow(void * wStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, short theProc, WindowRef behind, Boolean goAwayFlag, long refCon)
void InterfaceLib_PaintBehind(InterfaceLib::Globals* globals, MachineState* state);		// void PaintBehind(WindowRef startWindow, /* can be NULL */ RgnHandle clobberedRgn)
void InterfaceLib_PaintOne(InterfaceLib::Globals* globals, MachineState* state);		// void PaintOne(WindowRef window, /* can be NULL */ RgnHandle clobberedRgn)
void InterfaceLib_PinRect(InterfaceLib::Globals* globals, MachineState* state);		// long PinRect(const Rect * theRect, Point thePt)
void InterfaceLib_SaveOld(InterfaceLib::Globals* globals, MachineState* state);		// void SaveOld(WindowRef window)
void InterfaceLib_SelectWindow(InterfaceLib::Globals* globals, MachineState* state);		// void SelectWindow(WindowRef window)
void InterfaceLib_SendBehind(InterfaceLib::Globals* globals, MachineState* state);		// void SendBehind(WindowRef window, WindowRef behindWindow)
void InterfaceLib_SetDeskCPat(InterfaceLib::Globals* globals, MachineState* state);		// void SetDeskCPat(PixPatHandle deskPixPat)
void InterfaceLib_SetWinColor(InterfaceLib::Globals* globals, MachineState* state);		// void SetWinColor(WindowRef window, WCTabHandle newColorTable)
void InterfaceLib_SetWindowPic(InterfaceLib::Globals* globals, MachineState* state);		// void SetWindowPic(WindowRef window, PicHandle pic)
void InterfaceLib_SetWRefCon(InterfaceLib::Globals* globals, MachineState* state);		// void SetWRefCon(WindowRef window, long data)
void InterfaceLib_SetWTitle(InterfaceLib::Globals* globals, MachineState* state);		// void SetWTitle(WindowRef window, ConstStr255Param title)
void InterfaceLib_ShowHide(InterfaceLib::Globals* globals, MachineState* state);		// void ShowHide(WindowRef window, Boolean showFlag)
void InterfaceLib_SizeWindow(InterfaceLib::Globals* globals, MachineState* state);		// void SizeWindow(WindowRef window, short w, short h, Boolean fUpdate)
void InterfaceLib_TrackBox(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TrackBox(WindowRef window, Point thePt, WindowPartCode partCode)
void InterfaceLib_TrackGoAway(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TrackGoAway(WindowRef window, Point thePt)
void InterfaceLib_ValidRect(InterfaceLib::Globals* globals, MachineState* state);		// void ValidRect(const Rect * goodRect)
void InterfaceLib_ValidRgn(InterfaceLib::Globals* globals, MachineState* state);		// void ValidRgn(RgnHandle goodRgn)
void InterfaceLib_ZoomWindow(InterfaceLib::Globals* globals, MachineState* state);		// void ZoomWindow(WindowRef window, WindowPartCode partCode, Boolean front)

/* MachineExceptions */
void InterfaceLib_InstallExceptionHandler(InterfaceLib::Globals* globals, MachineState* state);		// ExceptionHandlerTPP InstallExceptionHandler(ExceptionHandlerTPP theHandler)

/* Menus */
void InterfaceLib_AppendResMenu(InterfaceLib::Globals* globals, MachineState* state);		// void AppendResMenu(MenuRef theMenu, ResType theType)
void InterfaceLib_CalcMenuSize(InterfaceLib::Globals* globals, MachineState* state);		// void CalcMenuSize(MenuRef theMenu)
void InterfaceLib_CheckItem(InterfaceLib::Globals* globals, MachineState* state);		// void CheckItem(MenuRef theMenu, short item, Boolean checked)
void InterfaceLib_ClearMenuBar(InterfaceLib::Globals* globals, MachineState* state);		// void ClearMenuBar(void)
void InterfaceLib_CountMItems(InterfaceLib::Globals* globals, MachineState* state);		// short CountMItems(MenuRef theMenu)
void InterfaceLib_DeleteMCEntries(InterfaceLib::Globals* globals, MachineState* state);		// void DeleteMCEntries(MenuID menuID, short menuItem)
void InterfaceLib_DeleteMenuItem(InterfaceLib::Globals* globals, MachineState* state);		// void DeleteMenuItem(MenuRef theMenu, short item)
void InterfaceLib_DisableItem(InterfaceLib::Globals* globals, MachineState* state);		// void DisableItem(MenuRef theMenu, short item)
void InterfaceLib_DisposeMCInfo(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeMCInfo(MCTableHandle menuCTbl)
void InterfaceLib_DisposeMenu(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeMenu(MenuRef theMenu)
void InterfaceLib_EnableItem(InterfaceLib::Globals* globals, MachineState* state);		// void EnableItem(MenuRef theMenu, short item)
void InterfaceLib_FlashMenuBar(InterfaceLib::Globals* globals, MachineState* state);		// void FlashMenuBar(MenuID menuID)
void InterfaceLib_GetItemCmd(InterfaceLib::Globals* globals, MachineState* state);		// void GetItemCmd(MenuRef theMenu, short item, CharParameter * cmdChar)
void InterfaceLib_GetItemIcon(InterfaceLib::Globals* globals, MachineState* state);		// void GetItemIcon(MenuRef theMenu, short item, short * iconIndex)
void InterfaceLib_GetItemMark(InterfaceLib::Globals* globals, MachineState* state);		// void GetItemMark(MenuRef theMenu, short item, CharParameter * markChar)
void InterfaceLib_GetItemStyle(InterfaceLib::Globals* globals, MachineState* state);		// void GetItemStyle(MenuRef theMenu, short item, Style * chStyle)
void InterfaceLib_GetMBarHeight(InterfaceLib::Globals* globals, MachineState* state);		// short GetMBarHeight(void)
void InterfaceLib_GetMCEntry(InterfaceLib::Globals* globals, MachineState* state);		// MCEntryPtr GetMCEntry(MenuID menuID, short menuItem)
void InterfaceLib_GetMCInfo(InterfaceLib::Globals* globals, MachineState* state);		// MCTableHandle GetMCInfo(void)
void InterfaceLib_GetMenuBar(InterfaceLib::Globals* globals, MachineState* state);		// MenuBarHandle GetMenuBar(void)
void InterfaceLib_GetMenuHandle(InterfaceLib::Globals* globals, MachineState* state);		// MenuRef GetMenuHandle(MenuID menuID)
void InterfaceLib_GetMenuItemText(InterfaceLib::Globals* globals, MachineState* state);		// void GetMenuItemText(MenuRef theMenu, short item, Str255 itemString)
void InterfaceLib_GetNewMBar(InterfaceLib::Globals* globals, MachineState* state);		// MenuBarHandle GetNewMBar(short menuBarID)
void InterfaceLib_HiliteMenu(InterfaceLib::Globals* globals, MachineState* state);		// void HiliteMenu(MenuID menuID)
void InterfaceLib_InitMenus(InterfaceLib::Globals* globals, MachineState* state);		// void InitMenus(void)
void InterfaceLib_InitProcMenu(InterfaceLib::Globals* globals, MachineState* state);		// void InitProcMenu(short resID)
void InterfaceLib_InsertFontResMenu(InterfaceLib::Globals* globals, MachineState* state);		// void InsertFontResMenu(MenuRef theMenu, short afterItem, short scriptFilter)
void InterfaceLib_InsertIntlResMenu(InterfaceLib::Globals* globals, MachineState* state);		// void InsertIntlResMenu(MenuRef theMenu, ResType theType, short afterItem, short scriptFilter)
void InterfaceLib_InsertResMenu(InterfaceLib::Globals* globals, MachineState* state);		// void InsertResMenu(MenuRef theMenu, ResType theType, short afterItem)
void InterfaceLib_InvalMenuBar(InterfaceLib::Globals* globals, MachineState* state);		// void InvalMenuBar(void)
void InterfaceLib_LMGetTheMenu(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetTheMenu(void)
void InterfaceLib_MenuChoice(InterfaceLib::Globals* globals, MachineState* state);		// long MenuChoice(void)
void InterfaceLib_MenuKey(InterfaceLib::Globals* globals, MachineState* state);		// long MenuKey(CharParameter ch)
void InterfaceLib_MenuSelect(InterfaceLib::Globals* globals, MachineState* state);		// long MenuSelect(Point startPt)
void InterfaceLib_NewMenu(InterfaceLib::Globals* globals, MachineState* state);		// MenuRef NewMenu(MenuID menuID, ConstStr255Param menuTitle)
void InterfaceLib_PopUpMenuSelect(InterfaceLib::Globals* globals, MachineState* state);		// long PopUpMenuSelect(MenuRef menu, short top, short left, short popUpItem)
void InterfaceLib_SetItemCmd(InterfaceLib::Globals* globals, MachineState* state);		// void SetItemCmd(MenuRef theMenu, short item, CharParameter cmdChar)
void InterfaceLib_SetItemIcon(InterfaceLib::Globals* globals, MachineState* state);		// void SetItemIcon(MenuRef theMenu, short item, short iconIndex)
void InterfaceLib_SetItemMark(InterfaceLib::Globals* globals, MachineState* state);		// void SetItemMark(MenuRef theMenu, short item, CharParameter markChar)
void InterfaceLib_SetItemStyle(InterfaceLib::Globals* globals, MachineState* state);		// void SetItemStyle(MenuRef theMenu, short item, StyleParameter chStyle)
void InterfaceLib_SetMCEntries(InterfaceLib::Globals* globals, MachineState* state);		// void SetMCEntries(short numEntries, MCTablePtr menuCEntries)
void InterfaceLib_SetMCInfo(InterfaceLib::Globals* globals, MachineState* state);		// void SetMCInfo(MCTableHandle menuCTbl)
void InterfaceLib_SetMenuBar(InterfaceLib::Globals* globals, MachineState* state);		// void SetMenuBar(MenuBarHandle mbar)
void InterfaceLib_SetMenuFlash(InterfaceLib::Globals* globals, MachineState* state);		// void SetMenuFlash(short count)
void InterfaceLib_SetMenuItemText(InterfaceLib::Globals* globals, MachineState* state);		// void SetMenuItemText(MenuRef theMenu, short item, ConstStr255Param itemString)
void InterfaceLib_SystemEdit(InterfaceLib::Globals* globals, MachineState* state);		// Boolean SystemEdit(short editCmd)
void InterfaceLib_SystemMenu(InterfaceLib::Globals* globals, MachineState* state);		// void SystemMenu(long menuResult)

/* MixedMode */
void InterfaceLib_NewFatRoutineDescriptor(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr NewFatRoutineDescriptor(ProcPtr theM68kProc, ProcPtr thePowerPCProc, ProcInfoType theProcInfo)

/* Notification */
void InterfaceLib_NMInstall(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NMInstall(NMRecPtr nmReqPtr)
void InterfaceLib_NMRemove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NMRemove(NMRecPtr nmReqPtr)

/* NumberFormatting */
void InterfaceLib_ExtendedToString(InterfaceLib::Globals* globals, MachineState* state);		// FormatStatus ExtendedToString(const extended80 * x, const NumFormatString * myCanonical, const NumberParts * partsTable, Str255 outString)
void InterfaceLib_FormatRecToString(InterfaceLib::Globals* globals, MachineState* state);		// FormatStatus FormatRecToString(const NumFormatString * myCanonical, const NumberParts * partsTable, Str255 outString, TripleInt positions)
void InterfaceLib_NumToString(InterfaceLib::Globals* globals, MachineState* state);		// void NumToString(long theNum, Str255 theString)
void InterfaceLib_StringToExtended(InterfaceLib::Globals* globals, MachineState* state);		// FormatStatus StringToExtended(ConstStr255Param source, const NumFormatString * myCanonical, const NumberParts * partsTable, extended80 * x)
void InterfaceLib_StringToFormatRec(InterfaceLib::Globals* globals, MachineState* state);		// FormatStatus StringToFormatRec(ConstStr255Param inString, const NumberParts * partsTable, NumFormatString * outString)
void InterfaceLib_StringToNum(InterfaceLib::Globals* globals, MachineState* state);		// void StringToNum(ConstStr255Param theString, long * theNum)

/* OSUtils */
void InterfaceLib_Delay(InterfaceLib::Globals* globals, MachineState* state);		// void Delay(unsigned long numTicks, unsigned long * finalTicks)
void InterfaceLib_Dequeue(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Dequeue(QElemPtr qElement, QHdrPtr qHeader)
void InterfaceLib_DTInstall(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DTInstall(DeferredTaskPtr dtTaskPtr)
void InterfaceLib_Enqueue(InterfaceLib::Globals* globals, MachineState* state);		// void Enqueue(QElemPtr qElement, QHdrPtr qHeader)
void InterfaceLib_FlushCodeCacheRange(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FlushCodeCacheRange(void * address, unsigned long count)
void InterfaceLib_GetSysPPtr(InterfaceLib::Globals* globals, MachineState* state);		// SysPPtr GetSysPPtr(void)
void InterfaceLib_InitUtil(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InitUtil(void)
void InterfaceLib_IsMetric(InterfaceLib::Globals* globals, MachineState* state);		// Boolean IsMetric(void)
void InterfaceLib_MakeDataExecutable(InterfaceLib::Globals* globals, MachineState* state);		// void MakeDataExecutable(void * baseAddress, unsigned long length)
void InterfaceLib_ReadLocation(InterfaceLib::Globals* globals, MachineState* state);		// void ReadLocation(MachineLocation * loc)
void InterfaceLib_SetA5(InterfaceLib::Globals* globals, MachineState* state);		// long SetA5(long newA5)
void InterfaceLib_SetCurrentA5(InterfaceLib::Globals* globals, MachineState* state);		// long SetCurrentA5(void)
void InterfaceLib_SysEnvirons(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SysEnvirons(short versionRequested, SysEnvRec * theWorld)
void InterfaceLib_TickCount(InterfaceLib::Globals* globals, MachineState* state);		// UInt32 TickCount(void)
void InterfaceLib_WriteLocation(InterfaceLib::Globals* globals, MachineState* state);		// void WriteLocation(const MachineLocation * loc)
void InterfaceLib_WriteParam(InterfaceLib::Globals* globals, MachineState* state);		// OSErr WriteParam(void)

/* PPCToolbox */
void InterfaceLib_DeleteUserIdentity(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DeleteUserIdentity(unsigned long userRef)
void InterfaceLib_GetDefaultUser(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetDefaultUser(unsigned long * userRef, Str32 userName)
void InterfaceLib_IPCKillListPorts(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IPCKillListPorts(IPCListPortsPBPtr pb)
void InterfaceLib_IPCListPortsAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IPCListPortsAsync(IPCListPortsPBPtr pb)
void InterfaceLib_IPCListPortsSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr IPCListPortsSync(IPCListPortsPBPtr pb)
void InterfaceLib_PPCAcceptAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCAcceptAsync(PPCAcceptPBPtr pb)
void InterfaceLib_PPCAcceptSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCAcceptSync(PPCAcceptPBPtr pb)
void InterfaceLib_PPCBrowser(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCBrowser(ConstStr255Param prompt, ConstStr255Param applListLabel, Boolean defaultSpecified, LocationNameRec * theLocation, PortInfoRec * thePortInfo, PPCFilterUPP portFilter, ConstStr32Param theLocNBPType)
void InterfaceLib_PPCCloseAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCCloseAsync(PPCClosePBPtr pb)
void InterfaceLib_PPCCloseSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCCloseSync(PPCClosePBPtr pb)
void InterfaceLib_PPCEndAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCEndAsync(PPCEndPBPtr pb)
void InterfaceLib_PPCEndSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCEndSync(PPCEndPBPtr pb)
void InterfaceLib_PPCInformAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCInformAsync(PPCInformPBPtr pb)
void InterfaceLib_PPCInformSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCInformSync(PPCInformPBPtr pb)
void InterfaceLib_PPCInit(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCInit(void)
void InterfaceLib_PPCOpenAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCOpenAsync(PPCOpenPBPtr pb)
void InterfaceLib_PPCOpenSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCOpenSync(PPCOpenPBPtr pb)
void InterfaceLib_PPCReadAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCReadAsync(PPCReadPBPtr pb)
void InterfaceLib_PPCReadSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCReadSync(PPCReadPBPtr pb)
void InterfaceLib_PPCRejectAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCRejectAsync(PPCRejectPBPtr pb)
void InterfaceLib_PPCRejectSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCRejectSync(PPCRejectPBPtr pb)
void InterfaceLib_PPCStartAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCStartAsync(PPCStartPBPtr pb)
void InterfaceLib_PPCStartSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCStartSync(PPCStartPBPtr pb)
void InterfaceLib_PPCWriteAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCWriteAsync(PPCWritePBPtr pb)
void InterfaceLib_PPCWriteSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PPCWriteSync(PPCWritePBPtr pb)
void InterfaceLib_StartSecureSession(InterfaceLib::Globals* globals, MachineState* state);		// OSErr StartSecureSession(PPCStartPBPtr pb, Str32 userName, Boolean useDefault, Boolean allowGuest, Boolean * guestSelected, ConstStr255Param prompt)

/* Packages */
void InterfaceLib_InitAllPacks(InterfaceLib::Globals* globals, MachineState* state);		// void InitAllPacks(void)
void InterfaceLib_InitPack(InterfaceLib::Globals* globals, MachineState* state);		// void InitPack(short packID)

/* Palettes */
void InterfaceLib_ActivatePalette(InterfaceLib::Globals* globals, MachineState* state);		// void ActivatePalette(WindowRef srcWindow)
void InterfaceLib_AnimateEntry(InterfaceLib::Globals* globals, MachineState* state);		// void AnimateEntry(WindowRef dstWindow, short dstEntry, const RGBColor * srcRGB)
void InterfaceLib_CopyPalette(InterfaceLib::Globals* globals, MachineState* state);		// void CopyPalette(PaletteHandle srcPalette, PaletteHandle dstPalette, short srcEntry, short dstEntry, short dstLength)
void InterfaceLib_CTab2Palette(InterfaceLib::Globals* globals, MachineState* state);		// void CTab2Palette(CTabHandle srcCTab, PaletteHandle dstPalette, short srcUsage, short srcTolerance)
void InterfaceLib_DisposePalette(InterfaceLib::Globals* globals, MachineState* state);		// void DisposePalette(PaletteHandle srcPalette)
void InterfaceLib_Entry2Index(InterfaceLib::Globals* globals, MachineState* state);		// long Entry2Index(short entry)
void InterfaceLib_GetEntryColor(InterfaceLib::Globals* globals, MachineState* state);		// void GetEntryColor(PaletteHandle srcPalette, short srcEntry, RGBColor * dstRGB)
void InterfaceLib_GetEntryUsage(InterfaceLib::Globals* globals, MachineState* state);		// void GetEntryUsage(PaletteHandle srcPalette, short srcEntry, short * dstUsage, short * dstTolerance)
void InterfaceLib_GetGray(InterfaceLib::Globals* globals, MachineState* state);		// Boolean GetGray(GDHandle device, const RGBColor * backGround, RGBColor * foreGround)
void InterfaceLib_GetNewPalette(InterfaceLib::Globals* globals, MachineState* state);		// PaletteHandle GetNewPalette(short PaletteID)
void InterfaceLib_GetPalette(InterfaceLib::Globals* globals, MachineState* state);		// PaletteHandle GetPalette(WindowRef srcWindow)
void InterfaceLib_GetPaletteUpdates(InterfaceLib::Globals* globals, MachineState* state);		// short GetPaletteUpdates(PaletteHandle p)
void InterfaceLib_HasDepth(InterfaceLib::Globals* globals, MachineState* state);		// short HasDepth(GDHandle gd, short depth, short whichFlags, short flags)
void InterfaceLib_InitPalettes(InterfaceLib::Globals* globals, MachineState* state);		// void InitPalettes(void)
void InterfaceLib_NewPalette(InterfaceLib::Globals* globals, MachineState* state);		// PaletteHandle NewPalette(short entries, CTabHandle srcColors, short srcUsage, short srcTolerance)
void InterfaceLib_NSetPalette(InterfaceLib::Globals* globals, MachineState* state);		// void NSetPalette(WindowRef dstWindow, PaletteHandle srcPalette, short nCUpdates)
void InterfaceLib_Palette2CTab(InterfaceLib::Globals* globals, MachineState* state);		// void Palette2CTab(PaletteHandle srcPalette, CTabHandle dstCTab)
void InterfaceLib_PmBackColor(InterfaceLib::Globals* globals, MachineState* state);		// void PmBackColor(short dstEntry)
void InterfaceLib_PmForeColor(InterfaceLib::Globals* globals, MachineState* state);		// void PmForeColor(short dstEntry)
void InterfaceLib_PMgrVersion(InterfaceLib::Globals* globals, MachineState* state);		// short PMgrVersion(void)
void InterfaceLib_RestoreBack(InterfaceLib::Globals* globals, MachineState* state);		// void RestoreBack(const ColorSpec * c)
void InterfaceLib_RestoreDeviceClut(InterfaceLib::Globals* globals, MachineState* state);		// void RestoreDeviceClut(GDHandle gd)
void InterfaceLib_RestoreFore(InterfaceLib::Globals* globals, MachineState* state);		// void RestoreFore(const ColorSpec * c)
void InterfaceLib_SaveBack(InterfaceLib::Globals* globals, MachineState* state);		// void SaveBack(ColorSpec * c)
void InterfaceLib_SaveFore(InterfaceLib::Globals* globals, MachineState* state);		// void SaveFore(ColorSpec * c)
void InterfaceLib_SetDepth(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDepth(GDHandle gd, short depth, short whichFlags, short flags)
void InterfaceLib_SetEntryColor(InterfaceLib::Globals* globals, MachineState* state);		// void SetEntryColor(PaletteHandle dstPalette, short dstEntry, const RGBColor * srcRGB)
void InterfaceLib_SetEntryUsage(InterfaceLib::Globals* globals, MachineState* state);		// void SetEntryUsage(PaletteHandle dstPalette, short dstEntry, short srcUsage, short srcTolerance)
void InterfaceLib_SetPalette(InterfaceLib::Globals* globals, MachineState* state);		// void SetPalette(WindowRef dstWindow, PaletteHandle srcPalette, Boolean cUpdates)
void InterfaceLib_SetPaletteUpdates(InterfaceLib::Globals* globals, MachineState* state);		// void SetPaletteUpdates(PaletteHandle p, short updates)

/* Patches */
void InterfaceLib_GetOSTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr GetOSTrapAddress(UInt16 trapNum)
void InterfaceLib_GetToolboxTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr GetToolboxTrapAddress(UInt16 trapNum)
void InterfaceLib_GetToolTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr GetToolTrapAddress(UInt16 trapNum)
void InterfaceLib_GetTrapVector(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcHandle GetTrapVector(UInt16 trapNumber)
void InterfaceLib_NGetTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr NGetTrapAddress(UInt16 trapNum, TrapType tTyp)
void InterfaceLib_NSetTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// void NSetTrapAddress(UniversalProcPtr trapAddr, UInt16 trapNum, TrapType tTyp)
void InterfaceLib_SetOSTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// void SetOSTrapAddress(UniversalProcPtr trapAddr, UInt16 trapNum)
void InterfaceLib_SetToolboxTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// void SetToolboxTrapAddress(UniversalProcPtr trapAddr, UInt16 trapNum)
void InterfaceLib_SetToolTrapAddress(InterfaceLib::Globals* globals, MachineState* state);		// void SetToolTrapAddress(UniversalProcPtr trapAddr, UInt16 trapNum)

/* PictUtils */
void InterfaceLib_DisposePictInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DisposePictInfo(PictInfoID thePictInfoID)
void InterfaceLib_GetPictInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetPictInfo(PicHandle thePictHandle, PictInfo * thePictInfo, short verb, short colorsRequested, short colorPickMethod, short version)
void InterfaceLib_GetPixMapInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetPixMapInfo(PixMapHandle thePixMapHandle, PictInfo * thePictInfo, short verb, short colorsRequested, short colorPickMethod, short version)
void InterfaceLib_NewPictInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewPictInfo(PictInfoID * thePictInfoID, short verb, short colorsRequested, short colorPickMethod, short version)
void InterfaceLib_RecordPictInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RecordPictInfo(PictInfoID thePictInfoID, PicHandle thePictHandle)
void InterfaceLib_RecordPixMapInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RecordPixMapInfo(PictInfoID thePictInfoID, PixMapHandle thePixMapHandle)
void InterfaceLib_RetrievePictInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RetrievePictInfo(PictInfoID thePictInfoID, PictInfo * thePictInfo, short colorsRequested)

/* Power */
void InterfaceLib_AOff(InterfaceLib::Globals* globals, MachineState* state);		// void AOff(void)
void InterfaceLib_AOn(InterfaceLib::Globals* globals, MachineState* state);		// void AOn(void)
void InterfaceLib_AOnIgnoreModem(InterfaceLib::Globals* globals, MachineState* state);		// void AOnIgnoreModem(void)
void InterfaceLib_BatteryStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr BatteryStatus(Byte * status, Byte * power)
void InterfaceLib_BOff(InterfaceLib::Globals* globals, MachineState* state);		// void BOff(void)
void InterfaceLib_BOn(InterfaceLib::Globals* globals, MachineState* state);		// void BOn(void)
void InterfaceLib_DisableIdle(InterfaceLib::Globals* globals, MachineState* state);		// void DisableIdle(void)
void InterfaceLib_DisableWUTime(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DisableWUTime(void)
void InterfaceLib_EnableIdle(InterfaceLib::Globals* globals, MachineState* state);		// void EnableIdle(void)
void InterfaceLib_GetCPUSpeed(InterfaceLib::Globals* globals, MachineState* state);		// long GetCPUSpeed(void)
void InterfaceLib_GetWUTime(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetWUTime(long * wuTime, Byte * wuFlag)
void InterfaceLib_IdleUpdate(InterfaceLib::Globals* globals, MachineState* state);		// long IdleUpdate(void)
void InterfaceLib_ModemStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ModemStatus(Byte * status)
void InterfaceLib_SetWUTime(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetWUTime(long wuTime)
void InterfaceLib_SleepQInstall(InterfaceLib::Globals* globals, MachineState* state);		// void SleepQInstall(SleepQRecPtr qRecPtr)
void InterfaceLib_SleepQRemove(InterfaceLib::Globals* globals, MachineState* state);		// void SleepQRemove(SleepQRecPtr qRecPtr)

/* Printing */
void InterfaceLib_PrClose(InterfaceLib::Globals* globals, MachineState* state);		// void PrClose(void)
void InterfaceLib_PrCloseDoc(InterfaceLib::Globals* globals, MachineState* state);		// void PrCloseDoc(TPPrPort pPrPort)
void InterfaceLib_PrClosePage(InterfaceLib::Globals* globals, MachineState* state);		// void PrClosePage(TPPrPort pPrPort)
void InterfaceLib_PrCtlCall(InterfaceLib::Globals* globals, MachineState* state);		// void PrCtlCall(short iWhichCtl, long lParam1, long lParam2, long lParam3)
void InterfaceLib_PrDlgMain(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PrDlgMain(THPrint hPrint, PDlgInitUPP pDlgInit)
void InterfaceLib_PrDrvrClose(InterfaceLib::Globals* globals, MachineState* state);		// void PrDrvrClose(void)
void InterfaceLib_PrDrvrDCE(InterfaceLib::Globals* globals, MachineState* state);		// Handle PrDrvrDCE(void)
void InterfaceLib_PrDrvrOpen(InterfaceLib::Globals* globals, MachineState* state);		// void PrDrvrOpen(void)
void InterfaceLib_PrDrvrVers(InterfaceLib::Globals* globals, MachineState* state);		// short PrDrvrVers(void)
void InterfaceLib_PrError(InterfaceLib::Globals* globals, MachineState* state);		// short PrError(void)
void InterfaceLib_PrGeneral(InterfaceLib::Globals* globals, MachineState* state);		// void PrGeneral(Ptr pData)
void InterfaceLib_PrintDefault(InterfaceLib::Globals* globals, MachineState* state);		// void PrintDefault(THPrint hPrint)
void InterfaceLib_PrJobDialog(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PrJobDialog(THPrint hPrint)
void InterfaceLib_PrJobInit(InterfaceLib::Globals* globals, MachineState* state);		// TPPrDlgRef PrJobInit(THPrint hPrint)
void InterfaceLib_PrJobMerge(InterfaceLib::Globals* globals, MachineState* state);		// void PrJobMerge(THPrint hPrintSrc, THPrint hPrintDst)
void InterfaceLib_PrLoadDriver(InterfaceLib::Globals* globals, MachineState* state);		// short PrLoadDriver(void)
void InterfaceLib_PrNoPurge(InterfaceLib::Globals* globals, MachineState* state);		// void PrNoPurge(void)
void InterfaceLib_PrOpen(InterfaceLib::Globals* globals, MachineState* state);		// void PrOpen(void)
void InterfaceLib_PrOpenDoc(InterfaceLib::Globals* globals, MachineState* state);		// TPPrPort PrOpenDoc(THPrint hPrint, TPPrPort pPrPort, /* can be NULL */ Ptr pIOBuf)
void InterfaceLib_PrOpenPage(InterfaceLib::Globals* globals, MachineState* state);		// void PrOpenPage(TPPrPort pPrPort, TPRect pPageFrame)
void InterfaceLib_PrPicFile(InterfaceLib::Globals* globals, MachineState* state);		// void PrPicFile(THPrint hPrint, TPPrPort pPrPort, Ptr pIOBuf, Ptr pDevBuf, TPPrStatus prStatus)
void InterfaceLib_PrPurge(InterfaceLib::Globals* globals, MachineState* state);		// void PrPurge(void)
void InterfaceLib_PrSetError(InterfaceLib::Globals* globals, MachineState* state);		// void PrSetError(short iErr)
void InterfaceLib_PrStlDialog(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PrStlDialog(THPrint hPrint)
void InterfaceLib_PrStlInit(InterfaceLib::Globals* globals, MachineState* state);		// TPPrDlgRef PrStlInit(THPrint hPrint)
void InterfaceLib_PrValidate(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PrValidate(THPrint hPrint)

/* Processes */
void InterfaceLib_ExitToShell(InterfaceLib::Globals* globals, MachineState* state);		// void ExitToShell(void)
void InterfaceLib_GetFrontProcess(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFrontProcess(ProcessSerialNumber * PSN)
void InterfaceLib_GetNextProcess(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetNextProcess(ProcessSerialNumber * PSN)
void InterfaceLib_GetProcessInformation(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetProcessInformation(const ProcessSerialNumber * PSN, ProcessInfoRec * info)
void InterfaceLib_LaunchApplication(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LaunchApplication(LaunchPBPtr LaunchParams)
void InterfaceLib_LaunchControlPanel(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LaunchControlPanel(const FSSpec * pFileSpec)
void InterfaceLib_LaunchDeskAccessory(InterfaceLib::Globals* globals, MachineState* state);		// OSErr LaunchDeskAccessory(const FSSpec * pFileSpec, ConstStr255Param pDAName)
void InterfaceLib_SameProcess(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SameProcess(const ProcessSerialNumber * PSN1, const ProcessSerialNumber * PSN2, Boolean * result)
void InterfaceLib_SetFrontProcess(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetFrontProcess(const ProcessSerialNumber * PSN)
void InterfaceLib_WakeUpProcess(InterfaceLib::Globals* globals, MachineState* state);		// OSErr WakeUpProcess(const ProcessSerialNumber * PSN)

/* QDOffscreen */
void InterfaceLib_AllowPurgePixels(InterfaceLib::Globals* globals, MachineState* state);		// void AllowPurgePixels(PixMapHandle pm)
void InterfaceLib_CTabChanged(InterfaceLib::Globals* globals, MachineState* state);		// void CTabChanged(CTabHandle ctab)
void InterfaceLib_DisposeGWorld(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeGWorld(GWorldPtr offscreenGWorld)
void InterfaceLib_DisposeScreenBuffer(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeScreenBuffer(PixMapHandle offscreenPixMap)
void InterfaceLib_GDeviceChanged(InterfaceLib::Globals* globals, MachineState* state);		// void GDeviceChanged(GDHandle gdh)
void InterfaceLib_GetGWorld(InterfaceLib::Globals* globals, MachineState* state);		// void GetGWorld(CGrafPtr * port, GDHandle * gdh)
void InterfaceLib_GetGWorldDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle GetGWorldDevice(GWorldPtr offscreenGWorld)
void InterfaceLib_GetGWorldPixMap(InterfaceLib::Globals* globals, MachineState* state);		// PixMapHandle GetGWorldPixMap(GWorldPtr offscreenGWorld)
void InterfaceLib_GetPixBaseAddr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr GetPixBaseAddr(PixMapHandle pm)
void InterfaceLib_GetPixelsState(InterfaceLib::Globals* globals, MachineState* state);		// GWorldFlags GetPixelsState(PixMapHandle pm)
void InterfaceLib_GetPixRowBytes(InterfaceLib::Globals* globals, MachineState* state);		// long GetPixRowBytes(PixMapHandle pm)
void InterfaceLib_LockPixels(InterfaceLib::Globals* globals, MachineState* state);		// Boolean LockPixels(PixMapHandle pm)
void InterfaceLib_NewGWorld(InterfaceLib::Globals* globals, MachineState* state);		// QDErr NewGWorld(GWorldPtr * offscreenGWorld, short PixelDepth, const Rect * boundsRect, CTabHandle cTable, /* can be NULL */ GDHandle aGDevice, /* can be NULL */ GWorldFlags flags)
void InterfaceLib_NewScreenBuffer(InterfaceLib::Globals* globals, MachineState* state);		// QDErr NewScreenBuffer(const Rect * globalRect, Boolean purgeable, GDHandle * gdh, PixMapHandle * offscreenPixMap)
void InterfaceLib_NewTempScreenBuffer(InterfaceLib::Globals* globals, MachineState* state);		// QDErr NewTempScreenBuffer(const Rect * globalRect, Boolean purgeable, GDHandle * gdh, PixMapHandle * offscreenPixMap)
void InterfaceLib_NoPurgePixels(InterfaceLib::Globals* globals, MachineState* state);		// void NoPurgePixels(PixMapHandle pm)
void InterfaceLib_OffscreenVersion(InterfaceLib::Globals* globals, MachineState* state);		// long OffscreenVersion(void)
void InterfaceLib_PixMap32Bit(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PixMap32Bit(PixMapHandle pmHandle)
void InterfaceLib_PixPatChanged(InterfaceLib::Globals* globals, MachineState* state);		// void PixPatChanged(PixPatHandle ppat)
void InterfaceLib_PortChanged(InterfaceLib::Globals* globals, MachineState* state);		// void PortChanged(GrafPtr port)
void InterfaceLib_QDDone(InterfaceLib::Globals* globals, MachineState* state);		// Boolean QDDone(GrafPtr port)
void InterfaceLib_SetGWorld(InterfaceLib::Globals* globals, MachineState* state);		// void SetGWorld(CGrafPtr port, GDHandle gdh)
void InterfaceLib_SetPixelsState(InterfaceLib::Globals* globals, MachineState* state);		// void SetPixelsState(PixMapHandle pm, GWorldFlags state)
void InterfaceLib_UnlockPixels(InterfaceLib::Globals* globals, MachineState* state);		// void UnlockPixels(PixMapHandle pm)
void InterfaceLib_UpdateGWorld(InterfaceLib::Globals* globals, MachineState* state);		// GWorldFlags UpdateGWorld(GWorldPtr * offscreenGWorld, short pixelDepth, const Rect * boundsRect, CTabHandle cTable, GDHandle aGDevice, /* can be NULL */ GWorldFlags flags)

/* Quickdraw */
void InterfaceLib_AddComp(InterfaceLib::Globals* globals, MachineState* state);		// void AddComp(ColorComplementUPP compProc)
void InterfaceLib_AddPt(InterfaceLib::Globals* globals, MachineState* state);		// void AddPt(Point src, Point * dst)
void InterfaceLib_AddSearch(InterfaceLib::Globals* globals, MachineState* state);		// void AddSearch(ColorSearchUPP searchProc)
void InterfaceLib_AllocCursor(InterfaceLib::Globals* globals, MachineState* state);		// void AllocCursor(void)
void InterfaceLib_AngleFromSlope(InterfaceLib::Globals* globals, MachineState* state);		// short AngleFromSlope(Fixed slope)
void InterfaceLib_BackColor(InterfaceLib::Globals* globals, MachineState* state);		// void BackColor(long color)
void InterfaceLib_BackPat(InterfaceLib::Globals* globals, MachineState* state);		// void BackPat(const Pattern * pat)
void InterfaceLib_BackPixPat(InterfaceLib::Globals* globals, MachineState* state);		// void BackPixPat(PixPatHandle pp)
void InterfaceLib_BitMapToRegion(InterfaceLib::Globals* globals, MachineState* state);		// OSErr BitMapToRegion(RgnHandle region, const BitMap * bMap)
void InterfaceLib_CalcCMask(InterfaceLib::Globals* globals, MachineState* state);		// void CalcCMask(const BitMap * srcBits, const BitMap * dstBits, const Rect * srcRect, const Rect * dstRect, const RGBColor * seedRGB, ColorSearchUPP matchProc, long matchData)
void InterfaceLib_CalcMask(InterfaceLib::Globals* globals, MachineState* state);		// void CalcMask(const void * srcPtr, void * dstPtr, short srcRow, short dstRow, short height, short words)
void InterfaceLib_ClipRect(InterfaceLib::Globals* globals, MachineState* state);		// void ClipRect(const Rect * r)
void InterfaceLib_CloseCPort(InterfaceLib::Globals* globals, MachineState* state);		// void CloseCPort(CGrafPtr port)
void InterfaceLib_CloseCursorComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseCursorComponent(ComponentInstance ci)
void InterfaceLib_ClosePicture(InterfaceLib::Globals* globals, MachineState* state);		// void ClosePicture(void)
void InterfaceLib_ClosePoly(InterfaceLib::Globals* globals, MachineState* state);		// void ClosePoly(void)
void InterfaceLib_ClosePort(InterfaceLib::Globals* globals, MachineState* state);		// void ClosePort(GrafPtr port)
void InterfaceLib_CloseRgn(InterfaceLib::Globals* globals, MachineState* state);		// void CloseRgn(RgnHandle dstRgn)
void InterfaceLib_Color2Index(InterfaceLib::Globals* globals, MachineState* state);		// long Color2Index(const RGBColor * myColor)
void InterfaceLib_ColorBit(InterfaceLib::Globals* globals, MachineState* state);		// void ColorBit(short whichBit)
void InterfaceLib_CopyBits(InterfaceLib::Globals* globals, MachineState* state);		// void CopyBits(const BitMap * srcBits, const BitMap * dstBits, const Rect * srcRect, const Rect * dstRect, short mode, RgnHandle maskRgn)
void InterfaceLib_CopyDeepMask(InterfaceLib::Globals* globals, MachineState* state);		// void CopyDeepMask(const BitMap * srcBits, const BitMap * maskBits, const BitMap * dstBits, const Rect * srcRect, const Rect * maskRect, const Rect * dstRect, short mode, RgnHandle maskRgn)
void InterfaceLib_CopyMask(InterfaceLib::Globals* globals, MachineState* state);		// void CopyMask(const BitMap * srcBits, const BitMap * maskBits, const BitMap * dstBits, const Rect * srcRect, const Rect * maskRect, const Rect * dstRect)
void InterfaceLib_CopyPixMap(InterfaceLib::Globals* globals, MachineState* state);		// void CopyPixMap(PixMapHandle srcPM, PixMapHandle dstPM)
void InterfaceLib_CopyPixPat(InterfaceLib::Globals* globals, MachineState* state);		// void CopyPixPat(PixPatHandle srcPP, PixPatHandle dstPP)
void InterfaceLib_CursorComponentChanged(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CursorComponentChanged(ComponentInstance ci)
void InterfaceLib_CursorComponentSetData(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CursorComponentSetData(ComponentInstance ci, long data)
void InterfaceLib_DelComp(InterfaceLib::Globals* globals, MachineState* state);		// void DelComp(ColorComplementUPP compProc)
void InterfaceLib_DelSearch(InterfaceLib::Globals* globals, MachineState* state);		// void DelSearch(ColorSearchUPP searchProc)
void InterfaceLib_DeltaPoint(InterfaceLib::Globals* globals, MachineState* state);		// long DeltaPoint(Point ptA, Point ptB)
void InterfaceLib_DeviceLoop(InterfaceLib::Globals* globals, MachineState* state);		// void DeviceLoop(RgnHandle drawingRgn, DeviceLoopDrawingUPP drawingProc, long userData, DeviceLoopFlags flags)
void InterfaceLib_DiffRgn(InterfaceLib::Globals* globals, MachineState* state);		// void DiffRgn(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn)
void InterfaceLib_DisposeCCursor(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeCCursor(CCrsrHandle cCrsr)
void InterfaceLib_DisposeCTable(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeCTable(CTabHandle cTable)
void InterfaceLib_DisposeGDevice(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeGDevice(GDHandle gdh)
void InterfaceLib_DisposePixMap(InterfaceLib::Globals* globals, MachineState* state);		// void DisposePixMap(PixMapHandle pm)
void InterfaceLib_DisposePixPat(InterfaceLib::Globals* globals, MachineState* state);		// void DisposePixPat(PixPatHandle pp)
void InterfaceLib_DisposeRgn(InterfaceLib::Globals* globals, MachineState* state);		// void DisposeRgn(RgnHandle rgn)
void InterfaceLib_DrawPicture(InterfaceLib::Globals* globals, MachineState* state);		// void DrawPicture(PicHandle myPicture, const Rect * dstRect)
void InterfaceLib_EmptyRect(InterfaceLib::Globals* globals, MachineState* state);		// Boolean EmptyRect(const Rect * r)
void InterfaceLib_EmptyRgn(InterfaceLib::Globals* globals, MachineState* state);		// Boolean EmptyRgn(RgnHandle rgn)
void InterfaceLib_EqualPt(InterfaceLib::Globals* globals, MachineState* state);		// Boolean EqualPt(Point pt1, Point pt2)
void InterfaceLib_EraseArc(InterfaceLib::Globals* globals, MachineState* state);		// void EraseArc(const Rect * r, short startAngle, short arcAngle)
void InterfaceLib_EraseOval(InterfaceLib::Globals* globals, MachineState* state);		// void EraseOval(const Rect * r)
void InterfaceLib_ErasePoly(InterfaceLib::Globals* globals, MachineState* state);		// void ErasePoly(PolyHandle poly)
void InterfaceLib_EraseRect(InterfaceLib::Globals* globals, MachineState* state);		// void EraseRect(const Rect * r)
void InterfaceLib_EraseRgn(InterfaceLib::Globals* globals, MachineState* state);		// void EraseRgn(RgnHandle rgn)
void InterfaceLib_EraseRoundRect(InterfaceLib::Globals* globals, MachineState* state);		// void EraseRoundRect(const Rect * r, short ovalWidth, short ovalHeight)
void InterfaceLib_FillArc(InterfaceLib::Globals* globals, MachineState* state);		// void FillArc(const Rect * r, short startAngle, short arcAngle, const Pattern * pat)
void InterfaceLib_FillCArc(InterfaceLib::Globals* globals, MachineState* state);		// void FillCArc(const Rect * r, short startAngle, short arcAngle, PixPatHandle pp)
void InterfaceLib_FillCOval(InterfaceLib::Globals* globals, MachineState* state);		// void FillCOval(const Rect * r, PixPatHandle pp)
void InterfaceLib_FillCPoly(InterfaceLib::Globals* globals, MachineState* state);		// void FillCPoly(PolyHandle poly, PixPatHandle pp)
void InterfaceLib_FillCRect(InterfaceLib::Globals* globals, MachineState* state);		// void FillCRect(const Rect * r, PixPatHandle pp)
void InterfaceLib_FillCRgn(InterfaceLib::Globals* globals, MachineState* state);		// void FillCRgn(RgnHandle rgn, PixPatHandle pp)
void InterfaceLib_FillCRoundRect(InterfaceLib::Globals* globals, MachineState* state);		// void FillCRoundRect(const Rect * r, short ovalWidth, short ovalHeight, PixPatHandle pp)
void InterfaceLib_FillOval(InterfaceLib::Globals* globals, MachineState* state);		// void FillOval(const Rect * r, const Pattern * pat)
void InterfaceLib_FillPoly(InterfaceLib::Globals* globals, MachineState* state);		// void FillPoly(PolyHandle poly, const Pattern * pat)
void InterfaceLib_FillRoundRect(InterfaceLib::Globals* globals, MachineState* state);		// void FillRoundRect(const Rect * r, short ovalWidth, short ovalHeight, const Pattern * pat)
void InterfaceLib_ForeColor(InterfaceLib::Globals* globals, MachineState* state);		// void ForeColor(long color)
void InterfaceLib_FrameArc(InterfaceLib::Globals* globals, MachineState* state);		// void FrameArc(const Rect * r, short startAngle, short arcAngle)
void InterfaceLib_FrameOval(InterfaceLib::Globals* globals, MachineState* state);		// void FrameOval(const Rect * r)
void InterfaceLib_FramePoly(InterfaceLib::Globals* globals, MachineState* state);		// void FramePoly(PolyHandle poly)
void InterfaceLib_FrameRoundRect(InterfaceLib::Globals* globals, MachineState* state);		// void FrameRoundRect(const Rect * r, short ovalWidth, short ovalHeight)
void InterfaceLib_GetBackColor(InterfaceLib::Globals* globals, MachineState* state);		// void GetBackColor(RGBColor * color)
void InterfaceLib_GetCCursor(InterfaceLib::Globals* globals, MachineState* state);		// CCrsrHandle GetCCursor(short crsrID)
void InterfaceLib_GetClip(InterfaceLib::Globals* globals, MachineState* state);		// void GetClip(RgnHandle rgn)
void InterfaceLib_GetCPixel(InterfaceLib::Globals* globals, MachineState* state);		// void GetCPixel(short h, short v, RGBColor * cPix)
void InterfaceLib_GetCTable(InterfaceLib::Globals* globals, MachineState* state);		// CTabHandle GetCTable(short ctID)
void InterfaceLib_GetCTSeed(InterfaceLib::Globals* globals, MachineState* state);		// long GetCTSeed(void)
void InterfaceLib_GetDeviceList(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle GetDeviceList(void)
void InterfaceLib_GetForeColor(InterfaceLib::Globals* globals, MachineState* state);		// void GetForeColor(RGBColor * color)
void InterfaceLib_GetGDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle GetGDevice(void)
void InterfaceLib_GetIndPattern(InterfaceLib::Globals* globals, MachineState* state);		// void GetIndPattern(Pattern * thePat, short patternListID, short index)
void InterfaceLib_GetMainDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle GetMainDevice(void)
void InterfaceLib_GetMaskTable(InterfaceLib::Globals* globals, MachineState* state);		// Ptr GetMaskTable(void)
void InterfaceLib_GetMaxDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle GetMaxDevice(const Rect * globalRect)
void InterfaceLib_GetNextDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle GetNextDevice(GDHandle curDevice)
void InterfaceLib_GetPattern(InterfaceLib::Globals* globals, MachineState* state);		// PatHandle GetPattern(short patternID)
void InterfaceLib_GetPen(InterfaceLib::Globals* globals, MachineState* state);		// void GetPen(Point * pt)
void InterfaceLib_GetPenState(InterfaceLib::Globals* globals, MachineState* state);		// void GetPenState(PenState * pnState)
void InterfaceLib_GetPicture(InterfaceLib::Globals* globals, MachineState* state);		// PicHandle GetPicture(short pictureID)
void InterfaceLib_GetPixPat(InterfaceLib::Globals* globals, MachineState* state);		// PixPatHandle GetPixPat(short patID)
void InterfaceLib_GetPort(InterfaceLib::Globals* globals, MachineState* state);		// void GetPort(GrafPtr * port)
void InterfaceLib_GetPortCustomXFerProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetPortCustomXFerProc(CGrafPtr port, CustomXFerProcPtr * proc, UInt32 * flags, UInt32 * refCon)
void InterfaceLib_GetSubTable(InterfaceLib::Globals* globals, MachineState* state);		// void GetSubTable(CTabHandle myColors, short iTabRes, CTabHandle targetTbl)
void InterfaceLib_GlobalToLocal(InterfaceLib::Globals* globals, MachineState* state);		// void GlobalToLocal(Point * pt)
void InterfaceLib_GrafDevice(InterfaceLib::Globals* globals, MachineState* state);		// void GrafDevice(short device)
void InterfaceLib_HideCursor(InterfaceLib::Globals* globals, MachineState* state);		// void HideCursor(void)
void InterfaceLib_HidePen(InterfaceLib::Globals* globals, MachineState* state);		// void HidePen(void)
void InterfaceLib_HiliteColor(InterfaceLib::Globals* globals, MachineState* state);		// void HiliteColor(const RGBColor * color)
void InterfaceLib_Index2Color(InterfaceLib::Globals* globals, MachineState* state);		// void Index2Color(long index, RGBColor * aColor)
void InterfaceLib_InitCPort(InterfaceLib::Globals* globals, MachineState* state);		// void InitCPort(CGrafPtr port)
void InterfaceLib_InitCursor(InterfaceLib::Globals* globals, MachineState* state);		// void InitCursor(void)
void InterfaceLib_InitGDevice(InterfaceLib::Globals* globals, MachineState* state);		// void InitGDevice(short qdRefNum, long mode, GDHandle gdh)
void InterfaceLib_InitGraf(InterfaceLib::Globals* globals, MachineState* state);		// void InitGraf(void * globalPtr)
void InterfaceLib_InitPort(InterfaceLib::Globals* globals, MachineState* state);		// void InitPort(GrafPtr port)
void InterfaceLib_InsetRgn(InterfaceLib::Globals* globals, MachineState* state);		// void InsetRgn(RgnHandle rgn, short dh, short dv)
void InterfaceLib_InvertArc(InterfaceLib::Globals* globals, MachineState* state);		// void InvertArc(const Rect * r, short startAngle, short arcAngle)
void InterfaceLib_InvertColor(InterfaceLib::Globals* globals, MachineState* state);		// void InvertColor(RGBColor * myColor)
void InterfaceLib_InvertOval(InterfaceLib::Globals* globals, MachineState* state);		// void InvertOval(const Rect * r)
void InterfaceLib_InvertPoly(InterfaceLib::Globals* globals, MachineState* state);		// void InvertPoly(PolyHandle poly)
void InterfaceLib_InvertRoundRect(InterfaceLib::Globals* globals, MachineState* state);		// void InvertRoundRect(const Rect * r, short ovalWidth, short ovalHeight)
void InterfaceLib_KillPicture(InterfaceLib::Globals* globals, MachineState* state);		// void KillPicture(PicHandle myPicture)
void InterfaceLib_KillPoly(InterfaceLib::Globals* globals, MachineState* state);		// void KillPoly(PolyHandle poly)
void InterfaceLib_Line(InterfaceLib::Globals* globals, MachineState* state);		// void Line(short dh, short dv)
void InterfaceLib_LMGetCursorNew(InterfaceLib::Globals* globals, MachineState* state);		// Boolean LMGetCursorNew(void)
void InterfaceLib_LMGetDeviceList(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle LMGetDeviceList(void)
void InterfaceLib_LMGetFractEnable(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetFractEnable(void)
void InterfaceLib_LMGetHiliteMode(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetHiliteMode(void)
void InterfaceLib_LMGetHiliteRGB(InterfaceLib::Globals* globals, MachineState* state);		// void LMGetHiliteRGB(RGBColor * hiliteRGBValue)
void InterfaceLib_LMGetLastFOND(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetLastFOND(void)
void InterfaceLib_LMGetLastSPExtra(InterfaceLib::Globals* globals, MachineState* state);		// SInt32 LMGetLastSPExtra(void)
void InterfaceLib_LMGetMainDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle LMGetMainDevice(void)
void InterfaceLib_LMGetQDColors(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetQDColors(void)
void InterfaceLib_LMGetScrHRes(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetScrHRes(void)
void InterfaceLib_LMGetScrVRes(InterfaceLib::Globals* globals, MachineState* state);		// SInt16 LMGetScrVRes(void)
void InterfaceLib_LMGetTheGDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle LMGetTheGDevice(void)
void InterfaceLib_LMGetWidthListHand(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetWidthListHand(void)
void InterfaceLib_LMGetWidthPtr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr LMGetWidthPtr(void)
void InterfaceLib_LMGetWidthTabHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle LMGetWidthTabHandle(void)
void InterfaceLib_LMSetCursorNew(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetCursorNew(Boolean value)
void InterfaceLib_LMSetDeviceList(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetDeviceList(GDHandle value)
void InterfaceLib_LMSetFractEnable(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetFractEnable(UInt8 value)
void InterfaceLib_LMSetHiliteMode(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetHiliteMode(UInt8 value)
void InterfaceLib_LMSetHiliteRGB(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetHiliteRGB(const RGBColor * hiliteRGBValue)
void InterfaceLib_LMSetLastFOND(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetLastFOND(Handle value)
void InterfaceLib_LMSetLastSPExtra(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetLastSPExtra(SInt32 value)
void InterfaceLib_LMSetMainDevice(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetMainDevice(GDHandle value)
void InterfaceLib_LMSetQDColors(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetQDColors(Handle value)
void InterfaceLib_LMSetScrHRes(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrHRes(SInt16 value)
void InterfaceLib_LMSetScrVRes(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetScrVRes(SInt16 value)
void InterfaceLib_LMSetTheGDevice(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetTheGDevice(GDHandle value)
void InterfaceLib_LMSetWidthListHand(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetWidthListHand(Handle value)
void InterfaceLib_LMSetWidthPtr(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetWidthPtr(Ptr value)
void InterfaceLib_LMSetWidthTabHandle(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetWidthTabHandle(Handle value)
void InterfaceLib_LocalToGlobal(InterfaceLib::Globals* globals, MachineState* state);		// void LocalToGlobal(Point * pt)
void InterfaceLib_MakeITable(InterfaceLib::Globals* globals, MachineState* state);		// void MakeITable(CTabHandle cTabH, ITabHandle iTabH, short res)
void InterfaceLib_MakeRGBPat(InterfaceLib::Globals* globals, MachineState* state);		// void MakeRGBPat(PixPatHandle pp, const RGBColor * myColor)
void InterfaceLib_MapPoly(InterfaceLib::Globals* globals, MachineState* state);		// void MapPoly(PolyHandle poly, const Rect * srcRect, const Rect * dstRect)
void InterfaceLib_MapPt(InterfaceLib::Globals* globals, MachineState* state);		// void MapPt(Point * pt, const Rect * srcRect, const Rect * dstRect)
void InterfaceLib_MapRect(InterfaceLib::Globals* globals, MachineState* state);		// void MapRect(Rect * r, const Rect * srcRect, const Rect * dstRect)
void InterfaceLib_MapRgn(InterfaceLib::Globals* globals, MachineState* state);		// void MapRgn(RgnHandle rgn, const Rect * srcRect, const Rect * dstRect)
void InterfaceLib_Move(InterfaceLib::Globals* globals, MachineState* state);		// void Move(short dh, short dv)
void InterfaceLib_MovePortTo(InterfaceLib::Globals* globals, MachineState* state);		// void MovePortTo(short leftGlobal, short topGlobal)
void InterfaceLib_MoveTo(InterfaceLib::Globals* globals, MachineState* state);		// void MoveTo(short h, short v)
void InterfaceLib_NewGDevice(InterfaceLib::Globals* globals, MachineState* state);		// GDHandle NewGDevice(short refNum, long mode)
void InterfaceLib_NewPixMap(InterfaceLib::Globals* globals, MachineState* state);		// PixMapHandle NewPixMap(void)
void InterfaceLib_NewPixPat(InterfaceLib::Globals* globals, MachineState* state);		// PixPatHandle NewPixPat(void)
void InterfaceLib_NewRgn(InterfaceLib::Globals* globals, MachineState* state);		// RgnHandle NewRgn(void)
void InterfaceLib_ObscureCursor(InterfaceLib::Globals* globals, MachineState* state);		// void ObscureCursor(void)
void InterfaceLib_OffsetPoly(InterfaceLib::Globals* globals, MachineState* state);		// void OffsetPoly(PolyHandle poly, short dh, short dv)
void InterfaceLib_OpColor(InterfaceLib::Globals* globals, MachineState* state);		// void OpColor(const RGBColor * color)
void InterfaceLib_OpenCPicture(InterfaceLib::Globals* globals, MachineState* state);		// PicHandle OpenCPicture(const OpenCPicParams * newHeader)
void InterfaceLib_OpenCPort(InterfaceLib::Globals* globals, MachineState* state);		// void OpenCPort(CGrafPtr port)
void InterfaceLib_OpenCursorComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenCursorComponent(Component c, ComponentInstance * ci)
void InterfaceLib_OpenPicture(InterfaceLib::Globals* globals, MachineState* state);		// PicHandle OpenPicture(const Rect * picFrame)
void InterfaceLib_OpenPoly(InterfaceLib::Globals* globals, MachineState* state);		// PolyHandle OpenPoly(void)
void InterfaceLib_OpenPort(InterfaceLib::Globals* globals, MachineState* state);		// void OpenPort(GrafPtr port)
void InterfaceLib_OpenRgn(InterfaceLib::Globals* globals, MachineState* state);		// void OpenRgn(void)
void InterfaceLib_PackBits(InterfaceLib::Globals* globals, MachineState* state);		// void PackBits(Ptr * srcPtr, Ptr * dstPtr, short srcBytes)
void InterfaceLib_PaintArc(InterfaceLib::Globals* globals, MachineState* state);		// void PaintArc(const Rect * r, short startAngle, short arcAngle)
void InterfaceLib_PaintOval(InterfaceLib::Globals* globals, MachineState* state);		// void PaintOval(const Rect * r)
void InterfaceLib_PaintPoly(InterfaceLib::Globals* globals, MachineState* state);		// void PaintPoly(PolyHandle poly)
void InterfaceLib_PaintRect(InterfaceLib::Globals* globals, MachineState* state);		// void PaintRect(const Rect * r)
void InterfaceLib_PaintRoundRect(InterfaceLib::Globals* globals, MachineState* state);		// void PaintRoundRect(const Rect * r, short ovalWidth, short ovalHeight)
void InterfaceLib_PenMode(InterfaceLib::Globals* globals, MachineState* state);		// void PenMode(short mode)
void InterfaceLib_PenNormal(InterfaceLib::Globals* globals, MachineState* state);		// void PenNormal(void)
void InterfaceLib_PenPat(InterfaceLib::Globals* globals, MachineState* state);		// void PenPat(const Pattern * pat)
void InterfaceLib_PenPixPat(InterfaceLib::Globals* globals, MachineState* state);		// void PenPixPat(PixPatHandle pp)
void InterfaceLib_PenSize(InterfaceLib::Globals* globals, MachineState* state);		// void PenSize(short width, short height)
void InterfaceLib_PicComment(InterfaceLib::Globals* globals, MachineState* state);		// void PicComment(short kind, short dataSize, Handle dataHandle)
void InterfaceLib_PortSize(InterfaceLib::Globals* globals, MachineState* state);		// void PortSize(short width, short height)
void InterfaceLib_ProtectEntry(InterfaceLib::Globals* globals, MachineState* state);		// void ProtectEntry(short index, Boolean protect)
void InterfaceLib_Pt2Rect(InterfaceLib::Globals* globals, MachineState* state);		// void Pt2Rect(Point pt1, Point pt2, Rect * dstRect)
void InterfaceLib_PtInRgn(InterfaceLib::Globals* globals, MachineState* state);		// Boolean PtInRgn(Point pt, RgnHandle rgn)
void InterfaceLib_PtToAngle(InterfaceLib::Globals* globals, MachineState* state);		// void PtToAngle(const Rect * r, Point pt, short * angle)
void InterfaceLib_QDError(InterfaceLib::Globals* globals, MachineState* state);		// short QDError(void)
void InterfaceLib_Random(InterfaceLib::Globals* globals, MachineState* state);		// short Random(void)
void InterfaceLib_RealColor(InterfaceLib::Globals* globals, MachineState* state);		// Boolean RealColor(const RGBColor * color)
void InterfaceLib_RectInRgn(InterfaceLib::Globals* globals, MachineState* state);		// Boolean RectInRgn(const Rect * r, RgnHandle rgn)
void InterfaceLib_RectRgn(InterfaceLib::Globals* globals, MachineState* state);		// void RectRgn(RgnHandle rgn, const Rect * r)
void InterfaceLib_ReserveEntry(InterfaceLib::Globals* globals, MachineState* state);		// void ReserveEntry(short index, Boolean reserve)
void InterfaceLib_RestoreEntries(InterfaceLib::Globals* globals, MachineState* state);		// void RestoreEntries(CTabHandle srcTable, CTabHandle dstTable, ReqListRec * selection)
void InterfaceLib_RGBBackColor(InterfaceLib::Globals* globals, MachineState* state);		// void RGBBackColor(const RGBColor * color)
void InterfaceLib_RGBForeColor(InterfaceLib::Globals* globals, MachineState* state);		// void RGBForeColor(const RGBColor * color)
void InterfaceLib_SaveEntries(InterfaceLib::Globals* globals, MachineState* state);		// void SaveEntries(CTabHandle srcTable, CTabHandle resultTable, ReqListRec * selection)
void InterfaceLib_ScalePt(InterfaceLib::Globals* globals, MachineState* state);		// void ScalePt(Point * pt, const Rect * srcRect, const Rect * dstRect)
void InterfaceLib_ScreenRes(InterfaceLib::Globals* globals, MachineState* state);		// void ScreenRes(short * scrnHRes, short * scrnVRes)
void InterfaceLib_ScrollRect(InterfaceLib::Globals* globals, MachineState* state);		// void ScrollRect(const Rect * r, short dh, short dv, RgnHandle updateRgn)
void InterfaceLib_SectRect(InterfaceLib::Globals* globals, MachineState* state);		// Boolean SectRect(const Rect * src1, const Rect * src2, Rect * dstRect)
void InterfaceLib_SectRgn(InterfaceLib::Globals* globals, MachineState* state);		// void SectRgn(RgnHandle srcRgnA, RgnHandle srcRgnB, RgnHandle dstRgn)
void InterfaceLib_SeedCFill(InterfaceLib::Globals* globals, MachineState* state);		// void SeedCFill(const BitMap * srcBits, const BitMap * dstBits, const Rect * srcRect, const Rect * dstRect, short seedH, short seedV, ColorSearchUPP matchProc, long matchData)
void InterfaceLib_SeedFill(InterfaceLib::Globals* globals, MachineState* state);		// void SeedFill(const void * srcPtr, void * dstPtr, short srcRow, short dstRow, short height, short words, short seedH, short seedV)
void InterfaceLib_SetCCursor(InterfaceLib::Globals* globals, MachineState* state);		// void SetCCursor(CCrsrHandle cCrsr)
void InterfaceLib_SetClientID(InterfaceLib::Globals* globals, MachineState* state);		// void SetClientID(short id)
void InterfaceLib_SetClip(InterfaceLib::Globals* globals, MachineState* state);		// void SetClip(RgnHandle rgn)
void InterfaceLib_SetCPixel(InterfaceLib::Globals* globals, MachineState* state);		// void SetCPixel(short h, short v, const RGBColor * cPix)
void InterfaceLib_SetCursorComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetCursorComponent(ComponentInstance ci)
void InterfaceLib_SetDeviceAttribute(InterfaceLib::Globals* globals, MachineState* state);		// void SetDeviceAttribute(GDHandle gdh, short attribute, Boolean value)
void InterfaceLib_SetEmptyRgn(InterfaceLib::Globals* globals, MachineState* state);		// void SetEmptyRgn(RgnHandle rgn)
void InterfaceLib_SetEntries(InterfaceLib::Globals* globals, MachineState* state);		// void SetEntries(short start, short count, CSpecArray aTable)
void InterfaceLib_SetGDevice(InterfaceLib::Globals* globals, MachineState* state);		// void SetGDevice(GDHandle gd)
void InterfaceLib_SetOrigin(InterfaceLib::Globals* globals, MachineState* state);		// void SetOrigin(short h, short v)
void InterfaceLib_SetPenState(InterfaceLib::Globals* globals, MachineState* state);		// void SetPenState(const PenState * pnState)
void InterfaceLib_SetPortBits(InterfaceLib::Globals* globals, MachineState* state);		// void SetPortBits(const BitMap * bm)
void InterfaceLib_SetPortCustomXFerProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetPortCustomXFerProc(CGrafPtr port, CustomXFerProcPtr proc, UInt32 flags, UInt32 refCon)
void InterfaceLib_SetPortPix(InterfaceLib::Globals* globals, MachineState* state);		// void SetPortPix(PixMapHandle pm)
void InterfaceLib_SetPt(InterfaceLib::Globals* globals, MachineState* state);		// void SetPt(Point * pt, short h, short v)
void InterfaceLib_SetStdCProcs(InterfaceLib::Globals* globals, MachineState* state);		// void SetStdCProcs(CQDProcs * procs)
void InterfaceLib_SetStdProcs(InterfaceLib::Globals* globals, MachineState* state);		// void SetStdProcs(QDProcs * procs)
void InterfaceLib_ShieldCursor(InterfaceLib::Globals* globals, MachineState* state);		// void ShieldCursor(const Rect * shieldRect, Point offsetPt)
void InterfaceLib_ShowPen(InterfaceLib::Globals* globals, MachineState* state);		// void ShowPen(void)
void InterfaceLib_SlopeFromAngle(InterfaceLib::Globals* globals, MachineState* state);		// Fixed SlopeFromAngle(short angle)
void InterfaceLib_StdArc(InterfaceLib::Globals* globals, MachineState* state);		// void StdArc(GrafVerb verb, const Rect * r, short startAngle, short arcAngle)
void InterfaceLib_StdBits(InterfaceLib::Globals* globals, MachineState* state);		// void StdBits(const BitMap * srcBits, const Rect * srcRect, const Rect * dstRect, short mode, RgnHandle maskRgn)
void InterfaceLib_StdComment(InterfaceLib::Globals* globals, MachineState* state);		// void StdComment(short kind, short dataSize, Handle dataHandle)
void InterfaceLib_StdGetPic(InterfaceLib::Globals* globals, MachineState* state);		// void StdGetPic(void * dataPtr, short byteCount)
void InterfaceLib_StdLine(InterfaceLib::Globals* globals, MachineState* state);		// void StdLine(Point newPt)
void InterfaceLib_StdOval(InterfaceLib::Globals* globals, MachineState* state);		// void StdOval(GrafVerb verb, const Rect * r)
void InterfaceLib_StdPoly(InterfaceLib::Globals* globals, MachineState* state);		// void StdPoly(GrafVerb verb, PolyHandle poly)
void InterfaceLib_StdPutPic(InterfaceLib::Globals* globals, MachineState* state);		// void StdPutPic(const void * dataPtr, short byteCount)
void InterfaceLib_StdRect(InterfaceLib::Globals* globals, MachineState* state);		// void StdRect(GrafVerb verb, const Rect * r)
void InterfaceLib_StdRgn(InterfaceLib::Globals* globals, MachineState* state);		// void StdRgn(GrafVerb verb, RgnHandle rgn)
void InterfaceLib_StdRRect(InterfaceLib::Globals* globals, MachineState* state);		// void StdRRect(GrafVerb verb, const Rect * r, short ovalWidth, short ovalHeight)
void InterfaceLib_StuffHex(InterfaceLib::Globals* globals, MachineState* state);		// void StuffHex(void * thingPtr, ConstStr255Param s)
void InterfaceLib_SubPt(InterfaceLib::Globals* globals, MachineState* state);		// void SubPt(Point src, Point * dst)
void InterfaceLib_TestDeviceAttribute(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TestDeviceAttribute(GDHandle gdh, short attribute)
void InterfaceLib_UnpackBits(InterfaceLib::Globals* globals, MachineState* state);		// void UnpackBits(Ptr * srcPtr, Ptr * dstPtr, short dstBytes)

/* QuickdrawText */
void InterfaceLib_Char2Pixel(InterfaceLib::Globals* globals, MachineState* state);		// short Char2Pixel(Ptr textBuf, short textLen, short slop, short offset, short direction)
void InterfaceLib_CharExtra(InterfaceLib::Globals* globals, MachineState* state);		// void CharExtra(Fixed extra)
void InterfaceLib_CharToPixel(InterfaceLib::Globals* globals, MachineState* state);		// short CharToPixel(Ptr textBuf, long textLength, Fixed slop, long offset, short direction, JustStyleCode styleRunPosition, Point numer, Point denom)
void InterfaceLib_CharWidth(InterfaceLib::Globals* globals, MachineState* state);		// short CharWidth(CharParameter ch)
void InterfaceLib_DrawChar(InterfaceLib::Globals* globals, MachineState* state);		// void DrawChar(CharParameter ch)
void InterfaceLib_DrawJust(InterfaceLib::Globals* globals, MachineState* state);		// void DrawJust(Ptr textPtr, short textLength, short slop)
void InterfaceLib_DrawJustified(InterfaceLib::Globals* globals, MachineState* state);		// void DrawJustified(Ptr textPtr, long textLength, Fixed slop, JustStyleCode styleRunPosition, Point numer, Point denom)
void InterfaceLib_DrawString(InterfaceLib::Globals* globals, MachineState* state);		// void DrawString(ConstStr255Param s)
void InterfaceLib_GetFontInfo(InterfaceLib::Globals* globals, MachineState* state);		// void GetFontInfo(FontInfo * info)
void InterfaceLib_GetFormatOrder(InterfaceLib::Globals* globals, MachineState* state);		// void GetFormatOrder(FormatOrderPtr ordering, short firstFormat, short lastFormat, Boolean lineRight, StyleRunDirectionUPP rlDirProc, Ptr dirParam)
void InterfaceLib_HiliteText(InterfaceLib::Globals* globals, MachineState* state);		// void HiliteText(Ptr textPtr, short textLength, short firstOffset, short secondOffset, OffsetTable offsets)
void InterfaceLib_MeasureJust(InterfaceLib::Globals* globals, MachineState* state);		// void MeasureJust(Ptr textPtr, short textLength, short slop, Ptr charLocs)
void InterfaceLib_MeasureJustified(InterfaceLib::Globals* globals, MachineState* state);		// void MeasureJustified(Ptr textPtr, long textLength, Fixed slop, Ptr charLocs, JustStyleCode styleRunPosition, Point numer, Point denom)
void InterfaceLib_MeasureText(InterfaceLib::Globals* globals, MachineState* state);		// void MeasureText(short count, const void * textAddr, void * charLocs)
void InterfaceLib_Pixel2Char(InterfaceLib::Globals* globals, MachineState* state);		// short Pixel2Char(Ptr textBuf, short textLen, short slop, short pixelWidth, Boolean * leadingEdge)
void InterfaceLib_PixelToChar(InterfaceLib::Globals* globals, MachineState* state);		// short PixelToChar(Ptr textBuf, long textLength, Fixed slop, Fixed pixelWidth, Boolean * leadingEdge, Fixed * widthRemaining, JustStyleCode styleRunPosition, Point numer, Point denom)
void InterfaceLib_PortionLine(InterfaceLib::Globals* globals, MachineState* state);		// Fixed PortionLine(Ptr textPtr, long textLen, JustStyleCode styleRunPosition, Point numer, Point denom)
void InterfaceLib_PortionText(InterfaceLib::Globals* globals, MachineState* state);		// Fixed PortionText(Ptr textPtr, long textLength)
void InterfaceLib_SpaceExtra(InterfaceLib::Globals* globals, MachineState* state);		// void SpaceExtra(Fixed extra)
void InterfaceLib_StdText(InterfaceLib::Globals* globals, MachineState* state);		// void StdText(short count, const void * textAddr, Point numer, Point denom)
void InterfaceLib_StdTxMeas(InterfaceLib::Globals* globals, MachineState* state);		// short StdTxMeas(short byteCount, const void * textAddr, Point * numer, Point * denom, FontInfo * info)
void InterfaceLib_StringWidth(InterfaceLib::Globals* globals, MachineState* state);		// short StringWidth(ConstStr255Param s)
void InterfaceLib_StyledLineBreak(InterfaceLib::Globals* globals, MachineState* state);		// StyledLineBreakCode StyledLineBreak(Ptr textPtr, long textLen, long textStart, long textEnd, long flags, Fixed * textWidth, long * textOffset)
void InterfaceLib_TextFace(InterfaceLib::Globals* globals, MachineState* state);		// void TextFace(StyleParameter face)
void InterfaceLib_TextFont(InterfaceLib::Globals* globals, MachineState* state);		// void TextFont(short font)
void InterfaceLib_TextMode(InterfaceLib::Globals* globals, MachineState* state);		// void TextMode(short mode)
void InterfaceLib_TextSize(InterfaceLib::Globals* globals, MachineState* state);		// void TextSize(short size)
void InterfaceLib_TextWidth(InterfaceLib::Globals* globals, MachineState* state);		// short TextWidth(const void * textBuf, short firstByte, short byteCount)
void InterfaceLib_TruncString(InterfaceLib::Globals* globals, MachineState* state);		// short TruncString(short width, Str255 theString, TruncCode truncWhere)
void InterfaceLib_TruncText(InterfaceLib::Globals* globals, MachineState* state);		// short TruncText(short width, Ptr textPtr, short * length, TruncCode truncWhere)
void InterfaceLib_VisibleLength(InterfaceLib::Globals* globals, MachineState* state);		// long VisibleLength(Ptr textPtr, long textLength)

/* Resources */
void InterfaceLib_AddResource(InterfaceLib::Globals* globals, MachineState* state);		// void AddResource(Handle theData, ResType theType, short theID, ConstStr255Param name)
void InterfaceLib_ChangedResource(InterfaceLib::Globals* globals, MachineState* state);		// void ChangedResource(Handle theResource)
void InterfaceLib_CloseResFile(InterfaceLib::Globals* globals, MachineState* state);		// void CloseResFile(short refNum)
void InterfaceLib_Count1Resources(InterfaceLib::Globals* globals, MachineState* state);		// short Count1Resources(ResType theType)
void InterfaceLib_Count1Types(InterfaceLib::Globals* globals, MachineState* state);		// short Count1Types(void)
void InterfaceLib_CountResources(InterfaceLib::Globals* globals, MachineState* state);		// short CountResources(ResType theType)
void InterfaceLib_CountTypes(InterfaceLib::Globals* globals, MachineState* state);		// short CountTypes(void)
void InterfaceLib_CreateResFile(InterfaceLib::Globals* globals, MachineState* state);		// void CreateResFile(ConstStr255Param fileName)
void InterfaceLib_CurResFile(InterfaceLib::Globals* globals, MachineState* state);		// short CurResFile(void)
void InterfaceLib_DetachResource(InterfaceLib::Globals* globals, MachineState* state);		// void DetachResource(Handle theResource)
void InterfaceLib_FSCreateResFile(InterfaceLib::Globals* globals, MachineState* state);		// void FSCreateResFile(const FSRef * parentRef, UniCharCount nameLength, const UniChar * name, FSCatalogInfoBitmap whichInfo, const FSCatalogInfo * catalogInfo, FSRef * newRef, FSSpec * newSpec)
void InterfaceLib_FSOpenResFile(InterfaceLib::Globals* globals, MachineState* state);		// short FSOpenResFile(const FSRef * ref, SInt8 permission)
void InterfaceLib_FSpCreateResFile(InterfaceLib::Globals* globals, MachineState* state);		// void FSpCreateResFile(const FSSpec * spec, OSType creator, OSType fileType, ScriptCode scriptTag)
void InterfaceLib_FSpOpenResFile(InterfaceLib::Globals* globals, MachineState* state);		// short FSpOpenResFile(const FSSpec * spec, SignedByte permission)
void InterfaceLib_FSpResourceFileAlreadyOpen(InterfaceLib::Globals* globals, MachineState* state);		// Boolean FSpResourceFileAlreadyOpen(const FSSpec * resourceFile, Boolean * inChain, SInt16 * refNum)
void InterfaceLib_FSResourceFileAlreadyOpen(InterfaceLib::Globals* globals, MachineState* state);		// Boolean FSResourceFileAlreadyOpen(const FSRef * resourceFileRef, Boolean * inChain, SInt16 * refNum)
void InterfaceLib_Get1IndResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle Get1IndResource(ResType theType, short index)
void InterfaceLib_Get1IndType(InterfaceLib::Globals* globals, MachineState* state);		// void Get1IndType(ResType * theType, short index)
void InterfaceLib_Get1NamedResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle Get1NamedResource(ResType theType, ConstStr255Param name)
void InterfaceLib_Get1Resource(InterfaceLib::Globals* globals, MachineState* state);		// Handle Get1Resource(ResType theType, short theID)
void InterfaceLib_GetIndResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle GetIndResource(ResType theType, short index)
void InterfaceLib_GetIndType(InterfaceLib::Globals* globals, MachineState* state);		// void GetIndType(ResType * theType, short index)
void InterfaceLib_GetMaxResourceSize(InterfaceLib::Globals* globals, MachineState* state);		// long GetMaxResourceSize(Handle theResource)
void InterfaceLib_GetNamedResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle GetNamedResource(ResType theType, ConstStr255Param name)
void InterfaceLib_GetNextFOND(InterfaceLib::Globals* globals, MachineState* state);		// Handle GetNextFOND(Handle fondHandle)
void InterfaceLib_GetResAttrs(InterfaceLib::Globals* globals, MachineState* state);		// short GetResAttrs(Handle theResource)
void InterfaceLib_GetResFileAttrs(InterfaceLib::Globals* globals, MachineState* state);		// short GetResFileAttrs(short refNum)
void InterfaceLib_GetResInfo(InterfaceLib::Globals* globals, MachineState* state);		// void GetResInfo(Handle theResource, short * theID, ResType * theType, Str255 name)
void InterfaceLib_GetResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle GetResource(ResType theType, short theID)
void InterfaceLib_GetResourceSizeOnDisk(InterfaceLib::Globals* globals, MachineState* state);		// long GetResourceSizeOnDisk(Handle theResource)
void InterfaceLib_HCreateResFile(InterfaceLib::Globals* globals, MachineState* state);		// void HCreateResFile(short vRefNum, long dirID, ConstStr255Param fileName)
void InterfaceLib_HomeResFile(InterfaceLib::Globals* globals, MachineState* state);		// short HomeResFile(Handle theResource)
void InterfaceLib_HOpenResFile(InterfaceLib::Globals* globals, MachineState* state);		// short HOpenResFile(short vRefNum, long dirID, ConstStr255Param fileName, SInt8 permission)
void InterfaceLib_InitResources(InterfaceLib::Globals* globals, MachineState* state);		// short InitResources(void)
void InterfaceLib_OpenResFile(InterfaceLib::Globals* globals, MachineState* state);		// short OpenResFile(ConstStr255Param fileName)
void InterfaceLib_OpenRFPerm(InterfaceLib::Globals* globals, MachineState* state);		// short OpenRFPerm(ConstStr255Param fileName, short vRefNum, SInt8 permission)
void InterfaceLib_ReadPartialResource(InterfaceLib::Globals* globals, MachineState* state);		// void ReadPartialResource(Handle theResource, long offset, void * buffer, long count)
void InterfaceLib_ReleaseResource(InterfaceLib::Globals* globals, MachineState* state);		// void ReleaseResource(Handle theResource)
void InterfaceLib_RemoveResource(InterfaceLib::Globals* globals, MachineState* state);		// void RemoveResource(Handle theResource)
void InterfaceLib_ResError(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ResError(void)
void InterfaceLib_RGetResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle RGetResource(ResType theType, short theID)
void InterfaceLib_RsrcMapEntry(InterfaceLib::Globals* globals, MachineState* state);		// long RsrcMapEntry(Handle theResource)
void InterfaceLib_RsrcZoneInit(InterfaceLib::Globals* globals, MachineState* state);		// void RsrcZoneInit(void)
void InterfaceLib_SetResAttrs(InterfaceLib::Globals* globals, MachineState* state);		// void SetResAttrs(Handle theResource, short attrs)
void InterfaceLib_SetResFileAttrs(InterfaceLib::Globals* globals, MachineState* state);		// void SetResFileAttrs(short refNum, short attrs)
void InterfaceLib_SetResInfo(InterfaceLib::Globals* globals, MachineState* state);		// void SetResInfo(Handle theResource, short theID, ConstStr255Param name)
void InterfaceLib_SetResLoad(InterfaceLib::Globals* globals, MachineState* state);		// void SetResLoad(Boolean load)
void InterfaceLib_SetResourceSize(InterfaceLib::Globals* globals, MachineState* state);		// void SetResourceSize(Handle theResource, long newSize)
void InterfaceLib_SetResPurge(InterfaceLib::Globals* globals, MachineState* state);		// void SetResPurge(Boolean install)
void InterfaceLib_TempInsertROMMap(InterfaceLib::Globals* globals, MachineState* state);		// void TempInsertROMMap(Boolean tempResLoad)
void InterfaceLib_Unique1ID(InterfaceLib::Globals* globals, MachineState* state);		// short Unique1ID(ResType theType)
void InterfaceLib_UniqueID(InterfaceLib::Globals* globals, MachineState* state);		// short UniqueID(ResType theType)
void InterfaceLib_UpdateResFile(InterfaceLib::Globals* globals, MachineState* state);		// void UpdateResFile(short refNum)
void InterfaceLib_UseResFile(InterfaceLib::Globals* globals, MachineState* state);		// void UseResFile(short refNum)
void InterfaceLib_WritePartialResource(InterfaceLib::Globals* globals, MachineState* state);		// void WritePartialResource(Handle theResource, long offset, const void * buffer, long count)
void InterfaceLib_WriteResource(InterfaceLib::Globals* globals, MachineState* state);		// void WriteResource(Handle theResource)

/* Retrace */
void InterfaceLib_AttachVBL(InterfaceLib::Globals* globals, MachineState* state);		// OSErr AttachVBL(short theSlot)
void InterfaceLib_DoVBLTask(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DoVBLTask(short theSlot)
void InterfaceLib_GetVBLQHdr(InterfaceLib::Globals* globals, MachineState* state);		// QHdrPtr GetVBLQHdr(void)
void InterfaceLib_SlotVInstall(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SlotVInstall(QElemPtr vblBlockPtr, short theSlot)
void InterfaceLib_SlotVRemove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SlotVRemove(QElemPtr vblBlockPtr, short theSlot)
void InterfaceLib_VInstall(InterfaceLib::Globals* globals, MachineState* state);		// OSErr VInstall(QElemPtr vblTaskPtr)
void InterfaceLib_VRemove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr VRemove(QElemPtr vblTaskPtr)

/* SCSI */
void InterfaceLib_SCSIAction(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIAction(SCSI_PB * parameterBlock)
void InterfaceLib_SCSICmd(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSICmd(Ptr buffer, short count)
void InterfaceLib_SCSIComplete(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIComplete(short * stat, short * message, unsigned long wait)
void InterfaceLib_SCSIDeregisterBus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIDeregisterBus(SCSI_PB * parameterBlock)
void InterfaceLib_SCSIGet(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIGet(void)
void InterfaceLib_SCSIKillXPT(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIKillXPT(SIMInitInfo * parameterBlock)
void InterfaceLib_SCSIMsgIn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIMsgIn(short * message)
void InterfaceLib_SCSIMsgOut(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIMsgOut(short message)
void InterfaceLib_SCSIRBlind(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIRBlind(Ptr tibPtr)
void InterfaceLib_SCSIRead(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIRead(Ptr tibPtr)
void InterfaceLib_SCSIRegisterBus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIRegisterBus(SIMInitInfo * parameterBlock)
void InterfaceLib_SCSIReregisterBus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIReregisterBus(SIMInitInfo * parameterBlock)
void InterfaceLib_SCSIReset(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIReset(void)
void InterfaceLib_SCSISelAtn(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSISelAtn(short targetID)
void InterfaceLib_SCSISelect(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSISelect(short targetID)
void InterfaceLib_SCSIStat(InterfaceLib::Globals* globals, MachineState* state);		// short SCSIStat(void)
void InterfaceLib_SCSIWBlind(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIWBlind(Ptr tibPtr)
void InterfaceLib_SCSIWrite(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCSIWrite(Ptr tibPtr)

/* Scrap */
void InterfaceLib_GetScrap(InterfaceLib::Globals* globals, MachineState* state);		// long GetScrap(Handle destination, ScrapFlavorType flavorType, SInt32 * offset)
void InterfaceLib_InfoScrap(InterfaceLib::Globals* globals, MachineState* state);		// ScrapStuffPtr InfoScrap(void)
void InterfaceLib_LoadScrap(InterfaceLib::Globals* globals, MachineState* state);		// OSStatus LoadScrap(void)
void InterfaceLib_PutScrap(InterfaceLib::Globals* globals, MachineState* state);		// OSStatus PutScrap(SInt32 sourceBufferByteCount, ScrapFlavorType flavorType, const void * sourceBuffer)
void InterfaceLib_UnloadScrap(InterfaceLib::Globals* globals, MachineState* state);		// OSStatus UnloadScrap(void)
void InterfaceLib_ZeroScrap(InterfaceLib::Globals* globals, MachineState* state);		// OSStatus ZeroScrap(void)

/* Script */
void InterfaceLib_CharacterByteType(InterfaceLib::Globals* globals, MachineState* state);		// short CharacterByteType(Ptr textBuf, short textOffset, ScriptCode script)
void InterfaceLib_CharacterType(InterfaceLib::Globals* globals, MachineState* state);		// short CharacterType(Ptr textBuf, short textOffset, ScriptCode script)
void InterfaceLib_CharByte(InterfaceLib::Globals* globals, MachineState* state);		// short CharByte(Ptr textBuf, short textOffset)
void InterfaceLib_CharType(InterfaceLib::Globals* globals, MachineState* state);		// short CharType(Ptr textBuf, short textOffset)
void InterfaceLib_ClearIntlResourceCache(InterfaceLib::Globals* globals, MachineState* state);		// void ClearIntlResourceCache(void)
void InterfaceLib_FillParseTable(InterfaceLib::Globals* globals, MachineState* state);		// Boolean FillParseTable(CharByteTable table, ScriptCode script)
void InterfaceLib_FontScript(InterfaceLib::Globals* globals, MachineState* state);		// short FontScript(void)
void InterfaceLib_FontToScript(InterfaceLib::Globals* globals, MachineState* state);		// short FontToScript(short fontNumber)
void InterfaceLib_GetIntlResource(InterfaceLib::Globals* globals, MachineState* state);		// Handle GetIntlResource(short theID)
void InterfaceLib_GetIntlResourceTable(InterfaceLib::Globals* globals, MachineState* state);		// void GetIntlResourceTable(ScriptCode script, short tableCode, Handle * itlHandle, long * offset, long * length)
void InterfaceLib_GetScriptManagerVariable(InterfaceLib::Globals* globals, MachineState* state);		// long GetScriptManagerVariable(short selector)
void InterfaceLib_GetScriptQDPatchAddress(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr GetScriptQDPatchAddress(short trapNum, Boolean Before, Boolean forPrinting, ScriptCode script)
void InterfaceLib_GetScriptUtilityAddress(InterfaceLib::Globals* globals, MachineState* state);		// UniversalProcPtr GetScriptUtilityAddress(short selector, Boolean Before, ScriptCode script)
void InterfaceLib_GetScriptVariable(InterfaceLib::Globals* globals, MachineState* state);		// long GetScriptVariable(short script, short selector)
void InterfaceLib_GetSysDirection(InterfaceLib::Globals* globals, MachineState* state);		// short GetSysDirection(void)
void InterfaceLib_IntlScript(InterfaceLib::Globals* globals, MachineState* state);		// short IntlScript(void)
void InterfaceLib_IntlTokenize(InterfaceLib::Globals* globals, MachineState* state);		// TokenResults IntlTokenize(TokenBlockPtr tokenParam)
void InterfaceLib_ParseTable(InterfaceLib::Globals* globals, MachineState* state);		// Boolean ParseTable(CharByteTable table)
void InterfaceLib_SetIntlResource(InterfaceLib::Globals* globals, MachineState* state);		// void SetIntlResource(short refNum, short theID, Handle intlHandle)
void InterfaceLib_SetScriptManagerVariable(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetScriptManagerVariable(short selector, long param)
void InterfaceLib_SetScriptQDPatchAddress(InterfaceLib::Globals* globals, MachineState* state);		// void SetScriptQDPatchAddress(short trapNum, Boolean Before, Boolean forPrinting, UniversalProcPtr routineAddr, ScriptCode script)
void InterfaceLib_SetScriptUtilityAddress(InterfaceLib::Globals* globals, MachineState* state);		// void SetScriptUtilityAddress(short selector, Boolean Before, UniversalProcPtr routineAddr, ScriptCode script)
void InterfaceLib_SetScriptVariable(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetScriptVariable(short script, short selector, long param)
void InterfaceLib_SetSysDirection(InterfaceLib::Globals* globals, MachineState* state);		// void SetSysDirection(short value)
void InterfaceLib_Transliterate(InterfaceLib::Globals* globals, MachineState* state);		// OSErr Transliterate(Handle srcHandle, Handle dstHandle, short target, long srcMask)
void InterfaceLib_TransliterateText(InterfaceLib::Globals* globals, MachineState* state);		// OSErr TransliterateText(Handle srcHandle, Handle dstHandle, short target, long srcMask, ScriptCode script)

/* Serial */
void InterfaceLib_SerClrBrk(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SerClrBrk(short refNum)
void InterfaceLib_SerGetBuf(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SerGetBuf(short refNum, long * count)
void InterfaceLib_SerHShake(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SerHShake(short refNum, const SerShk * flags)
void InterfaceLib_SerReset(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SerReset(short refNum, short serConfig)
void InterfaceLib_SerSetBrk(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SerSetBrk(short refNum)
void InterfaceLib_SerSetBuf(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SerSetBuf(short refNum, Ptr serBPtr, short serBLen)
void InterfaceLib_SerStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SerStatus(short refNum, SerStaRec * serSta)

/* ShutDown */
void InterfaceLib_ShutDwnInstall(InterfaceLib::Globals* globals, MachineState* state);		// void ShutDwnInstall(ShutDwnUPP shutDownProc, short flags)
void InterfaceLib_ShutDwnPower(InterfaceLib::Globals* globals, MachineState* state);		// void ShutDwnPower(void)
void InterfaceLib_ShutDwnRemove(InterfaceLib::Globals* globals, MachineState* state);		// void ShutDwnRemove(ShutDwnUPP shutDownProc)
void InterfaceLib_ShutDwnStart(InterfaceLib::Globals* globals, MachineState* state);		// void ShutDwnStart(void)

/* Slots */
void InterfaceLib_InitSDeclMgr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InitSDeclMgr(SpBlockPtr spBlkPtr)
void InterfaceLib_InsertSRTRec(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InsertSRTRec(SpBlockPtr spBlkPtr)
void InterfaceLib_OpenSlot(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenSlot(ParmBlkPtr paramBlock, Boolean async)
void InterfaceLib_OpenSlotAsync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenSlotAsync(ParmBlkPtr paramBlock)
void InterfaceLib_OpenSlotSync(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenSlotSync(ParmBlkPtr paramBlock)
void InterfaceLib_SCalcSPointer(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCalcSPointer(SpBlockPtr spBlkPtr)
void InterfaceLib_SCalcStep(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCalcStep(SpBlockPtr spBlkPtr)
void InterfaceLib_SCardChanged(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCardChanged(SpBlockPtr spBlkPtr)
void InterfaceLib_SCkCardStat(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SCkCardStat(SpBlockPtr spBlkPtr)
void InterfaceLib_SDeleteSRTRec(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SDeleteSRTRec(SpBlockPtr spBlkPtr)
void InterfaceLib_SetSRsrcState(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetSRsrcState(SpBlockPtr spBlkPtr)
void InterfaceLib_SExec(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SExec(SpBlockPtr spBlkPtr)
void InterfaceLib_SFindBigDevBase(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SFindBigDevBase(SpBlockPtr spBlkPtr)
void InterfaceLib_SFindDevBase(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SFindDevBase(SpBlockPtr spBlkPtr)
void InterfaceLib_SFindSInfoRecPtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SFindSInfoRecPtr(SpBlockPtr spBlkPtr)
void InterfaceLib_SFindSRsrcPtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SFindSRsrcPtr(SpBlockPtr spBlkPtr)
void InterfaceLib_SFindStruct(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SFindStruct(SpBlockPtr spBlkPtr)
void InterfaceLib_SGetBlock(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SGetBlock(SpBlockPtr spBlkPtr)
void InterfaceLib_SGetCString(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SGetCString(SpBlockPtr spBlkPtr)
void InterfaceLib_SGetDriver(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SGetDriver(SpBlockPtr spBlkPtr)
void InterfaceLib_SGetSRsrc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SGetSRsrc(SpBlockPtr spBlkPtr)
void InterfaceLib_SGetSRsrcPtr(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SGetSRsrcPtr(SpBlockPtr spBlkPtr)
void InterfaceLib_SGetTypeSRsrc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SGetTypeSRsrc(SpBlockPtr spBlkPtr)
void InterfaceLib_SInitPRAMRecs(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SInitPRAMRecs(SpBlockPtr spBlkPtr)
void InterfaceLib_SInitSRsrcTable(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SInitSRsrcTable(SpBlockPtr spBlkPtr)
void InterfaceLib_SIntInstall(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SIntInstall(SQElemPtr sIntQElemPtr, short theSlot)
void InterfaceLib_SIntRemove(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SIntRemove(SQElemPtr sIntQElemPtr, short theSlot)
void InterfaceLib_SNextSRsrc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SNextSRsrc(SpBlockPtr spBlkPtr)
void InterfaceLib_SNextTypeSRsrc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SNextTypeSRsrc(SpBlockPtr spBlkPtr)
void InterfaceLib_SOffsetData(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SOffsetData(SpBlockPtr spBlkPtr)
void InterfaceLib_SPrimaryInit(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPrimaryInit(SpBlockPtr spBlkPtr)
void InterfaceLib_SPtrToSlot(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPtrToSlot(SpBlockPtr spBlkPtr)
void InterfaceLib_SPutPRAMRec(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPutPRAMRec(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadByte(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadByte(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadDrvrName(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadDrvrName(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadFHeader(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadFHeader(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadInfo(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadLong(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadLong(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadPBSize(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadPBSize(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadPRAMRec(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadPRAMRec(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadStruct(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadStruct(SpBlockPtr spBlkPtr)
void InterfaceLib_SReadWord(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SReadWord(SpBlockPtr spBlkPtr)
void InterfaceLib_SRsrcInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SRsrcInfo(SpBlockPtr spBlkPtr)
void InterfaceLib_SSearchSRT(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SSearchSRT(SpBlockPtr spBlkPtr)
void InterfaceLib_SUpdateSRT(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SUpdateSRT(SpBlockPtr spBlkPtr)
void InterfaceLib_SVersion(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SVersion(SpBlockPtr spBlkPtr)

/* Sound */
void InterfaceLib_Comp3to1(InterfaceLib::Globals* globals, MachineState* state);		// void Comp3to1(const void * inBuffer, void * outBuffer, unsigned long cnt, StateBlockPtr inState, StateBlockPtr outState, unsigned long numChannels, unsigned long whichChannel)
void InterfaceLib_Comp6to1(InterfaceLib::Globals* globals, MachineState* state);		// void Comp6to1(const void * inBuffer, void * outBuffer, unsigned long cnt, StateBlockPtr inState, StateBlockPtr outState, unsigned long numChannels, unsigned long whichChannel)
void InterfaceLib_Exp1to3(InterfaceLib::Globals* globals, MachineState* state);		// void Exp1to3(const void * inBuffer, void * outBuffer, unsigned long cnt, StateBlockPtr inState, StateBlockPtr outState, unsigned long numChannels, unsigned long whichChannel)
void InterfaceLib_Exp1to6(InterfaceLib::Globals* globals, MachineState* state);		// void Exp1to6(const void * inBuffer, void * outBuffer, unsigned long cnt, StateBlockPtr inState, StateBlockPtr outState, unsigned long numChannels, unsigned long whichChannel)
void InterfaceLib_GetDefaultOutputVolume(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetDefaultOutputVolume(long * level)
void InterfaceLib_GetSoundHeaderOffset(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetSoundHeaderOffset(SndListHandle sndHandle, long * offset)
void InterfaceLib_GetSysBeepVolume(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetSysBeepVolume(long * level)
void InterfaceLib_MACEVersion(InterfaceLib::Globals* globals, MachineState* state);		// NumVersion MACEVersion(void)
void InterfaceLib_SetDefaultOutputVolume(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDefaultOutputVolume(long level)
void InterfaceLib_SetSysBeepVolume(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetSysBeepVolume(long level)
void InterfaceLib_SetupAIFFHeader(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetupAIFFHeader(short fRefNum, short numChannels, UnsignedFixed sampleRate, short sampleSize, OSType compressionType, unsigned long numBytes, unsigned long numFrames)
void InterfaceLib_SetupSndHeader(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetupSndHeader(SndListHandle sndHandle, short numChannels, UnsignedFixed sampleRate, short sampleSize, OSType compressionType, short baseNote, unsigned long numBytes, short * headerLen)
void InterfaceLib_SndAddModifier(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndAddModifier(SndChannelPtr chan, Ptr modifier, short id, long init)
void InterfaceLib_SndChannelStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndChannelStatus(SndChannelPtr chan, short theLength, SCStatusPtr theStatus)
void InterfaceLib_SndControl(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndControl(short id, SndCommand * cmd)
void InterfaceLib_SndDisposeChannel(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndDisposeChannel(SndChannelPtr chan, Boolean quietNow)
void InterfaceLib_SndDoCommand(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndDoCommand(SndChannelPtr chan, const SndCommand * cmd, Boolean noWait)
void InterfaceLib_SndDoImmediate(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndDoImmediate(SndChannelPtr chan, const SndCommand * cmd)
void InterfaceLib_SndGetSysBeepState(InterfaceLib::Globals* globals, MachineState* state);		// void SndGetSysBeepState(short * sysBeepState)
void InterfaceLib_SndManagerStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndManagerStatus(short theLength, SMStatusPtr theStatus)
void InterfaceLib_SndNewChannel(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndNewChannel(SndChannelPtr * chan, short synth, long init, SndCallBackUPP userRoutine)
void InterfaceLib_SndPauseFilePlay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndPauseFilePlay(SndChannelPtr chan)
void InterfaceLib_SndPlay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndPlay(SndChannelPtr chan, SndListHandle sndHandle, Boolean async)
void InterfaceLib_SndPlayDoubleBuffer(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndPlayDoubleBuffer(SndChannelPtr chan, SndDoubleBufferHeaderPtr theParams)
void InterfaceLib_SndRecord(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndRecord(ModalFilterUPP filterProc, Point corner, OSType quality, SndListHandle * sndHandle)
void InterfaceLib_SndRecordToFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndRecordToFile(ModalFilterUPP filterProc, Point corner, OSType quality, short fRefNum)
void InterfaceLib_SndSetSysBeepState(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndSetSysBeepState(short sysBeepState)
void InterfaceLib_SndSoundManagerVersion(InterfaceLib::Globals* globals, MachineState* state);		// NumVersion SndSoundManagerVersion(void)
void InterfaceLib_SndStartFilePlay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndStartFilePlay(SndChannelPtr chan, short fRefNum, short resNum, long bufferSize, void * theBuffer, AudioSelectionPtr theSelection, FilePlayCompletionUPP theCompletion, Boolean async)
void InterfaceLib_SndStopFilePlay(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SndStopFilePlay(SndChannelPtr chan, Boolean quietNow)
void InterfaceLib_SPBBytesToMilliseconds(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBBytesToMilliseconds(long inRefNum, long * byteCount)
void InterfaceLib_SPBCloseDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBCloseDevice(long inRefNum)
void InterfaceLib_SPBGetDeviceInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBGetDeviceInfo(long inRefNum, OSType infoType, void * infoData)
void InterfaceLib_SPBGetIndexedDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBGetIndexedDevice(short count, Str255 deviceName, Handle * deviceIconHandle)
void InterfaceLib_SPBGetRecordingStatus(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBGetRecordingStatus(long inRefNum, short * recordingStatus, short * meterLevel, unsigned long * totalSamplesToRecord, unsigned long * numberOfSamplesRecorded, unsigned long * totalMsecsToRecord, unsigned long * numberOfMsecsRecorded)
void InterfaceLib_SPBMillisecondsToBytes(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBMillisecondsToBytes(long inRefNum, long * milliseconds)
void InterfaceLib_SPBOpenDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBOpenDevice(ConstStr255Param deviceName, short permission, long * inRefNum)
void InterfaceLib_SPBPauseRecording(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBPauseRecording(long inRefNum)
void InterfaceLib_SPBRecord(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBRecord(SPBPtr inParamPtr, Boolean asynchFlag)
void InterfaceLib_SPBRecordToFile(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBRecordToFile(short fRefNum, SPBPtr inParamPtr, Boolean asynchFlag)
void InterfaceLib_SPBResumeRecording(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBResumeRecording(long inRefNum)
void InterfaceLib_SPBSetDeviceInfo(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBSetDeviceInfo(long inRefNum, OSType infoType, void * infoData)
void InterfaceLib_SPBSignInDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBSignInDevice(short deviceRefNum, ConstStr255Param deviceName)
void InterfaceLib_SPBSignOutDevice(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBSignOutDevice(short deviceRefNum)
void InterfaceLib_SPBStopRecording(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SPBStopRecording(long inRefNum)
void InterfaceLib_SPBVersion(InterfaceLib::Globals* globals, MachineState* state);		// NumVersion SPBVersion(void)
void InterfaceLib_SysBeep(InterfaceLib::Globals* globals, MachineState* state);		// void SysBeep(short duration)

/* StandardFile */
void InterfaceLib_CustomGetFile(InterfaceLib::Globals* globals, MachineState* state);		// void CustomGetFile(FileFilterYDUPP fileFilter, /* can be NULL */ short numTypes, ConstSFTypeListPtr typeList, /* can be NULL */ StandardFileReply * reply, short dlgID, Point where, DlgHookYDUPP dlgHook, /* can be NULL */ ModalFilterYDUPP filterProc, /* can be NULL */ ActivationOrderListPtr activeList, /* can be NULL */ ActivateYDUPP activate, /* can be NULL */ void * yourDataPtr)
void InterfaceLib_CustomPutFile(InterfaceLib::Globals* globals, MachineState* state);		// void CustomPutFile(ConstStr255Param prompt, /* can be NULL */ ConstStr255Param defaultName, StandardFileReply * reply, short dlgID, Point where, DlgHookYDUPP dlgHook, /* can be NULL */ ModalFilterYDUPP filterProc, /* can be NULL */ ActivationOrderListPtr activeList, /* can be NULL */ ActivateYDUPP activate, /* can be NULL */ void * yourDataPtr)
void InterfaceLib_SFGetFile(InterfaceLib::Globals* globals, MachineState* state);		// void SFGetFile(Point where, ConstStr255Param prompt, FileFilterUPP fileFilter, /* can be NULL */ short numTypes, ConstSFTypeListPtr typeList, /* can be NULL */ DlgHookUPP dlgHook, /* can be NULL */ SFReply * reply)
void InterfaceLib_SFPGetFile(InterfaceLib::Globals* globals, MachineState* state);		// void SFPGetFile(Point where, ConstStr255Param prompt, FileFilterUPP fileFilter, /* can be NULL */ short numTypes, ConstSFTypeListPtr typeList, /* can be NULL */ DlgHookUPP dlgHook, /* can be NULL */ SFReply * reply, short dlgID, ModalFilterUPP filterProc)
void InterfaceLib_SFPPutFile(InterfaceLib::Globals* globals, MachineState* state);		// void SFPPutFile(Point where, ConstStr255Param prompt, /* can be NULL */ ConstStr255Param origName, DlgHookUPP dlgHook, SFReply * reply, short dlgID, ModalFilterUPP filterProc)
void InterfaceLib_SFPutFile(InterfaceLib::Globals* globals, MachineState* state);		// void SFPutFile(Point where, ConstStr255Param prompt, /* can be NULL */ ConstStr255Param origName, DlgHookUPP dlgHook, /* can be NULL */ SFReply * reply)
void InterfaceLib_StandardGetFile(InterfaceLib::Globals* globals, MachineState* state);		// void StandardGetFile(FileFilterUPP fileFilter, /* can be NULL */ short numTypes, ConstSFTypeListPtr typeList, /* can be NULL */ StandardFileReply * reply)
void InterfaceLib_StandardPutFile(InterfaceLib::Globals* globals, MachineState* state);		// void StandardPutFile(ConstStr255Param prompt, /* can be NULL */ ConstStr255Param defaultName, StandardFileReply * reply)

/* Start */
void InterfaceLib_GetDefaultStartup(InterfaceLib::Globals* globals, MachineState* state);		// void GetDefaultStartup(DefStartPtr paramBlock)
void InterfaceLib_GetOSDefault(InterfaceLib::Globals* globals, MachineState* state);		// void GetOSDefault(DefOSPtr paramBlock)
void InterfaceLib_GetTimeout(InterfaceLib::Globals* globals, MachineState* state);		// void GetTimeout(short * count)
void InterfaceLib_GetVideoDefault(InterfaceLib::Globals* globals, MachineState* state);		// void GetVideoDefault(DefVideoPtr paramBlock)
void InterfaceLib_InstallExtensionNotificationProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InstallExtensionNotificationProc(ExtensionNotificationUPP extNotificationProc)
void InterfaceLib_InstallExtensionTableHandlerProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InstallExtensionTableHandlerProc(ExtensionTableHandlerUPP extMgrProc, ExtensionTableHandle * extTable)
void InterfaceLib_RemoveExtensionNotificationProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RemoveExtensionNotificationProc(ExtensionNotificationUPP extNotificationProc)
void InterfaceLib_RemoveExtensionTableHandlerProc(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RemoveExtensionTableHandlerProc(ExtensionTableHandlerUPP extMgrProc)
void InterfaceLib_SetDefaultStartup(InterfaceLib::Globals* globals, MachineState* state);		// void SetDefaultStartup(DefStartPtr paramBlock)
void InterfaceLib_SetOSDefault(InterfaceLib::Globals* globals, MachineState* state);		// void SetOSDefault(DefOSPtr paramBlock)
void InterfaceLib_SetTimeout(InterfaceLib::Globals* globals, MachineState* state);		// void SetTimeout(short count)
void InterfaceLib_SetVideoDefault(InterfaceLib::Globals* globals, MachineState* state);		// void SetVideoDefault(DefVideoPtr paramBlock)

/* StringCompare */
void InterfaceLib_EqualString(InterfaceLib::Globals* globals, MachineState* state);		// Boolean EqualString(ConstStr255Param str1, ConstStr255Param str2, Boolean caseSensitive, Boolean diacSensitive)
void InterfaceLib_IUCompPString(InterfaceLib::Globals* globals, MachineState* state);		// short IUCompPString(ConstStr255Param aStr, ConstStr255Param bStr, Handle itl2Handle)
void InterfaceLib_IUCompString(InterfaceLib::Globals* globals, MachineState* state);		// short IUCompString(ConstStr255Param aStr, ConstStr255Param bStr)
void InterfaceLib_IUEqualPString(InterfaceLib::Globals* globals, MachineState* state);		// short IUEqualPString(ConstStr255Param aStr, ConstStr255Param bStr, Handle itl2Handle)
void InterfaceLib_IUEqualString(InterfaceLib::Globals* globals, MachineState* state);		// short IUEqualString(ConstStr255Param aStr, ConstStr255Param bStr)
void InterfaceLib_IULangOrder(InterfaceLib::Globals* globals, MachineState* state);		// short IULangOrder(LangCode language1, LangCode language2)
void InterfaceLib_IUMagIDPString(InterfaceLib::Globals* globals, MachineState* state);		// short IUMagIDPString(const void * aPtr, const void * bPtr, short aLen, short bLen, Handle itl2Handle)
void InterfaceLib_IUMagIDString(InterfaceLib::Globals* globals, MachineState* state);		// short IUMagIDString(const void * aPtr, const void * bPtr, short aLen, short bLen)
void InterfaceLib_IUMagPString(InterfaceLib::Globals* globals, MachineState* state);		// short IUMagPString(const void * aPtr, const void * bPtr, short aLen, short bLen, Handle itl2Handle)
void InterfaceLib_IUMagString(InterfaceLib::Globals* globals, MachineState* state);		// short IUMagString(const void * aPtr, const void * bPtr, short aLen, short bLen)
void InterfaceLib_IUScriptOrder(InterfaceLib::Globals* globals, MachineState* state);		// short IUScriptOrder(ScriptCode script1, ScriptCode script2)
void InterfaceLib_IUStringOrder(InterfaceLib::Globals* globals, MachineState* state);		// short IUStringOrder(ConstStr255Param aStr, ConstStr255Param bStr, ScriptCode aScript, ScriptCode bScript, LangCode aLang, LangCode bLang)
void InterfaceLib_IUTextOrder(InterfaceLib::Globals* globals, MachineState* state);		// short IUTextOrder(const void * aPtr, const void * bPtr, short aLen, short bLen, ScriptCode aScript, ScriptCode bScript, LangCode aLang, LangCode bLang)
void InterfaceLib_RelString(InterfaceLib::Globals* globals, MachineState* state);		// short RelString(ConstStr255Param str1, ConstStr255Param str2, Boolean caseSensitive, Boolean diacSensitive)
void InterfaceLib_ScriptOrder(InterfaceLib::Globals* globals, MachineState* state);		// short ScriptOrder(ScriptCode script1, ScriptCode script2)

/* Terminals */
void InterfaceLib_InitTM(InterfaceLib::Globals* globals, MachineState* state);		// TMErr InitTM(void)
void InterfaceLib_TMActivate(InterfaceLib::Globals* globals, MachineState* state);		// void TMActivate(TermHandle hTerm, Boolean activate)
void InterfaceLib_TMAddSearch(InterfaceLib::Globals* globals, MachineState* state);		// short TMAddSearch(TermHandle hTerm, ConstStr255Param theString, const Rect * where, TMSearchTypes searchType, TerminalSearchCallBackUPP callBack)
void InterfaceLib_TMChoose(InterfaceLib::Globals* globals, MachineState* state);		// short TMChoose(TermHandle * hTerm, Point where, TerminalChooseIdleUPP idleProc)
void InterfaceLib_TMClear(InterfaceLib::Globals* globals, MachineState* state);		// void TMClear(TermHandle hTerm)
void InterfaceLib_TMClearSearch(InterfaceLib::Globals* globals, MachineState* state);		// void TMClearSearch(TermHandle hTerm)
void InterfaceLib_TMClick(InterfaceLib::Globals* globals, MachineState* state);		// void TMClick(TermHandle hTerm, const EventRecord * theEvent)
void InterfaceLib_TMCountTermKeys(InterfaceLib::Globals* globals, MachineState* state);		// short TMCountTermKeys(TermHandle hTerm)
void InterfaceLib_TMDefault(InterfaceLib::Globals* globals, MachineState* state);		// void TMDefault(Ptr * theConfig, short procID, Boolean allocate)
void InterfaceLib_TMDispose(InterfaceLib::Globals* globals, MachineState* state);		// void TMDispose(TermHandle hTerm)
void InterfaceLib_TMDoTermKey(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TMDoTermKey(TermHandle hTerm, ConstStr255Param theKey)
void InterfaceLib_TMEnglishToIntl(InterfaceLib::Globals* globals, MachineState* state);		// OSErr TMEnglishToIntl(TermHandle hTerm, const void * inputPtr, Ptr * outputPtr, short language)
void InterfaceLib_TMEvent(InterfaceLib::Globals* globals, MachineState* state);		// void TMEvent(TermHandle hTerm, const EventRecord * theEvent)
void InterfaceLib_TMGetConfig(InterfaceLib::Globals* globals, MachineState* state);		// Ptr TMGetConfig(TermHandle hTerm)
void InterfaceLib_TMGetCursor(InterfaceLib::Globals* globals, MachineState* state);		// Point TMGetCursor(TermHandle hTerm, TMCursorTypes cursType)
void InterfaceLib_TMGetErrorString(InterfaceLib::Globals* globals, MachineState* state);		// void TMGetErrorString(TermHandle hTerm, short id, Str255 errMsg)
void InterfaceLib_TMGetIndTermKey(InterfaceLib::Globals* globals, MachineState* state);		// void TMGetIndTermKey(TermHandle hTerm, short id, Str255 theKey)
void InterfaceLib_TMGetLine(InterfaceLib::Globals* globals, MachineState* state);		// void TMGetLine(TermHandle hTerm, short lineNo, TermDataBlock * theTermData)
void InterfaceLib_TMGetProcID(InterfaceLib::Globals* globals, MachineState* state);		// short TMGetProcID(ConstStr255Param name)
void InterfaceLib_TMGetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// long TMGetRefCon(TermHandle hTerm)
void InterfaceLib_TMGetSelect(InterfaceLib::Globals* globals, MachineState* state);		// long TMGetSelect(TermHandle hTerm, Handle theData, ResType * theType)
void InterfaceLib_TMGetTermEnvirons(InterfaceLib::Globals* globals, MachineState* state);		// TMErr TMGetTermEnvirons(TermHandle hTerm, TermEnvironRec * theEnvirons)
void InterfaceLib_TMGetTMVersion(InterfaceLib::Globals* globals, MachineState* state);		// short TMGetTMVersion(void)
void InterfaceLib_TMGetToolName(InterfaceLib::Globals* globals, MachineState* state);		// void TMGetToolName(short id, Str255 name)
void InterfaceLib_TMGetUserData(InterfaceLib::Globals* globals, MachineState* state);		// long TMGetUserData(TermHandle hTerm)
void InterfaceLib_TMGetVersion(InterfaceLib::Globals* globals, MachineState* state);		// Handle TMGetVersion(TermHandle hTerm)
void InterfaceLib_TMIdle(InterfaceLib::Globals* globals, MachineState* state);		// void TMIdle(TermHandle hTerm)
void InterfaceLib_TMIntlToEnglish(InterfaceLib::Globals* globals, MachineState* state);		// OSErr TMIntlToEnglish(TermHandle hTerm, const void * inputPtr, Ptr * outputPtr, short language)
void InterfaceLib_TMKey(InterfaceLib::Globals* globals, MachineState* state);		// void TMKey(TermHandle hTerm, const EventRecord * theEvent)
void InterfaceLib_TMMenu(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TMMenu(TermHandle hTerm, short menuID, short item)
void InterfaceLib_TMNew(InterfaceLib::Globals* globals, MachineState* state);		// TermHandle TMNew(const Rect * termRect, const Rect * viewRect, TMFlags flags, short procID, WindowRef owner, TerminalSendUPP sendProc, TerminalCacheUPP cacheProc, TerminalBreakUPP breakProc, TerminalClikLoopUPP clikLoop, TerminalEnvironsUPP environsProc, long refCon, long userData)
void InterfaceLib_TMPaint(InterfaceLib::Globals* globals, MachineState* state);		// void TMPaint(TermHandle hTerm, const TermDataBlock * theTermData, const Rect * theRect)
void InterfaceLib_TMRemoveSearch(InterfaceLib::Globals* globals, MachineState* state);		// void TMRemoveSearch(TermHandle hTerm, short refnum)
void InterfaceLib_TMReset(InterfaceLib::Globals* globals, MachineState* state);		// void TMReset(TermHandle hTerm)
void InterfaceLib_TMResize(InterfaceLib::Globals* globals, MachineState* state);		// void TMResize(TermHandle hTerm, const Rect * newViewRect)
void InterfaceLib_TMResume(InterfaceLib::Globals* globals, MachineState* state);		// void TMResume(TermHandle hTerm, Boolean resume)
void InterfaceLib_TMScroll(InterfaceLib::Globals* globals, MachineState* state);		// void TMScroll(TermHandle hTerm, short dh, short dv)
void InterfaceLib_TMSetConfig(InterfaceLib::Globals* globals, MachineState* state);		// short TMSetConfig(TermHandle hTerm, const void * thePtr)
void InterfaceLib_TMSetRefCon(InterfaceLib::Globals* globals, MachineState* state);		// void TMSetRefCon(TermHandle hTerm, long refCon)
void InterfaceLib_TMSetSelection(InterfaceLib::Globals* globals, MachineState* state);		// void TMSetSelection(TermHandle hTerm, const TMSelection * theSelection, TMSelTypes selType)
void InterfaceLib_TMSetupFilter(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TMSetupFilter(short procID, const void * theConfig, short count, DialogRef theDialog, EventRecord * theEvent, short * theItem, long * magicCookie)
void InterfaceLib_TMSetupItem(InterfaceLib::Globals* globals, MachineState* state);		// void TMSetupItem(short procID, const void * theConfig, short count, DialogRef theDialog, short * theItem, long * magicCookie)
void InterfaceLib_TMSetupPostflight(InterfaceLib::Globals* globals, MachineState* state);		// void TMSetupPostflight(short procID)
void InterfaceLib_TMSetupPreflight(InterfaceLib::Globals* globals, MachineState* state);		// Handle TMSetupPreflight(short procID, long * magicCookie)
void InterfaceLib_TMSetupSetup(InterfaceLib::Globals* globals, MachineState* state);		// void TMSetupSetup(short procID, const void * theConfig, short count, DialogRef theDialog, long * magicCookie)
void InterfaceLib_TMSetupXCleanup(InterfaceLib::Globals* globals, MachineState* state);		// void TMSetupXCleanup(short procID, const void * theConfig, short count, DialogRef theDialog, Boolean OKed, long * magicCookie)
void InterfaceLib_TMSetUserData(InterfaceLib::Globals* globals, MachineState* state);		// void TMSetUserData(TermHandle hTerm, long userData)
void InterfaceLib_TMStream(InterfaceLib::Globals* globals, MachineState* state);		// long TMStream(TermHandle hTerm, void * theBuffer, long theLength, CMFlags flags)
void InterfaceLib_TMUpdate(InterfaceLib::Globals* globals, MachineState* state);		// void TMUpdate(TermHandle hTerm, RgnHandle visRgn)
void InterfaceLib_TMValidate(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TMValidate(TermHandle hTerm)

/* TextEdit */
void InterfaceLib_LMGetWordRedraw(InterfaceLib::Globals* globals, MachineState* state);		// UInt8 LMGetWordRedraw(void)
void InterfaceLib_LMSetWordRedraw(InterfaceLib::Globals* globals, MachineState* state);		// void LMSetWordRedraw(UInt8 value)
void InterfaceLib_TEActivate(InterfaceLib::Globals* globals, MachineState* state);		// void TEActivate(TEHandle hTE)
void InterfaceLib_TEAutoView(InterfaceLib::Globals* globals, MachineState* state);		// void TEAutoView(Boolean fAuto, TEHandle hTE)
void InterfaceLib_TECalText(InterfaceLib::Globals* globals, MachineState* state);		// void TECalText(TEHandle hTE)
void InterfaceLib_TEClick(InterfaceLib::Globals* globals, MachineState* state);		// void TEClick(Point pt, Boolean fExtend, TEHandle h)
void InterfaceLib_TEContinuousStyle(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TEContinuousStyle(short * mode, TextStyle * aStyle, TEHandle hTE)
void InterfaceLib_TECopy(InterfaceLib::Globals* globals, MachineState* state);		// void TECopy(TEHandle hTE)
void InterfaceLib_TECustomHook(InterfaceLib::Globals* globals, MachineState* state);		// void TECustomHook(TEIntHook which, UniversalProcPtr * addr, TEHandle hTE)
void InterfaceLib_TECut(InterfaceLib::Globals* globals, MachineState* state);		// void TECut(TEHandle hTE)
void InterfaceLib_TEDeactivate(InterfaceLib::Globals* globals, MachineState* state);		// void TEDeactivate(TEHandle hTE)
void InterfaceLib_TEDelete(InterfaceLib::Globals* globals, MachineState* state);		// void TEDelete(TEHandle hTE)
void InterfaceLib_TEDispose(InterfaceLib::Globals* globals, MachineState* state);		// void TEDispose(TEHandle hTE)
void InterfaceLib_TEFeatureFlag(InterfaceLib::Globals* globals, MachineState* state);		// short TEFeatureFlag(short feature, short action, TEHandle hTE)
void InterfaceLib_TEFromScrap(InterfaceLib::Globals* globals, MachineState* state);		// OSErr TEFromScrap(void)
void InterfaceLib_TEGetHeight(InterfaceLib::Globals* globals, MachineState* state);		// long TEGetHeight(long endLine, long startLine, TEHandle hTE)
void InterfaceLib_TEGetOffset(InterfaceLib::Globals* globals, MachineState* state);		// short TEGetOffset(Point pt, TEHandle hTE)
void InterfaceLib_TEGetPoint(InterfaceLib::Globals* globals, MachineState* state);		// Point TEGetPoint(short offset, TEHandle hTE)
void InterfaceLib_TEGetScrapLength(InterfaceLib::Globals* globals, MachineState* state);		// long TEGetScrapLength(void)
void InterfaceLib_TEGetStyle(InterfaceLib::Globals* globals, MachineState* state);		// void TEGetStyle(short offset, TextStyle * theStyle, short * lineHeight, short * fontAscent, TEHandle hTE)
void InterfaceLib_TEGetStyleHandle(InterfaceLib::Globals* globals, MachineState* state);		// TEStyleHandle TEGetStyleHandle(TEHandle hTE)
void InterfaceLib_TEGetStyleScrapHandle(InterfaceLib::Globals* globals, MachineState* state);		// StScrpHandle TEGetStyleScrapHandle(TEHandle hTE)
void InterfaceLib_TEGetText(InterfaceLib::Globals* globals, MachineState* state);		// CharsHandle TEGetText(TEHandle hTE)
void InterfaceLib_TEIdle(InterfaceLib::Globals* globals, MachineState* state);		// void TEIdle(TEHandle hTE)
void InterfaceLib_TEInit(InterfaceLib::Globals* globals, MachineState* state);		// void TEInit(void)
void InterfaceLib_TEInsert(InterfaceLib::Globals* globals, MachineState* state);		// void TEInsert(const void * text, long length, TEHandle hTE)
void InterfaceLib_TEKey(InterfaceLib::Globals* globals, MachineState* state);		// void TEKey(CharParameter key, TEHandle hTE)
void InterfaceLib_TENew(InterfaceLib::Globals* globals, MachineState* state);		// TEHandle TENew(const Rect * destRect, const Rect * viewRect)
void InterfaceLib_TENumStyles(InterfaceLib::Globals* globals, MachineState* state);		// long TENumStyles(long rangeStart, long rangeEnd, TEHandle hTE)
void InterfaceLib_TEPaste(InterfaceLib::Globals* globals, MachineState* state);		// void TEPaste(TEHandle hTE)
void InterfaceLib_TEPinScroll(InterfaceLib::Globals* globals, MachineState* state);		// void TEPinScroll(short dh, short dv, TEHandle hTE)
void InterfaceLib_TEReplaceStyle(InterfaceLib::Globals* globals, MachineState* state);		// void TEReplaceStyle(short mode, const TextStyle * oldStyle, const TextStyle * newStyle, Boolean fRedraw, TEHandle hTE)
void InterfaceLib_TEScrapHandle(InterfaceLib::Globals* globals, MachineState* state);		// Handle TEScrapHandle(void)
void InterfaceLib_TEScroll(InterfaceLib::Globals* globals, MachineState* state);		// void TEScroll(short dh, short dv, TEHandle hTE)
void InterfaceLib_TESelView(InterfaceLib::Globals* globals, MachineState* state);		// void TESelView(TEHandle hTE)
void InterfaceLib_TESetAlignment(InterfaceLib::Globals* globals, MachineState* state);		// void TESetAlignment(short just, TEHandle hTE)
void InterfaceLib_TESetClickLoop(InterfaceLib::Globals* globals, MachineState* state);		// void TESetClickLoop(TEClickLoopUPP clikProc, TEHandle hTE)
void InterfaceLib_TESetScrapLength(InterfaceLib::Globals* globals, MachineState* state);		// void TESetScrapLength(long length)
void InterfaceLib_TESetSelect(InterfaceLib::Globals* globals, MachineState* state);		// void TESetSelect(long selStart, long selEnd, TEHandle hTE)
void InterfaceLib_TESetStyle(InterfaceLib::Globals* globals, MachineState* state);		// void TESetStyle(short mode, const TextStyle * newStyle, Boolean fRedraw, TEHandle hTE)
void InterfaceLib_TESetStyleHandle(InterfaceLib::Globals* globals, MachineState* state);		// void TESetStyleHandle(TEStyleHandle theHandle, TEHandle hTE)
void InterfaceLib_TESetText(InterfaceLib::Globals* globals, MachineState* state);		// void TESetText(const void * text, long length, TEHandle hTE)
void InterfaceLib_TESetWordBreak(InterfaceLib::Globals* globals, MachineState* state);		// void TESetWordBreak(WordBreakUPP wBrkProc, TEHandle hTE)
void InterfaceLib_TEStyleInsert(InterfaceLib::Globals* globals, MachineState* state);		// void TEStyleInsert(const void * text, long length, StScrpHandle hST, TEHandle hTE)
void InterfaceLib_TEStyleNew(InterfaceLib::Globals* globals, MachineState* state);		// TEHandle TEStyleNew(const Rect * destRect, const Rect * viewRect)
void InterfaceLib_TEStylePaste(InterfaceLib::Globals* globals, MachineState* state);		// void TEStylePaste(TEHandle hTE)
void InterfaceLib_TETextBox(InterfaceLib::Globals* globals, MachineState* state);		// void TETextBox(const void * text, long length, const Rect * box, short just)
void InterfaceLib_TEToScrap(InterfaceLib::Globals* globals, MachineState* state);		// OSErr TEToScrap(void)
void InterfaceLib_TEUpdate(InterfaceLib::Globals* globals, MachineState* state);		// void TEUpdate(const Rect * rUpdate, TEHandle hTE)
void InterfaceLib_TEUseStyleScrap(InterfaceLib::Globals* globals, MachineState* state);		// void TEUseStyleScrap(long rangeStart, long rangeEnd, StScrpHandle newStyles, Boolean fRedraw, TEHandle hTE)

/* TextServices */
void InterfaceLib_ActivateTextService(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult ActivateTextService(ComponentInstance ts)
void InterfaceLib_ActivateTSMDocument(InterfaceLib::Globals* globals, MachineState* state);		// OSErr ActivateTSMDocument(TSMDocumentID idocID)
void InterfaceLib_CloseServiceWindow(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseServiceWindow(WindowRef window)
void InterfaceLib_CloseTextService(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseTextService(TSMDocumentID idocID, ComponentInstance aComponentInstance)
void InterfaceLib_CloseTSMAwareApplication(InterfaceLib::Globals* globals, MachineState* state);		// OSErr CloseTSMAwareApplication(void)
void InterfaceLib_DeactivateTextService(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult DeactivateTextService(ComponentInstance ts)
void InterfaceLib_DeactivateTSMDocument(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DeactivateTSMDocument(TSMDocumentID idocID)
void InterfaceLib_DeleteTSMDocument(InterfaceLib::Globals* globals, MachineState* state);		// OSErr DeleteTSMDocument(TSMDocumentID idocID)
void InterfaceLib_FindServiceWindow(InterfaceLib::Globals* globals, MachineState* state);		// short FindServiceWindow(Point thePoint, WindowRef * theWindow)
void InterfaceLib_FixTextService(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult FixTextService(ComponentInstance ts)
void InterfaceLib_FixTSMDocument(InterfaceLib::Globals* globals, MachineState* state);		// OSErr FixTSMDocument(TSMDocumentID idocID)
void InterfaceLib_GetDefaultInputMethod(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetDefaultInputMethod(Component * ts, ScriptLanguageRecord * slRecordPtr)
void InterfaceLib_GetFrontServiceWindow(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetFrontServiceWindow(WindowRef * window)
void InterfaceLib_GetScriptLanguageSupport(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult GetScriptLanguageSupport(ComponentInstance ts, ScriptLanguageSupportHandle * scriptHdl)
void InterfaceLib_GetServiceList(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetServiceList(short numOfInterface, OSType * supportedInterfaceTypes, TextServiceListHandle * serviceInfo, long * seedValue)
void InterfaceLib_GetTextServiceLanguage(InterfaceLib::Globals* globals, MachineState* state);		// OSErr GetTextServiceLanguage(ScriptLanguageRecord * slRecordPtr)
void InterfaceLib_GetTextServiceMenu(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult GetTextServiceMenu(ComponentInstance ts, MenuRef * serviceMenu)
void InterfaceLib_HidePaletteWindows(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult HidePaletteWindows(ComponentInstance ts)
void InterfaceLib_InitiateTextService(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult InitiateTextService(ComponentInstance ts)
void InterfaceLib_InitTSMAwareApplication(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InitTSMAwareApplication(void)
void InterfaceLib_NewCServiceWindow(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewCServiceWindow(void * wStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, short theProc, WindowRef behind, Boolean goAwayFlag, ComponentInstance ts, WindowRef * window)
void InterfaceLib_NewServiceWindow(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewServiceWindow(void * wStorage, const Rect * boundsRect, ConstStr255Param title, Boolean visible, short theProc, WindowRef behind, Boolean goAwayFlag, ComponentInstance ts, WindowRef * window)
void InterfaceLib_NewTSMDocument(InterfaceLib::Globals* globals, MachineState* state);		// OSErr NewTSMDocument(short numOfInterface, InterfaceTypeList supportedInterfaceTypes, TSMDocumentID * idocID, long refcon)
void InterfaceLib_OpenTextService(InterfaceLib::Globals* globals, MachineState* state);		// OSErr OpenTextService(TSMDocumentID idocID, Component aComponent, ComponentInstance * aComponentInstance)
void InterfaceLib_SendAEFromTSMComponent(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SendAEFromTSMComponent(const AppleEvent * theAppleEvent, AppleEvent * reply, AESendMode sendMode, AESendPriority sendPriority, long timeOutInTicks, AEIdleUPP idleProc, AEFilterUPP filterProc)
void InterfaceLib_SetDefaultInputMethod(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetDefaultInputMethod(Component ts, ScriptLanguageRecord * slRecordPtr)
void InterfaceLib_SetTextServiceCursor(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult SetTextServiceCursor(ComponentInstance ts, Point mousePos)
void InterfaceLib_SetTextServiceLanguage(InterfaceLib::Globals* globals, MachineState* state);		// OSErr SetTextServiceLanguage(ScriptLanguageRecord * slRecordPtr)
void InterfaceLib_SetTSMCursor(InterfaceLib::Globals* globals, MachineState* state);		// Boolean SetTSMCursor(Point mousePos)
void InterfaceLib_TerminateTextService(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult TerminateTextService(ComponentInstance ts)
void InterfaceLib_TextServiceEvent(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult TextServiceEvent(ComponentInstance ts, short numOfEvents, EventRecord * event)
void InterfaceLib_TextServiceMenuSelect(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult TextServiceMenuSelect(ComponentInstance ts, MenuRef serviceMenu, short item)
void InterfaceLib_TSMEvent(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TSMEvent(EventRecord * event)
void InterfaceLib_TSMMenuSelect(InterfaceLib::Globals* globals, MachineState* state);		// Boolean TSMMenuSelect(long menuResult)
void InterfaceLib_UCTextServiceEvent(InterfaceLib::Globals* globals, MachineState* state);		// ComponentResult UCTextServiceEvent(ComponentInstance ts, short numOfEvents, EventRecord * event, UniChar unicodeString[], UniCharCount unicodeStrLength)
void InterfaceLib_UseInputWindow(InterfaceLib::Globals* globals, MachineState* state);		// OSErr UseInputWindow(TSMDocumentID idocID, Boolean useWindow)

/* TextUtils */
void InterfaceLib_C2PStr(InterfaceLib::Globals* globals, MachineState* state);		// StringPtr C2PStr(Ptr cString)
void InterfaceLib_FindScriptRun(InterfaceLib::Globals* globals, MachineState* state);		// ScriptRunStatus FindScriptRun(Ptr textPtr, long textLen, long * lenUsed)
void InterfaceLib_FindWord(InterfaceLib::Globals* globals, MachineState* state);		// void FindWord(Ptr textPtr, short textLength, short offset, Boolean leadingEdge, BreakTablePtr breaks, OffsetTable offsets)
void InterfaceLib_FindWordBreaks(InterfaceLib::Globals* globals, MachineState* state);		// void FindWordBreaks(Ptr textPtr, short textLength, short offset, Boolean leadingEdge, BreakTablePtr breaks, OffsetTable offsets, ScriptCode script)
void InterfaceLib_GetIndString(InterfaceLib::Globals* globals, MachineState* state);		// void GetIndString(Str255 theString, short strListID, short index)
void InterfaceLib_GetString(InterfaceLib::Globals* globals, MachineState* state);		// StringHandle GetString(short stringID)
void InterfaceLib_LowercaseText(InterfaceLib::Globals* globals, MachineState* state);		// void LowercaseText(Ptr textPtr, short len, ScriptCode script)
void InterfaceLib_LowerText(InterfaceLib::Globals* globals, MachineState* state);		// void LowerText(Ptr textPtr, short len)
void InterfaceLib_LwrText(InterfaceLib::Globals* globals, MachineState* state);		// void LwrText(Ptr textPtr, short len)
void InterfaceLib_Munger(InterfaceLib::Globals* globals, MachineState* state);		// long Munger(Handle h, long offset, const void * ptr1, long len1, const void * ptr2, long len2)
void InterfaceLib_NewString(InterfaceLib::Globals* globals, MachineState* state);		// StringHandle NewString(ConstStr255Param theString)
void InterfaceLib_NFindWord(InterfaceLib::Globals* globals, MachineState* state);		// void NFindWord(Ptr textPtr, short textLength, short offset, Boolean leadingEdge, NBreakTablePtr nbreaks, OffsetTable offsets)
void InterfaceLib_P2CStr(InterfaceLib::Globals* globals, MachineState* state);		// Ptr P2CStr(StringPtr pString)
void InterfaceLib_SetString(InterfaceLib::Globals* globals, MachineState* state);		// void SetString(StringHandle theString, ConstStr255Param strNew)
void InterfaceLib_StripDiacritics(InterfaceLib::Globals* globals, MachineState* state);		// void StripDiacritics(Ptr textPtr, short len, ScriptCode script)
void InterfaceLib_StripText(InterfaceLib::Globals* globals, MachineState* state);		// void StripText(Ptr textPtr, short len)
void InterfaceLib_StripUpperText(InterfaceLib::Globals* globals, MachineState* state);		// void StripUpperText(Ptr textPtr, short len)
void InterfaceLib_UppercaseStripDiacritics(InterfaceLib::Globals* globals, MachineState* state);		// void UppercaseStripDiacritics(Ptr textPtr, short len, ScriptCode script)
void InterfaceLib_UppercaseText(InterfaceLib::Globals* globals, MachineState* state);		// void UppercaseText(Ptr textPtr, short len, ScriptCode script)
void InterfaceLib_UpperString(InterfaceLib::Globals* globals, MachineState* state);		// void UpperString(Str255 theString, Boolean diacSensitive)
void InterfaceLib_UpperText(InterfaceLib::Globals* globals, MachineState* state);		// void UpperText(Ptr textPtr, short len)
void InterfaceLib_UprText(InterfaceLib::Globals* globals, MachineState* state);		// void UprText(Ptr textPtr, short len)

/* Timer */
void InterfaceLib_InstallTimeTask(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InstallTimeTask(QElemPtr tmTaskPtr)
void InterfaceLib_InstallXTimeTask(InterfaceLib::Globals* globals, MachineState* state);		// OSErr InstallXTimeTask(QElemPtr tmTaskPtr)
void InterfaceLib_InsTime(InterfaceLib::Globals* globals, MachineState* state);		// void InsTime(QElemPtr tmTaskPtr)
void InterfaceLib_InsXTime(InterfaceLib::Globals* globals, MachineState* state);		// void InsXTime(QElemPtr tmTaskPtr)
void InterfaceLib_Microseconds(InterfaceLib::Globals* globals, MachineState* state);		// void Microseconds(UnsignedWide * microTickCount)
void InterfaceLib_PrimeTime(InterfaceLib::Globals* globals, MachineState* state);		// void PrimeTime(QElemPtr tmTaskPtr, long count)
void InterfaceLib_PrimeTimeTask(InterfaceLib::Globals* globals, MachineState* state);		// OSErr PrimeTimeTask(QElemPtr tmTaskPtr, long count)
void InterfaceLib_RemoveTimeTask(InterfaceLib::Globals* globals, MachineState* state);		// OSErr RemoveTimeTask(QElemPtr tmTaskPtr)
void InterfaceLib_RmvTime(InterfaceLib::Globals* globals, MachineState* state);		// void RmvTime(QElemPtr tmTaskPtr)

/* ToolUtils */
void InterfaceLib_BitAnd(InterfaceLib::Globals* globals, MachineState* state);		// long BitAnd(long value1, long value2)
void InterfaceLib_BitClr(InterfaceLib::Globals* globals, MachineState* state);		// void BitClr(void * bytePtr, long bitNum)
void InterfaceLib_BitNot(InterfaceLib::Globals* globals, MachineState* state);		// long BitNot(long value)
void InterfaceLib_BitOr(InterfaceLib::Globals* globals, MachineState* state);		// long BitOr(long value1, long value2)
void InterfaceLib_BitSet(InterfaceLib::Globals* globals, MachineState* state);		// void BitSet(void * bytePtr, long bitNum)
void InterfaceLib_BitShift(InterfaceLib::Globals* globals, MachineState* state);		// long BitShift(long value, short count)
void InterfaceLib_BitTst(InterfaceLib::Globals* globals, MachineState* state);		// Boolean BitTst(const void * bytePtr, long bitNum)
void InterfaceLib_BitXor(InterfaceLib::Globals* globals, MachineState* state);		// long BitXor(long value1, long value2)

/* unknown */
void InterfaceLib_AbsoluteDeltaToDuration(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AbsoluteDeltaToNanoseconds(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AbsoluteToDuration(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AbsoluteToNanoseconds(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AddAbsoluteToAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AddAtomic(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AddAtomic16(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AddAtomic8(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AddDurationToAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AddNanosecondsToAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_addpt(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_addresource(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AnimatePalette(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_appendmenu(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_AppendMenu(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitAndAtomic(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitAndAtomic16(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitAndAtomic8(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitOrAtomic(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitOrAtomic16(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitOrAtomic8(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitXorAtomic(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitXorAtomic16(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BitXorAtomic8(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BlockMoveDataUncached(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BlockMoveUncached(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BlockZero(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_BlockZeroUncached(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_c2pstr(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CallOSTrapUniversalProc(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CallUniversalProc(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CloseDriver(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CloseWindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CompareAndSwap(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CopyRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_create(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_createresfile(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevButtonDown(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevButtonOp(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevButtons(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevButtonUp(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevDisposeDevice(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevDoubleTime(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevFlush(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevMove(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevNewDevice(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevSetAcceleration(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevSetButtons(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_CrsrDevUnitsPerInch(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_Debugger68k(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_debugstr(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DebugStr68k(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DecrementAtomic(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DecrementAtomic16(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DecrementAtomic8(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DeleteMenu(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_deltapoint(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_dibadmount(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DisposeRoutineDescriptor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_dizero(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_dragcontrol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_draggrayrgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_dragwindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DrawMenuBar(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_drawstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DrawText(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DurationToAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_DurationToNanoseconds(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_eject(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_equalpt(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_EqualRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_EqualRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_equalstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_FillRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_FillRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_findcontrol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_finddialogitem(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_findwindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_FindWindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_flushvol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_FrameRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_FrameRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_fsdelete(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_fsopen(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_fsrename(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_get1namedresource(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getcontroltitle(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_GetCurrentProcess(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_GetCursor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getdialogitemtext(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getfinfo(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getfnum(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getfontname(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getindstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_GetMenu(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getmenuitemtext(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getnamedresource(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_GetPixel(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getresinfo(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_GetScript(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_GetTimeBaseInfo(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getvinfo(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getvol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_getwtitle(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_growwindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_IncrementAtomic(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_IncrementAtomic16(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_IncrementAtomic8(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_InsertMenu(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_insertmenuitem(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_InsertMenuItem(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_InsetRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_InvertRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_InvertRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iucomppstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iucompstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iudatepstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iudatestring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iuequalpstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iuequalstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iuldatestring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iultimestring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iustringorder(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iutimepstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_iutimestring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_laddtocell(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lcellsize(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lclick(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lclrcell(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_ldraw(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lgetcell(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lgetcelldatalocation(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_LineTo(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_LMGetTheCursor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_LMSetTheCursor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lnew(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_LoadResource(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lrect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lsetcell(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_lsetselect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_menuselect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_MoveWindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_NanosecondsToAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_NanosecondsToDuration(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_newcolordialog(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_newcontrol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_newcwindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_newdialog(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_newmenu(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_NewRoutineDescriptor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_newstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_newwindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_NQDMisc(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_numtostring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_OffsetRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_OffsetRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_opendeskacc(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_opendriver(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_OpenDriver(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_openresfile(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_openrf(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_openrfperm(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_p2cstr(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_PaintRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_paramtext(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_pinrect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_pt2rect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_ptinrect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_PtInRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_ptinrgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_pttoangle(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_relstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_ReplaceText(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_ResizePalette(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_rstflock(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setcontroltitle(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SetCursor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setdialogitemtext(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setfinfo(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setflock(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setmenuitemtext(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SetPort(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SetRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SetRectRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setresinfo(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SetScript(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setvol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_setwtitle(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_sfgetfile(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_sfpgetfile(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_sfpputfile(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_sfputfile(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_shieldcursor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_ShowCursor(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_ShowWindow(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_stdline(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_stdtext(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_stringtonum(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_stringwidth(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_stuffhex(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SubAbsoluteFromAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SubDurationFromAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_SubNanosecondsFromAbsolute(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_subpt(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_teclick(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_TestAndClear(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_TestAndSet(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_testcontrol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_trackbox(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_trackcontrol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_trackgoaway(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_UnionRect(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_UnionRgn(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_unmountvol(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_upperstring(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_UpTime(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideAdd(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideBitShift(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideCompare(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideDivide(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideMultiply(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideNegate(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideShift(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideSquareRoot(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideSubtract(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_WideWideDivide(InterfaceLib::Globals* globals, MachineState* state);
void InterfaceLib_XorRgn(InterfaceLib::Globals* globals, MachineState* state);

}
